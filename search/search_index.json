{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"AV_xAPI/","title":"Lab&colon; Utilizing AV Specific APIs","text":"<p>Abstract</p> <p>In this section we'll review a few of the AV concepts that are available on Cisco Video Hardware</p> <p>Keep in mind, these are high level examples and we have hundreds of APIs, don't let these be the end of the road in your Journey, it's only the tip of the Iceburg. </p> <p>Click each lesson below to expand them, and follow any tasks they introduce</p> <p>Download AV-MacroPak</p> <p> AV-MacroPak </p> Lesson: Video Compositing <p>Info</p> <p>Most of the of the Cisco Device portfolio can execute at least 1 of the 3 types of video compositing xAPI branches available</p> <p>Click on the tabs below to learn more about each Video Compositing Branch</p> MainVideoSourcePresentationVideo Matrix <p>The SetMainVideoSource xAPI allows us to alter our video output stream, the camera view the far end receives.</p> <p>It allows you to compose your camera feed with up to 4 sources in a 2x2 grid, or 2 sources in a PIP or Prominent Style.</p> <p>This xAPI is used in solutions such as Presenter and Audience Mode, Classroom Mode and the Campfire Blueprint Macro.</p> <p>Just know, the more IO on a codec, the more possibilities. Keep an open mind as you run through examples on smaller devices </p> <p>        Learn more about xStatus Input MainVideoSource         Learn more about xCommand Video Input SetMainVideoSource  </p> EqualPIPProminent <p> </p> <p> </p> <p> </p> <p>The Presentation Start command, though not glaringly obvious also allows you to composite sources into a single stream, but over the Content Channel of a call.</p> <p>It has largely the same feature set as MainVideoSource with a few notable differences</p> <p>   Learn more about xCommand Presentation Start  </p> <p>Video Matrix, again allows you to composite, but it's local to the room.</p> <p>You can mix any inputs on the Codec and send them to a specific video output</p> <p>Popular uses of the Video Matrix APIs are for local video recording or enabling 2 Laptop shares while on a call, on separate screens (1 local, and another shared in call)</p> <p>   Learn more about the Video Matrix APIs  </p> <ul> <li> <p>Task: </p> <ul> <li>Install the Video Compositing Demo Macro from the AV-MacroPak.zip file</li> <li>Save and Activate this Macro<ul> <li>It will spawn a UserInterface for your with all your available sources</li> </ul> </li> <li>Go through each Page in this macro and build new compositions on the fly using the various controls</li> </ul> Inspect the Macro <p>Feel free to inspect the Video Compositing Demo Macro. It's flexible enough to automatically expand how many input and output sources are selectable.</p> <p>It queries the Video Input and Output xConfig branches to determine the # of inputs, then dynamically builds the UI.</p> <p>But, the User Experience could use some work in a live build don't you think </p> <ul> <li>Once complete, if you have 10 active macros, be sure to deactivate at least 1 before moving on to the next lesson</li> </ul> </li> </ul> Lesson: Audio Routing and Control Concepts <p>We won't be able to perform a robust lab on this topic, as Audio Routing is only available on our larger endpoints, and some of our Smaller Endpoints lack the IO to make this section worthwhile</p> <p>But, there are a whole suite of APIs associated to Audio Routing, Type and Control</p> Audio RoutingAudio TypesAudio Techniques in the Field <p>Audio Routing is available on Sx80, Codec Pro and Codec EQ based platforms</p> <p>Know that Codec EQ systems will need a license key for use</p> <p>In the WebUI is a feature called the Audio Console</p> <p>The Audio Console, at a high level, allows grouping of audio sources, routing inputs to outputs, adjusting gain structures and the ability to build and assign up to 8 different Equalizers with 6 parametric bands per equalizer </p> <p>You can also alter these route dynamically using the API</p> <p>   Learn more about the Audio Console (Page 58)  </p> <p>   Learn more about xStatus SystemUnit Software OptionKeys AVIntegrator  </p> <p>        Learn more about Audio Input LocalInput xAPIs         Learn more about Audio Output LocalOutput xAPIs  </p> <p>Cisco Video Codecs offer many ways to connect Audio. It's good to know from a design perspective, but it's also good to know that for each Audio Type, there may be a corresponding xAPI to go along with it</p> Codec Platform Analog Inputs Analog Inputs USB Inputs USB Outputs Ethernet Inputs (Cisco/AES67) Ethernet Outputs (Cisco<code>**</code>/AES67) Room Bar \u274c \u274c 1 1 1 \u274c Room Bar Pro 2 1 1 1 3-8* 4* Board Pro Gen 2 2 1 1 1 3-8* 4* Codec EQ 3 1 1 1 3-8* 4* Codec Pro 8 6 1 1 8 4 <p><code>*</code> = 8 Ethernet and AES67 Audio requires AES67 <code>**</code> = Cisco's DNAM IV Amplifier is an Ethernet Based Audio Output. Only available on Room Panorama and Codec EQ Systems</p> Codec Platform HDMI Audio Inputs HDMI Audio Outputs USB-C Audio Inputs USB-C Audio Outputs Room Bar 1 \u274c 1 (BYOD) 1 (BYOD) Room Bar Pro 1 \u274c 1 (BYOD) 1 (BYOD) Board Pro G2 1 \u274c 1 (BYOD) 1 (BYOD) Codec EQ 3 (1 ARC Enabled) 3 1 (BYOD) 1 (BYOD) Codec Pro 5 (3 ARC Enabled) 3 \u274c \u274c Individual Microphone MutingAudio DuckingAudio Based Automation <p>It's quite a common request to mute specific audio inputs. It's not possible out of the box for our endpoints, but by altering the Audio Input's Configuration Mode using an automation, you can cut audio input at the source</p> <p>All Audio Input types allow you to disable them. That coupled with custom controls on the Touch Panel can enable experiences like this</p> <p>   Learn more about Audio Input xConfigurations  </p> <p>You can access Audio VuMeter information from all Audio Input types</p> <p>Using this information, and a robust set of rules, you can duck certain microphones in a space when a HandHeld or Lavalier goes hot, giving your presenter the Audio Stage.</p> <p>   Check out Cisco Devnet's Audio Ducker Macro  </p> <p>Many asks on the field today are for custom camera automation, and may rely on audio based events</p> <p>That's entirely possible, in fact, the Presenter and Audio Solution and Campfire blueprint leverage these techniques</p> <p>   Check out the Audio Zone Manager (AZM) Macro Library  </p> Lesson: HID Sources <p>Info</p> <p>In this lesson, we'll leverage the USB HID capabilities of the Codec</p> <p>HID Devices, such as keyboards, mice and presentation clickers can connect the the Codec and be used as a Custom Control interface. </p> <p>When xConfiguration Peripherals InputDevice Mode is set to On, you can leverage xEvent UserInterface InputDevice Key Action to subscribe to those device clicks</p> <p>Let's build an Example </p> <ul> <li> <p>xAPI(s):</p> <ul> <li>xConfiguration Peripherals InputDevice Mode</li> <li>xEvent UserInterface InputDevice Key Action</li> <li>xCommand Video Input SetMainVideoSource</li> <li>xCommand Video Matrix Assign</li> <li>xCommand Audio Volume Increase</li> <li>xCommand Audio Volume Decrease</li> </ul> </li> <li> <p>Goal:</p> <ul> <li>Use the Macro Editor to subscribe to HID Device Inputs coming from a Provided Presentation Clicker</li> <li>Use the events coming in from the device to do the following<ul> <li>Left Arrow: Set your Main Source to your Internal Camera</li> <li>Right Arrow: Compose your Camera with an incoming Camera Feed from a Partner Station</li> <li>Up Arrow: Increase your system volume</li> <li>Down Arrow: Decrease your system volume</li> </ul> </li> </ul> </li> <li> <p>Setup:</p> <ul> <li>Partner up with another station in this lab</li> <li>Connect the USB Dongle for your Presentation Clicker to any open USB A connector on your Codec</li> <li>Connect Connect the Second HDMI Output from your Codec to the HDMI Input of your Partner Codec<ul> <li>The partner Station should do the same for you</li> </ul> </li> </ul> </li> <li> <p>Task:</p> <ul> <li>Create a new Macro called Presentation Clicker</li> <li>Save and Activate this Macro</li> <li> <ul> <li>This function should set the following xAPIs and Values using Macro Syntax<ul> <li>xConfiguration Peripherals InputDevice Mode: On</li> <li>xCommand Video Matrix Assign SourceId: 1 Output: 2</li> </ul> </li> </ul> <p>Define and Declare an <code>init()</code> function</p> View <code>init()</code> function <pre><code>function init(){\n  xapi.Config.Peripherals.InputDevice.Mode.set('On');\n  xapi.Command.Video.Matrix.Assign({\n    SourceId: 1,\n    Output: 2\n  });\n}\n</code></pre> </li> <li> <p>Subscribe to xEvent UserInterface InputDevice Key Action</p> <ul> <li>Within the subscription, establish a <code>switch...case</code> statement that switches based on an incoming Key</li> </ul> View Presentation Keys Button Keys Action to run Note Left Arrow <code>KEY_PAGEUP</code> Set Camera to Internal Camera Right Arrow <code>KEY_PAGEDOWN</code> Compose Internal and External Camera Up Arrow <code>KEY_B</code> Increase Volume Down <code>KEY_LEFTSHIFT</code> and <code>KEY_F5</code> Decrease Volume This button alternates keys, handle both with the same command <ul> <li> <p>Assign the following actions to each key, using the provide xAPI written in Macro Syntax</p> <ul> <li>Left Arrow: xCommand Video Input SetMainVideoSource ConnectorId: 1</li> <li>Right Arrow: xCommand Video Input SetMainVideoSource ConnectorId: 1 ConnectorId: 2 Layout: Equal</li> <li>Up Arrow: xCommand Audio Volume Increase</li> <li>Down Arrow: xCommand Audio Volume Decrease</li> </ul> </li> <li> <p>Add console.log() where appropriate</p> </li> </ul> View InputDevice Subscription <pre><code>xapi.Event.UserInterface.InputDevice.Key.Action.on(({ Code, Key, Type }) =&gt; {\n  console.log(`Key Pressed: [${Key}]`)\n  switch (Key) {\n    case 'KEY_PAGEUP': //Left Arrow\n      xapi.Command.Video.Input.SetMainVideoSource({ ConnectorId: [1] })\n      break;\n    case 'KEY_PAGEDOWN': // Right Arrow\n      xapi.Command.Video.Input.SetMainVideoSource({ ConnectorId: [1, 2], Layout: 'Equal' })\n      break;\n    case 'KEY_B': // Up Arrow\n      xapi.Command.Audio.Volume.Increase()\n      break;\n    case 'KEY_LEFTSHIFT': case 'KEY_F5': // Down Arrow\n      xapi.Command.Audio.Volume.Decrease()\n      break;\n  }\n})\n</code></pre> <ul> <li>Once complete, save your macro, make sure it's active and try out the Presentation Clicker</li> </ul> </li> </ul> </li> </ul> Compare your Macro <pre><code>import xapi from 'xapi';\n\nfunction init() {\n  xapi.Config.Peripherals.InputDevice.Mode.set('On');\n  xapi.Command.Video.Matrix.Assign({\n    ConnectorId: 1,\n    Output: 2\n  });\n}\n\ninit();\n\nxapi.Event.UserInterface.InputDevice.Key.Action.on(({ Code, Key, Type }) =&gt; {\n  console.log(`Key Pressed: [${Key}]`)\n  switch (Key) {\n    case 'KEY_PAGEUP': //Left Arrow\n      xapi.Command.Video.Input.SetMainVideoSource({ ConnectorId: [1] })\n      break;\n    case 'KEY_PAGEDOWN': // Right Arrow\n      xapi.Command.Video.Input.SetMainVideoSource({ ConnectorId: [1, 2], Layout: 'Equal' })\n      break;\n    case 'KEY_B': // Up Arrow\n      xapi.Command.Audio.Volume.Increase()\n      break;\n    case 'KEY_LEFTSHIFT': case 'KEY_F5': // Down Arrow\n      xapi.Command.Audio.Volume.Decrease()\n      break;\n  }\n})\n</code></pre> Lesson: WebView OSD and Controller <p>Note</p> <p>All current Cisco Devices have a feature called the WebEngine</p> <p>This WebEngine allows you to setup WebApps, WebViews, WebWidgets and Persistent WebApps across varying products</p> <p>Simply put, they are Web Pages you can access via your device</p> <p>We'll be covering how to open a WebView in the \"Building Room Documentation Macro\", so for the purposes of this lesson, we want you to check out a pretty impressive macro and web application the Cisco WXSD Sales team has put together that utilizes WebViews simultaneously on the OSD and Touch Controller</p> <ul> <li> <p>Task:</p> <ul> <li>Install the webview-websocket Macro from the AV-MacroPak</li> <li>Save and Activate the macro</li> <li>It will spawn a panel for you called WebSocket Demos</li> <li>Open this interface and try each of the demos</li> </ul> </li> </ul> <p>     Learn more about WXSD's webview-websocket Macro </p> Lesson: Room Analytics <p>Note</p> <p>Let's take a brief break from Macros and install a Web Widget </p> <p>Web Widgets are a great way to add signage to your Device running in RoomOS mode</p> <p>It's Web Content that rests in a non-interactive Modal Window on the OSD of your Codec</p> <p>Great for Digital Signage, Company Wide Communication, Stock Tickers, anything that really enhances your User's Experience</p> <p>We'll be using WebContent curated by our WXSD Sales Team. They built a Web Widget that leverages the front end jsxapi module that sockets into your Video Endpoint and Pulls the Analytics Information available on the Codec.</p> What's the jsxapi module? <p>The jsxapi module is a tool that's hosted external to the codec that can facilitate either an SSH or a WebSocket connection to the endpoint. The syntax is largely similar to Macro syntax, except with a few more steps to establish the socket</p> <p>The advantage of the jsxapi is you can embed it into Web Applications as well as leverage other services not accessible on the Codec</p> <p>   Learn more about the jsxapi  </p> <ul> <li> <p>xAPI(s):</p> <ul> <li>xConfiguration WebEngine Mode: On</li> <li>xConfiguration WebEngine Features AllowDeviceCertificate: True</li> <li>xConfiguration NetworkServices CommonProxy: Enabled</li> </ul> </li> <li> <p>Task: </p> <ul> <li>Navigate to the Configuration section of the Codec's WebUI</li> <li> <p>Set the Above xAPI references to the provided values</p> <ul> <li>Note, CommonProxy is ONLY available via the WebUI</li> </ul> </li> <li> <p>Navigate to the UI Extensions Editor</p> </li> <li> <p>Select New</p> </li> <li>Select WebWidget</li> <li>Assign the following URL to the WebWidget</li> </ul> <pre><code>https://wxsd-sales.github.io/analytics-web-widget/widget.html?username=ENTER_USERNAME_HERE&amp;password=ENTER_PASSWORD_HERE&amp;ipAddress=ENTER_IP_HERE\n</code></pre> <p>Note</p> <p>The URL above has 3 URL parameters you MUST assign</p> <ul> <li>username=</li> <li>password=</li> <li>ipAddress=</li> </ul> <p>Be sure to provide the Username, Password and Ip Address of your codec in these fields. The jsxapi module within the Web App will use this information to form a socket against your endpoint</p> <ul> <li>Save your UI Extension, you should now see a Web Widget on the OSD of your Device</li> </ul> <p>   Learn more about WXSD's Analytics Web Widget </p> </li> </ul> Compare your OSD <p> Web Widget </p> Lesson: Triple Click Example <p>Info</p> <p>At times, we may want to build in tools that should only be available to super users or device admins in a space</p> <p>It's common to see hidden interfaces in the wild that allow users to make changes to their space that the everyday user need not interact with, such as modifying a gain structure for Microphones or Re-Routing Displays</p> <p>But at face value, our UI Extensions don't offer an obvious solution to that need when you first dive into them</p> <p>You may have noticed, while interacting with the Panel Properties, that you can set the Location to \"Hidden\"</p> <p>This allows you to have a UserInterface that's not visible on the touch interface, but can still be opened programmatically via the API</p> <ul> <li>Install the Triple Click Demo Macro from the AV-MacroPak.zip file</li> <li>Save and Activate this Macro<ul> <li>It will spawn a UserInterface for your with a panel called User Facing Panel</li> </ul> </li> <li>Click the Panel and it will open up an interface we want our average user to access</li> <li>Close the panel and then quickly click the panel 3 times to reveal a hidden interface </li> </ul> Timing is Key <p>If you inspect the Macro, we're leveraging the SetTimeout and ClearTimeout functions built into ES6 JS to facilitate this action</p> <p>Each time the panel is clicked within certain number of milliseconds, we increase a counter and if we reach 3 clicks, we'll open up our hidden interface</p> <p>Let's Pin Protect this Hidden Interface!</p> <p>Sometimes, a user may find a hidden interface like this, so in order to further prevent access to it, we can use a TextInput prompt that asks for a pin, before we allow access to this interface</p> <ul> <li> <p>xAPI(s): </p> <ul> <li>xCommand UserInterface Message TextInput Display</li> <li>xEvent UserInterface Message TextInput Response</li> <li>xCommand UserInterface Extensions Panel Open</li> </ul> </li> <li> <p>Goal: </p> <ul> <li>Modify the Triple Click Demo Macro so that the a TextInput prompt opens instead of the hidden interface</li> <li>On a successful pin entry, then open the hidden Interface</li> <li>On a failed pin, re-open the TextInput prompt</li> </ul> </li> <li> <p>Task: </p> <ul> <li>Establish a <code>pinCode</code> object in the configuration section with a value of <code>1234</code></li> </ul> <pre><code>const pinCode = 1234;\n</code></pre> <ul> <li>Modify the <code>openPanel()</code> function in the Triple Click Demo Macro</li> <li> <ul> <li>Replace xCommand UserInterface Extensions Panel Open call with xCommand UserInterface Message TextInput Display and apply the following parameters<ul> <li>Title: \"Enter Pin for Access\"</li> <li>Text: \"Enter a 4 digit pin below to access a hidden interface\"</li> <li>InputType: PIN</li> <li>FeedbackId: protectedTripleClick</li> <li>Duration: 30</li> </ul> </li> <li>Note: you'll need that xCommand UserInterface Extensions Panel Open later in code, so best to copy it or comment it out</li> </ul> <p>Your modification should:</p> View Before and After for the <code>openPanel()</code> function Before ChangesAfter Changes <pre><code>/*This function governs the panel logic*/\nasync function openPanel() {\n  clearTimeout(hiddenAccessHandler); //Clear the handler on each press\n  hiddenAccessCount++; //Increase the count\n  if (hiddenAccessCount == maxClicks) {\n    console.warn({ Message: `Hidden Panel [${multiClickPanel}] revealed` })\n    clearTimeout(hiddenAccessHandler); //Clear the the count threshold is met\n    return xapi.Command.UserInterface.Extensions.Panel.Open({\n      PanelId: multiClickPanel\n    }); //Open the hidden panel\n  }\n  hiddenAccessHandler = setTimeout(function () {\n    console.log({ Message: `Standard Panel [${singleClickPanel}] opened` })\n    xapi.Command.UserInterface.Extensions.Panel.Open({\n      PanelId: singleClickPanel\n    }); //If the button is not pressed quickly enough, open the standard panel\n    hiddenAccessCount = 0; //Reset the count\n  }, delayBetweenClicks_ms)\n};\n</code></pre> <pre><code>/*This function governs the panel logic*/\nasync function openPanel() {\n  clearTimeout(hiddenAccessHandler);\n  hiddenAccessCount++; \n  if (hiddenAccessCount == maxClicks) {\n    console.warn({ Message: `Hidden Panel [${multiClickPanel}] Requested` }) // &lt;-- Update our Console Log to Match\n    clearTimeout(hiddenAccessHandler); \n\n    return xapi.Command.UserInterface.Message.TextInput.Display({ // &lt;-- Adding our TextInput Prompt\n      Title: 'Enter Pin for Access',\n      Text: 'Enter a 4 digit pin below to access a hidden interface',\n      InputType: 'Pin',\n      FeedbackId: 'protectedTripleClick',\n      Duration: 30\n    })\n\n    // return xapi.Command.UserInterface.Extensions.Panel.Open({\n    //   PanelId: multiClickPanel\n    // });\n  }\n  hiddenAccessHandler = setTimeout(function () {\n    console.log({ Message: `Standard Panel [${singleClickPanel}] opened` })\n    xapi.Command.UserInterface.Extensions.Panel.Open({\n      PanelId: singleClickPanel\n    }); //If the button is not pressed quickly enough, open the standard panel\n    hiddenAccessCount = 0; //Reset the count\n  }, delayBetweenClicks_ms)\n};\n</code></pre> <ul> <li> <p>We now need a Subscription to the TextInput Response in order to handle the user's pin submission</p> </li> <li> <p>Subscribe to xEvent UserInterface Message TextInput Response using Macro Syntax</p> </li> <li> <ul> <li>Use an <code>if</code> statement to check if an incoming TextInput response matches the FeedbackId we set in the TextInput command &gt; 'protectedTripleClick'</li> <li>Use the <code>&amp;&amp;</code> operator within the same <code>if</code> statement to check if the Text matches the <code>pinCode</code> object configured in our Macro<ul> <li>If the FeedbackId and Text matches, open the hidden panel using xCommand UserInterface Extensions Panel Open</li> <li>Else re-open the TextInput Prompt but change the title to \"Incorrect Pin Entry, Try Again\"</li> </ul> </li> </ul> <p>Within the subscription</p> View Subscription <pre><code>xapi.Event.UserInterface.Message.TextInput.Response.on(({FeedbackId, Text})=&gt;{\n  if (FeedbackId == 'protectedTripleClick' &amp;&amp; Text == pinCode){\n    console.warn({ Message: `Pin Passed, Hidden Panel [${multiClickPanel}] revealed` })\n    xapi.Command.UserInterface.Extensions.Panel.Open({\n      PanelId: multiClickPanel\n    });\n  } else {\n    console.warn({ Message: `Re-prompting Pin Entry forHidden Panel [${multiClickPanel}]` });\n    return xapi.Command.UserInterface.Message.TextInput.Display({\n      Title: 'Incorrect Pin Entry, Try Again',\n      Text: 'Enter a 4 digit pin below to access a hidden interface',\n      InputType: 'Pin',\n      FeedbackId: 'protectedTripleClick',\n      Duration: 30\n    })\n  }\n})\n</code></pre> </li> </ul> </li> <li> <p>Once complete, Save and Activate this Macro</p> <ul> <li>It will spawn a UserInterface for your with a panel called User Facing Panel</li> </ul> </li> <li>Click the Panel and it will open up an interface we want our average user to access</li> <li>Close the panel and then quickly click the panel 3 times to reveal open the TextInput Prompt<ul> <li>Try entering the Correct pinCode (1234)</li> <li>Also try entering the wrong pin</li> </ul> </li> </ul> </li> </ul> Compare your Macro <pre><code>/********************************************************\nCopyright (c) 2024 Cisco and/or its affiliates.\nThis software is licensed to you under the terms of the Cisco Sample\nCode License, Version 1.1 (the \"License\"). You may obtain a copy of the\nLicense at\n              https://developer.cisco.com/docs/licenses\nAll use of the material herein must be in accordance with the terms of\nthe License. All rights not expressly granted by the License are\nreserved. Unless required by applicable law or agreed to separately in\nwriting, software distributed under the License is distributed on an \"AS\nIS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\nor implied.\n*********************************************************/\n\n/**\n * Macro Author:              Robert(Bobby) McGonigle Jr\n *                            Technical Marketing Engineering, Leader\n *                            Cisco Systems\n * \n * ---------------------------------------------------------------------\n * Last Revised October 2024\n */\n\nimport xapi from 'xapi';\n\n/*Configuration Section*/\n\nconst pinCode = 1234;\n\nconst singleClickPanel = 'singleClickPanel' //Panel ID of the Standard Panel you want to open on a single press\nconst multiClickPanel = 'multiClickPanel'; //Panel ID of the Hidden Panel you'll reveal in X presses in quick succession\nconst userFacingPanel = 'userFacingPanel'; //Panel ID of the user facing panel\n\nconst delayBetweenClicks_ms = 250 //Delay Between Presses in Milliseconds to reveal the Hidden Panel\nconst maxClicks = 3 //Number of clicks needed to reveal the panel\n\n/*Important objects, do not change*/\n\nlet hiddenAccessHandler; //Handles the timeout needed for panel logic\nlet hiddenAccessCount = 0; //let needed to track # of clicks presses\n\n\n/*This function governs the panel logic*/\nasync function openPanel() {\n  clearTimeout(hiddenAccessHandler);\n  hiddenAccessCount++; \n  if (hiddenAccessCount == maxClicks) {\n    console.warn({ Message: `Hidden Panel [${multiClickPanel}] Requested` }) // &lt;-- Update our Console Log to Match\n    clearTimeout(hiddenAccessHandler); \n\n    return xapi.Command.UserInterface.Message.TextInput.Display({ // &lt;-- Adding our TextInput Prompt\n      Title: 'Enter Pin for Access',\n      Text: 'Enter a 4 digit pin below to access a hidden interface',\n      InputType: 'Pin',\n      FeedbackId: 'protectedTripleClick',\n      Duration: 30\n    })\n\n    // return xapi.Command.UserInterface.Extensions.Panel.Open({\n    //   PanelId: multiClickPanel\n    // });\n  }\n  hiddenAccessHandler = setTimeout(function () {\n    console.log({ Message: `Standard Panel [${singleClickPanel}] opened` })\n    xapi.Command.UserInterface.Extensions.Panel.Open({\n      PanelId: singleClickPanel\n    }); //If the button is not pressed quickly enough, open the standard panel\n    hiddenAccessCount = 0; //Reset the count\n  }, delayBetweenClicks_ms)\n};\n\nxapi.Event.UserInterface.Message.TextInput.Response.on(({FeedbackId, Text})=&gt;{\n  if (FeedbackId == 'protectedTripleClick' &amp;&amp; Text == pinCode){\n    console.warn({ Message: `Pin Passed, Hidden Panel [${multiClickPanel}] revealed` })\n    xapi.Command.UserInterface.Extensions.Panel.Open({\n      PanelId: multiClickPanel\n    });\n  } else {\n    console.warn({ Message: `Re-prompting Pin Entry forHidden Panel [${multiClickPanel}]` });\n    return xapi.Command.UserInterface.Message.TextInput.Display({\n      Title: 'Incorrect Pin Entry, Try Again',\n      Text: 'Enter a 4 digit pin below to access a hidden interface',\n      InputType: 'Pin',\n      FeedbackId: 'protectedTripleClick',\n      Duration: 30\n    })\n  }\n})\n\n\n/*Normal Event logic*/\nxapi.Event.UserInterface.Extensions.Panel.Clicked.on(event =&gt; {\n  switch (event.PanelId) {\n    case userFacingPanel: //Run open panel logic when the User Facing panel is pressed// This can be any action button\n      openPanel()\n      break;\n    default:\n      break;\n  }\n});\n\nxapi.Event.UserInterface.Extensions.Widget.Action.on(event =&gt; {\n  switch (event.WidgetId) {\n    case 'visiblePanel_2':\n      xapi.Command.UserInterface.Message.Prompt.Display({\n        Title: 'You did it!',\n        Text: 'You pressed a button&lt;p&gt;Now, find the hidden button to press',\n        Duration: 5,\n        \"Option.1\": 'Dismiss'\n      })\n      break;\n    case 'hiddenPanel_2':\n      xapi.Command.UserInterface.Message.Prompt.Display({\n        Title: 'You did it!',\n        Text: 'You pressed the HIDDEN button&lt;p&gt;Well, that\\'s about it, happy coding \ud83d\ude0a',\n        Duration: 5,\n        \"Option.1\": 'Dismiss'\n      })\n      break;\n    default:\n      break;\n  }\n})\n\nasync function buildPanels() {\n\n  const userFacingXML = `&lt;Extensions&gt;\n  &lt;Panel&gt;\n    &lt;Origin&gt;local&lt;/Origin&gt;\n    &lt;Location&gt;HomeScreenAndCallControls&lt;/Location&gt;\n    &lt;Icon&gt;Concierge&lt;/Icon&gt;\n    &lt;Color&gt;#CF7900&lt;/Color&gt;\n    &lt;Name&gt;User Facing Panel&lt;/Name&gt;\n    &lt;ActivityType&gt;Custom&lt;/ActivityType&gt;\n  &lt;/Panel&gt;\n&lt;/Extensions&gt;\n`;\n\n  const singleClickXML = `&lt;Extensions&gt;\n  &lt;Panel&gt;\n    &lt;Origin&gt;local&lt;/Origin&gt;\n    &lt;Location&gt;Hidden&lt;/Location&gt;\n    &lt;Icon&gt;Input&lt;/Icon&gt;\n    &lt;Name&gt;Visible Panel&lt;/Name&gt;\n    &lt;ActivityType&gt;Custom&lt;/ActivityType&gt;\n    &lt;Page&gt;\n      &lt;Name&gt;Normal Visible Panel&lt;/Name&gt;\n      &lt;Row&gt;\n        &lt;Name&gt;Row&lt;/Name&gt;\n        &lt;Widget&gt;\n          &lt;WidgetId&gt;visiblePanel_1&lt;/WidgetId&gt;\n          &lt;Name&gt;Nothing to hide here \ud83d\ude0a&lt;/Name&gt;\n          &lt;Type&gt;Text&lt;/Type&gt;\n          &lt;Options&gt;size=4;fontSize=normal;align=center&lt;/Options&gt;\n        &lt;/Widget&gt;\n      &lt;/Row&gt;\n      &lt;Row&gt;\n        &lt;Name&gt;Row&lt;/Name&gt;\n        &lt;Widget&gt;\n          &lt;WidgetId&gt;visiblePanel_2&lt;/WidgetId&gt;\n          &lt;Name&gt;Oh Look, A Button \ud83c\udf89&lt;/Name&gt;\n          &lt;Type&gt;Button&lt;/Type&gt;\n          &lt;Options&gt;size=4&lt;/Options&gt;\n        &lt;/Widget&gt;\n      &lt;/Row&gt;\n      &lt;Row&gt;\n        &lt;Name&gt;Row&lt;/Name&gt;\n        &lt;Widget&gt;\n          &lt;WidgetId&gt;visiblePanel_3&lt;/WidgetId&gt;\n          &lt;Name&gt;Exit this panel and tap it 3 times in quick succession to reveal a hidden panel&lt;/Name&gt;\n          &lt;Type&gt;Text&lt;/Type&gt;\n          &lt;Options&gt;size=4;fontSize=normal;align=center&lt;/Options&gt;\n        &lt;/Widget&gt;\n      &lt;/Row&gt;\n      &lt;Row&gt;\n        &lt;Name&gt;Row&lt;/Name&gt;\n        &lt;Widget&gt;\n          &lt;WidgetId&gt;visiblePanel_4&lt;/WidgetId&gt;\n          &lt;Name&gt;Feel free to use this example to build tools that don't always need to be visible&lt;/Name&gt;\n          &lt;Type&gt;Text&lt;/Type&gt;\n          &lt;Options&gt;size=4;fontSize=normal;align=center&lt;/Options&gt;\n        &lt;/Widget&gt;\n      &lt;/Row&gt;\n      &lt;Options&gt;hideRowNames=1&lt;/Options&gt;\n    &lt;/Page&gt;\n  &lt;/Panel&gt;\n&lt;/Extensions&gt;\n`;\n\n  const multiClickXML = `&lt;Extensions&gt;\n  &lt;Panel&gt;\n    &lt;Origin&gt;local&lt;/Origin&gt;\n    &lt;Location&gt;Hidden&lt;/Location&gt;\n    &lt;Icon&gt;Sliders&lt;/Icon&gt;\n    &lt;Name&gt;Hidden Panel&lt;/Name&gt;\n    &lt;ActivityType&gt;Custom&lt;/ActivityType&gt;\n    &lt;Page&gt;\n      &lt;Name&gt;Super Secret Panel&lt;/Name&gt;\n      &lt;Row&gt;\n        &lt;Name&gt;Row&lt;/Name&gt;\n        &lt;Widget&gt;\n          &lt;WidgetId&gt;hiddenPanel_1&lt;/WidgetId&gt;\n          &lt;Name&gt;Tuck away tools for quick changes to your system on the fly&lt;/Name&gt;\n          &lt;Type&gt;Text&lt;/Type&gt;\n          &lt;Options&gt;size=4;fontSize=normal;align=center&lt;/Options&gt;\n        &lt;/Widget&gt;\n      &lt;/Row&gt;\n      &lt;Row&gt;\n        &lt;Name&gt;Row&lt;/Name&gt;\n        &lt;Widget&gt;\n          &lt;WidgetId&gt;hiddenPanel_2&lt;/WidgetId&gt;\n          &lt;Name&gt;WHAT?!?! Another Button!!!&lt;/Name&gt;\n          &lt;Type&gt;Button&lt;/Type&gt;\n          &lt;Options&gt;size=4&lt;/Options&gt;\n        &lt;/Widget&gt;\n      &lt;/Row&gt;\n      &lt;Options&gt;hideRowNames=1&lt;/Options&gt;\n    &lt;/Page&gt;\n  &lt;/Panel&gt;\n&lt;/Extensions&gt;\n`;\n\n  xapi.Command.UserInterface.Extensions.Panel.Save({ PanelId: userFacingPanel }, userFacingXML)\n\n  xapi.Command.UserInterface.Extensions.Panel.Save({ PanelId: singleClickPanel }, singleClickXML)\n\n  xapi.Command.UserInterface.Extensions.Panel.Save({ PanelId: multiClickPanel }, multiClickXML)\n}\n\nbuildPanels();\n</code></pre> Lesson: Pressed and Released Use Cases <p>Note</p> <p>Unlike panels, many widgets fire multiple events. These events may seem a bit odd, as they can seam to fire at the same time, but it could be that you're interacting with the Widget a bit too quickly.</p> <p>We can leverage these unique events from each widget to craft a more refined User Experience in our customization</p> <p>Below is a list of all the Widgets we have today and which events they can fire</p> <p>Click on each table below to review each Widget</p> ToggleSliderButtonGroupButtonIcon ButtonSpinnerTextBoxDirectional PadSpacer <p>Gif</p> <p> Toggle Action </p> Key Value WidgetId <code>Assigned by the Developer on Widget Instantiation</code> Type <code>changed</code> Value <code>on</code> or <code>off</code> <p>Gif</p> <p> Slider Action </p> Key Value WidgetId <code>Assigned by the Developer on Widget Instantiation</code> Type <code>pressed</code>, <code>released</code>, or <code>changed</code> Value <code>Integer between 0 and 255</code> <p>Gif</p> <p> Button Action </p> Key Value WidgetId <code>Assigned by the Developer on Widget Instantiation</code> Type <code>pressed</code>, <code>released</code>, or <code>clicked</code> Value N/A <p>Gif</p> <p> Group Button Action </p> Key Value WidgetId <code>Assigned by the Developer on Widget Instantiation</code> Type <code>pressed</code>, <code>released</code> Value <code>Assigned by the Developer on Widget Instantiation</code> <p>Gif</p> <p> Icon Button Icons </p> Key Value WidgetId <code>Assigned by the Developer on Widget Instantiation</code> Type <code>pressed</code>, <code>released</code>, or <code>clicked</code> Value N/A <p>Gif</p> <p> Spinner Icons </p> Key Value WidgetId <code>Assigned by the Developer on Widget Instantiation</code> Type <code>pressed</code>, <code>released</code>, or <code>clicked</code> Value <code>increment</code> or <code>decrement</code> <p>Does not fire events</p> <p>Gif</p> <p> Directional Pad Action </p> Key Value WidgetId <code>Assigned by the Developer on Widget Instantiation</code> Type <code>pressed</code>, <code>released</code>, or <code>clicked</code> Value <code>up</code>, <code>down</code>, <code>left</code>, <code>right</code>, <code>center</code> <p>Does not fire events</p> <ul> <li> <p>xAPI(s): </p> <ul> <li>xEvent UserInterface Extensions Widget Action</li> <li>xCommand UserInterface Message Rating Display</li> <li>xCommand UserInterface Extensions Panel Open</li> <li>xCommand Audio Sound Play</li> </ul> </li> <li> <p>Goal: </p> <ul> <li> <p>Like we did with Panels, we can open a hidden interface based on certain events coming from a widget</p> </li> <li> <p>Leverage the Pressed and Released types of a Widget Button's events in 2 different ways</p> </li> <li>Pressed: When held for 3 seconds, open up a hidden panel</li> <li>Released: If released before the 3 second mark, open up a Message Rating prompt</li> </ul> </li> <li> <p>Task: </p> <ul> <li>Install the MessageRating.xml UI extension in the UI Extensions Editor</li> <li> <p>Install the HiddenMenu.xml UI extension in the UI Extensions Editor</p> </li> <li> <p>Create a new Macro called Pressed and Released Demo, save and activate it</p> </li> <li> <p>In this macro do the following</p> <ul> <li>define an object called <code>pressHandler</code> and assign the value of <code>''</code>;</li> <li>define an object called <code>showHidden</code> and assign the value of <code>false</code>;<ul> <li></li> </ul> </li> </ul> <pre><code>let pressHandler = '';\nlet showHidden = false;\n</code></pre> <ul> <li>Subscribe to xEvent UserInterface Extensions Widget Action</li> <li> <ul> <li>Use an <code>if</code> statement to see if the WidgetId matches \"ratingSystem\"</li> <li> <ul> <li>Within this <code>if</code> statement, assign ES6 JS's setTimeout() function to the <code>pressHandler</code> object</li> <li>In the first parameter of the setTimeout(), assign a short-hand function  and define the following in this short-hand function<ul> <li>xCommand Audio Sound Play Sound: Binding</li> <li>Update <code>showHidden = true;</code></li> </ul> </li> </ul> <p>Use an <code>if</code> statement to compare the incoming Widget Type to the value <code>pressed</code></p> <ul> <li>In the first parameter of the setTimeout(), assign the value of <code>3000</code> (milliseconds)</li> </ul> </li> </ul> <p>Within this Subscription:</p> <ul> <li> <ul> <li>Within this <code>if</code> statement, run the ES6 JS function clearTimeout() and pass <code>pressHandler</code> object as it's only parameter</li> </ul> <p>Use an <code>if</code> statement to compare the incoming Widget Type to the value <code>released</code></p> <ul> <li>Use an <code>if</code> statement to check the value of the <code>showHidden</code> object<ul> <li>If true, do the following<ul> <li>Run xCommand UserInterface Extensions Panel Open with the following parameter<ul> <li>PanelId: hiddenMenu</li> </ul> </li> <li>Update <code>showHidden = false;</code></li> </ul> </li> <li>If false, do the following<ul> <li>Run xCommand UserInterface Message Rating Display with the following Parameters<ul> <li>Title: \"Rate this Experience\"</li> <li>Text: \"1 being the lowest, 5 being the highest\"</li> <li>Duration: 30</li> </ul> </li> </ul> </li> </ul> </li> </ul> </li> </ul> </li> </ul> View Subscription <pre><code>xapi.Event.UserInterface.Extensions.Widget.Action.on(({ WidgetId, Type, Value }) =&gt; {\n  if (WidgetId == 'ratingSystem') {\n    if (Type == 'pressed') {\n      pressHandler = setTimeout(() =&gt; {\n        showHidden = true;\n        xapi.Command.Audio.Sound.Play({ Sound: 'Binding' });\n        return;\n      }, 3000);\n    };\n\n    if (Type == 'released') {\n      clearInterval(pressHandler);\n      if (showHidden) {\n        showHidden = false;\n        xapi.Command.UserInterface.Extensions.Panel.Open({ PanelId: 'hiddenMenu' });\n      } else {\n        xapi.Command.UserInterface.Message.Rating.Display({\n          Title: 'Rate this Experience',\n          Text: '1 being the lowest, 5 being the highest',\n          Duration: 30\n        });\n      }\n    }\n  }\n})\n</code></pre> <ul> <li>Once complete, Save and Activate this Macro</li> <li>Open the Pressed and Released Demo Panel<ul> <li>Click the Start Survey Button<ul> <li>You should see the Rating Display with a selection of 1 to 5 start</li> </ul> </li> <li>Then tress and hold the Start Survey Start Survey for 3 seconds<ul> <li>You should hear a faint beep beep</li> <li>That sound indicates you held the button long enough and can now release<ul> <li>You should see a Secret Rating System contained in a Panel using a Group Button</li> </ul> </li> </ul> </li> </ul> </li> </ul> </li> </ul> Compare your Macro <pre><code>import xapi from 'xapi';\n\nlet pressHandler = '';\n\nlet showHidden = false;\n\nxapi.Event.UserInterface.Extensions.Widget.Action.on(({ WidgetId, Type, Value }) =&gt; {\n  if (WidgetId == 'ratingSystem') {\n    if (Type == 'pressed') {\n      pressHandler = setTimeout(() =&gt; {\n        showHidden = true;\n        xapi.Command.Audio.Sound.Play({ Sound: 'Binding' });\n        return;\n      }, 3000);\n    };\n\n    if (Type == 'released') {\n      clearInterval(pressHandler);\n      if (showHidden) {\n        showHidden = false;\n        xapi.Command.UserInterface.Extensions.Panel.Open({ PanelId: 'hiddenMenu' });\n      } else {\n        xapi.Command.UserInterface.Message.Rating.Display({\n          Title: 'Rate this Experience',\n          Text: '1 being the lowest, 5 being the highest',\n          Duration: 30\n        });\n      }\n    }\n  }\n})\n</code></pre> </li> </ul> Expanding Native Share Sources [Under Construction] <p>Note</p> <p>At times, it's necessary to expand the number of video inputs available on a Codec using HDMI switchers/matrices</p> <p>Building a custom panel to allow a user to select these external sources is entirely possible, but it clutters up the UserInterface</p> <p>We do have tools to allow you to expand sources in the Codec's Native share tray and produce events for your Automation to relay on in order to tell that HDMI switchers/matrix to switch</p> <p>This will give a consistent look and feel across all rooms while enabling expansion of your video inputs</p> <p>For this lesson, we ask that you re-connect to the endpoint via SSH</p> <ul> <li> <p>xAPI(s):</p> <ul> <li>xCommand UserInterface Presentation ExternalSource Add</li> <li>xCommand UserInterface Presentation ExternalSource List</li> <li>xCommand UserInterface Presentation ExternalSource Remove</li> <li>xCommand UserInterface Presentation ExternalSource RemoveAll</li> <li>xCommand UserInterface Presentation ExternalSource State Set</li> <li>xEvent UserInterface Presentation ExternalSource Selected</li> </ul> </li> <li> <p>Goal:</p> <ul> <li>Use the xAPIs above to expand our HDMI input source from 1 to 4</li> <li>Set their states and subscribe to when they are selected</li> </ul> </li> <li> <p>Task:</p> <ul> <li>First, select the Share Tray to your Codec and review the available sources</li> <li>Log into your device via SSH</li> <li>Run the following commands <pre><code>xCommand UserInterface Presentation ExternalSource RemoveAll\nxCommand UserInterface Presentation ExternalSource Add ConnectorId: 3 Name: \"External 1\" SourceIdentifier: ext_1 Type: PC\nxCommand UserInterface Presentation ExternalSource State Set SourceIdentifier: ext_1 State: Ready\nxCommand UserInterface Presentation ExternalSource Add ConnectorId: 3 Name: \"External 2\" SourceIdentifier: ext_2 Type: PC\nxCommand UserInterface Presentation ExternalSource State Set SourceIdentifier: ext_2 State: NotReady\nxCommand UserInterface Presentation ExternalSource Add ConnectorId: 3 Name: \"External 3\" SourceIdentifier: ext_3 Type: PC\nxCommand UserInterface Presentation ExternalSource State Set SourceIdentifier: ext_3 State: Error ErrorReason: \"HDMI Switcher On Vacation\"\nxCommand UserInterface Presentation ExternalSource Add ConnectorId: 3 Name: \"External 4\" SourceIdentifier: ext_4 Type: PC\nxCommand UserInterface Presentation ExternalSource State Set SourceIdentifier: ext_4 State: Ready\n</code></pre></li> </ul> </li> </ul> Shell to XML Conversion Macro <pre><code>const shellPath = 'xCommand Message Send';\n\nfunction convertToXML(data) {\n  const filterData = structureXapi(data)\n  switch (filterData.Type.toLowerCase()) {\n    case 'xcommand': case 'xcom':\n      return formXmlPath(filterData, 'set');\n    case 'xconfiguration': case 'xconfig':\n      switch (filterData.SubType) {\n        case 'get':\n          return formXmlPath(filterData, 'get');\n        case 'set':\n          return formXmlPath(filterData, 'set');\n        default:\n          break;\n      }\n      break;\n    case 'xstat': case 'xstatus':\n      switch (filterData.SubType) {\n        case 'get':\n          return formXmlPath(filterData, 'get');\n        default:\n          break;\n      }\n      break;\n    default:\n      break;\n  }\n}\n\nfunction formXmlPath(data, type = 'set') {\n  if (type == 'set') {\n    let openXML = ``;\n    let closeXML = ``;\n    let paramXML = ``;\n\n    for (let i = 0; i &lt; data.xApi.length; i++) {\n      openXML = openXML + `&lt;${data.xApi[i]}&gt;`\n      closeXML = closeXML + `&lt;/${data.xApi[data.xApi.length - (1 + i)]}&gt;`\n    }\n\n    if (Object.keys(data.Parameters).length &gt; 0) {\n      const objects = Object.getOwnPropertyNames(data.Parameters)\n      objects.forEach(element =&gt; {\n        paramXML = paramXML + `&lt;${element}&gt;${data.Parameters[element]}&lt;/${element}&gt;`\n      })\n    }\n\n    let XmlPath = `&lt;${data.Type.replace('x', '')}&gt;${openXML}${paramXML}${closeXML}&lt;/${data.Type.replace('x', '')}&gt;`\n    return XmlPath\n  } else if (type == 'get') {\n    let path = `${data.Type.replace('x', '')}/`\n    for (let i = 0; i &lt; data.xApi.length; i++) {\n      if (i == (data.xApi.length - 1)) {\n        path = path + `${data.xApi[i]}`\n      } else {\n        path = path + `${data.xApi[i]}/`\n      }\n    }\n    return path\n  }\n}\n\nfunction determineType(dt) { //Basically if you have a : colon, you've provided me data, else you're requesting it\n  let count = 0\n  for (let i = 0; i &lt; dt.length; i++) {\n    if (dt[i].includes(':')) {\n      count++\n    }\n  }\n  if (count &gt; 0) {\n    return 'set'\n  } else {\n    return 'get'\n  }\n}\n\nfunction structureXapi(arr) {\n  var type = arr.split(' ')[0]                          //First item in the string is the type\n  var data = arr.split(' ')                             //Then we gather all values for later processing. We split based on the [space]s in the string\n  var subType = determineType(data)                     //Checks to see if any values contains a : colon, which indicates a set vs a get\n  data.shift()                                          //Remove the type from the data before we filter through it\n  var dots = []\n  var params = {}\n  var paramStartFlag = false                            // False until first parameter pours in\n  var paramValueFlag = false                            // False until next parameter shows\n  for (let i = 0; i &lt; data.length; i++) {\n    if (!paramValueFlag) {\n      if (data[i].includes(':')) {                      // ':' all parameters proceed with a colon, use this to determine which is a parameter and which is a value\n        paramStartFlag = true;                          // Stays true until done\n        paramValueFlag = true;                          // Switch to true to handle value capture logic\n        params[data[i].slice(0, -1)] = data[i + 1]      // the value is one position ahead of the parameter\n      } else if (paramStartFlag) {\n        if ((data[i].includes(':'))) {                  //If we see the next parameter via a colon, we set the value flag back to false\n          paramValueFlag = false\n        } else {                                        // Else we concatenate the next value, adding back in the space we split out above\n          const paramList = Object.getOwnPropertyNames(params)\n          const lastParam = paramList[paramList.length - 1]\n          params[lastParam] = params[lastParam] + ' ' + data[i]\n        }\n      }\n      else {\n        dots.push(data[i])                              // Both flags are false, so we're still gathering the xApi path from the data array\n      }\n    } else {\n      paramValueFlag = false\n    }\n  }\n  const result = { Type: type, SubType: subType, xApi: dots, Parameters: params }\n\n  return result\n}\n\nconsole.log('XML String:', convertToXML( shellPath))\n</code></pre>"},{"location":"CodectoCodec/","title":"Lab&colon; Implement Codec to Codec Communication","text":"Under Construction"},{"location":"WorkSpaceIntegrations/","title":"Lab&colon; WorkSpace Integrations","text":"<p>Abstract</p> <ul> <li> <p>The Workspace Integrations Lab has not yet been integrated into this UI</p> </li> <li> <p>Download the Files below and follow guide</p> </li> </ul> <p>NOTE: Links Below not assigned to resources</p> <p>   Download Guide  </p> <p>   Download Postman Collection  </p>"},{"location":"challengeAnswers/","title":"Challenge Answers","text":"Challenge: Open a Text Input Prompt! [Section 2.3.3] TextInput Prompt XML<pre><code>&lt;Command&gt;\n  &lt;UserInterface&gt;\n    &lt;Message&gt;\n      &lt;TextInput&gt;\n        &lt;Display&gt;\n          &lt;Title&gt;My Title Value&lt;/Title&gt;\n          &lt;Text&gt;My Text Value&lt;/Text&gt;\n          &lt;Duration&gt;45&lt;/Duration&gt;\n        &lt;/Display&gt;\n      &lt;/TextInput&gt;\n    &lt;/Message&gt;\n  &lt;/UserInterface&gt;\n&lt;/Command&gt;\n</code></pre> Challenge: Log and Handle Errors [Section 2.6.3] showAndComposeCamera() converted to Async Function<pre><code>import xapi from 'xapi';\n\n/**\n* Lab Guide: https://webexcc-sa.github.io/LAB-1451/wx1_1451_part_2/#263-executing-xcommands\n* \n* Lesson 2: Execute an xCommand with multiple arguments with the same name\n*/\n\nconst showAndComposeCamera = async function () {\n  try {\n    await xapi.Command.Video.Selfview.Set({ Mode: 'On', FullscreenMode: 'On', OnMonitorRole: 'First' });\n\n    await xapi.Command.Video.Input.SetMainVideoSource({\n      ConnectorId: [1, 1],\n      Layout: 'Equal'\n    });\n    console.log('Camera Composed!');\n  } catch (error){\n    console.error('Camera Composition Failed', error);\n  };\n};\n\nshowAndComposeCamera();\n</code></pre> Challenge: Can you spot the Error? [Section 2.6.4] <ul> <li> <p>The setInterval() functions that wrap around setRandomDefaultVolume() in <code>xConfigs_Lesson-4_MacroPak_2-6-4</code> and setRandomAirplayConfigs() in <code>xConfigs_Lesson-5_MacroPak_2-6-4</code> will continue to run after the subscription has stopped</p> </li> <li> <p>This will continuously change those configs, causing for a poor solution if left on</p> </li> <li> <p>To resolve this, it's best to assign your SetInterval to a object, just as we had done for our subscription and run ClearInterval at the same time we unsubscribed from those configs</p> </li> </ul> <p>Note</p> <p>Practically speaking, randomly assigning configs in an automation has little value, this was only done to save you a bit of time so you can see your subscriptions fire</p> <p>          Learn more about Intervals          Learn more about Timeouts </p> Challenge: Alter <code>Execute an xCommand</code> in your Postman Collection Message Body<pre><code>{\n  \"jsonrpc\": \"2.0\",\n  \"id\": \"Execute an xCommand\",\n  \"method\": \"xCommand/Video/Selfview/Set\",\n  \"params\": {\n    \"Mode\": \"Off\"\n  }\n}\n</code></pre>"},{"location":"cheatsheet/","title":"CheatSheet","text":"Part 2: Accessing the Video Device xAPI Subscription Assistant Macro How to UseDownload and Install <p>This macro was built to assist you for lessons where you'll Subscribe/Register Feedback to various xAPI Paths. Do not modify this macro, but feel free to learn from this macro and how it operates. </p> <p>We won't be reviewing this macro in this lab, so if we'd encourage you take a copy home with you, and review outside this course</p> Home ScreenxConfigurationsxStatusesxEventsSection Cleanup <p></p> <p>After installing and enabling the Subscription Assistant Macro, the macro will generate a UI extension on your Codec's Touch Control Surface</p> <p>Clicking on this button, will open various tools for you to use when running through Part 2</p> View UI Operation <p> </p> <p></p> <p>In the xConfigurations Page, you'll have tools for modifying xConfigurations on your device. </p> <p>Use these tools when Subscribing/Registering feedback to xConfigurations throughout the various lessons in Part 2</p> <p></p> <p>In the xStatuses Page, you'll have tools that will issue certain xCommands that will cause certain xStatus events to fire on your device. </p> <p>Use these tools when Subscribing/Registering feedback to xStatus throughout the various lessons in Part 2</p> <p></p> <p>In the xEvents Page, you'll have tools that will cause certain xEvent events to fire on your device. </p> <p>Use these tools when Subscribing/Registering feedback to xEvents throughout the various lessons in Part 2</p> <p></p> <p>Throughout Part 2, we will Subscribe to the same xAPI paths from each Integration Method. This is to familiarize you more with the Syntax of each integration method and how to structure that xApi Path.</p> <p>That Said, we need to clean up the Codec at the end of each Section. When prompted to by the Lab Guide, run the Section Cleanup button. This will prepare the device for the next set of lessons in Part 2</p> DownloadInstall <p> Lab-1451_Subscription-Assistant_Part-2 Macro </p> <p>Gif</p> <ul> <li>Locate the <code>Lab-1451_Subscription-Assistant_Part-2.zip</code> file you downloaded</li> <li>Unzip it's Contents</li> <li>Drag the <code>Lab-1451_Subscription-Assistant_Part-2.js</code> file into the WebUI of your Device</li> <li>Save the Macro</li> <li>Activate the Macro</li> </ul> <p> </p> Terminal Shortcut References Key Description <code>?</code> List all commands under a given node Path <code>??</code> List all commands <code>and value spaces</code> under a given node Path <code>//</code> Path wild, use to search for key words in any given path. You can use multiple wildcards in a xAPI path Tab Auto-completes the command string xAPI Branch Capabilities xAPI Branch Get Value Set Value Run Action Subscribe to Value xCommands \ud83d\udd36<sup>1</sup> \u274c \u2705 \u274c xConfiguration \u2705 \u2705 \u274c \u2705 xStatus \u2705 \u2705 \u274c \u2705 xEvent \u274c \u274c \u274c \u2705 Websocket Message Structure Examples and Responses xCommand/[Path]xGet [xStatus/xConfiguration]xQuery [xStatus/xConfiguration]xSet [xConfiguration]xFeedback [xStatus/xConfiguration/xEvent] <p>xCommand Paths follow the xCommand method in the <code>method</code> object, separated by forward slash ( / )</p> <p>Parameters for the xCommand are defined as individual objects under the <code>params</code> object written in JSON format</p> Request Response Error Response  <pre><code>{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 111,\n  \"method\": \"xCommand/Dial\",\n  \"params\": {\n    \"Number\": \"bobby@example.com\",\n    \"Protocol\": \"Spark\"\n  }\n}\n</code></pre> <pre><code>{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 111,\n  \"result\": {\n  \"CallId\": 2,\n  \"ConferenceId\": 1\n  }\n}\n</code></pre> <pre><code>{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 111,\n  \"error\": {\n    \"code\": 1,\n      \"data\": {\n      \"Cause\": 21\n    },\n    \"message\": \"Not paired with isdn link\"\n  }\n}\n</code></pre> <p><code>xStatus</code> and <code>xConfiguration</code> branches can make use of the xGet method. Unlike Commands, the xAPI path is provided in the params object under a Path object and is structured as an Array</p> Request Response  <pre><code>{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 102,\n  \"method\": \"xGet\",\n  \"params\": {\n    \"Path\": [\"Configuration\", \"SystemUnit\", \"Name\"]\n  }\n}   \n</code></pre> <pre><code>{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 102,\n  \"result\": \"my-device\"\n}\n</code></pre> <p><code>xStatus</code> and <code>xConfiguration</code> branches can make use of the xQuery method. xQuery is formatted and functions largely like the xGet method</p> <p>Note the difference between <code>xQuery</code> and <code>xGet</code></p> <ul> <li>The response to xQuery always starts from the top node, i.e. \"Status\" or \"Configuration\".</li> <li>The response to xGet starts relative to the path given in the \"Query\".</li> <li>xQuery can also implement Wildcards (<code>**</code>) in it's path, which matches zero or more levels in the path.</li> </ul> Request Response  <pre><code>{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 105,\n  \"method\": \"xQuery\",\n  \"params\": {\n    \"Query\": [\"Status\", \"**\", \"DisplayName\"] \n  }\n}\n</code></pre> <pre><code>{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 105,\n  \"result\": {\n    \"Status\": {\n      \"SIP\": {\n        \"CallForward\": {\n          \"DisplayName\": \"Room Bar Pro\"\n        }\n      },\n      \"SystemUnit\": {\n        \"Software\": {\n          \"DisplayName\": \"RoomOS 11.20...\"\n        }\n      }\n    }\n  }\n}\n</code></pre> Request Response  <pre><code>{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 110,\n  \"method\": \"xSet\",\n  \"params\": {\n    \"Path\": [\"Configuration\",\"SystemUnit\",\"Name\"],\n    \"Value\": \"My New System Name\"\n  }\n}\n</code></pre> <pre><code>{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 110,\n  \"result\": true\n}\n</code></pre> <p>xFeedback, or Subscriptions, have 2 Id objects within the life of it's process. When sending any message, you will assign an <code>id</code> and get an initial response containing that same <code>id</code>. But when you subscribe, it will contain an additional Id in it's results object which corresponds to this specific subscription. All notifications after the initial response from this subscription will contain the Subscription Id not the initial message <code>id</code>. This is important, as you may have multiple or similar subscriptions you may want to instantiate and handle separately as you develop your solution.</p> Subscribe Request Initial Response Notification Response Unsubscribe Request  <pre><code>{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 113, // &lt;-- This is the Message id\n  \"method\": \"xFeedback/Subscribe\",\n  \"params\": {\n    \"Query\": [\"Status\", \"Video\", \"Selfview\"],\n    \"NotifyCurrentValue\": true // &lt;-- When true, will respond with additional notifications\n  }\n}\n</code></pre> <pre><code>{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 113,\n  \"result\": {\n    \"Id\": 1 // &lt;-- This is the Subscription Id of the new feedback registration. Use this Subscription Id to map incoming notifications to the initial subscription request, or to unsubscribe from this data\n  }\n}\n</code></pre> <pre><code>{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"xFeedback/Event\",\n  \"params\": {\n    \"Id\": 1, // &lt;-- This is the Subscription Id of the feedback registration.\n    \"Status\": {\n      \"Video\": {\n        \"Selfview\": {\n          \"FullscreenMode\": \"Off\",\n          \"Mode\": \"Off\",\n          \"OnMonitorRole\": \"First\",\n          \"PIPPosition\": \"CenterRight\"\n        }\n      }\n    }\n  }\n}\n</code></pre> <pre><code>{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 113, // &lt;-- This is the Message id\n  \"method\": \"xFeedback/Subscribe\",\n  \"params\": {\n    \"Id\": 1, // &lt;-- This is the Subscription Id of the initial feedback registration.\n  }\n}\n</code></pre> Subscription Visual Flow <pre><code>sequenceDiagram\n    participant My Customization\n    participant Target Codec\n    My Customization&lt;&lt;--&gt;&gt;Target Codec: Websocket Connection\n    Note over My Customization,Target Codec: Register Subscription\n    My Customization-&gt;&gt;+Target Codec: xFeedback/Subscribe [Message `id`#58; 101]\n    Target Codec -&gt;&gt; My Customization: Acknowledges Message `id`#58; 101&lt;br&gt;[Provides Subscription `Id`#58; 1]\n    Note over My Customization,Target Codec: Incoming Events\n    Target Codec --&gt;&gt;+ My Customization: &lt;br&gt; Event Payload. Contains [Subscription `Id`#58; 1]\n    Target Codec --&gt;&gt; My Customization: &lt;br&gt; Event Payload. [Subscription `Id`#58; 1]\n    Target Codec --&gt;&gt;- My Customization: &lt;br&gt; ........... [Subscription `Id`#58; 1]\n    Note over My Customization,Target Codec: Deregister Subscription\n    My Customization-&gt;&gt;-Target Codec: xFeedback/Unsubscribe &lt;br&gt;Provide Subscription [`Id`#58; 1] NOT Message [`id`#58; 101] as param&lt;br&gt;[Subscription `Id`#58; 1]</code></pre> Part 3:  Building a Device Customization using Macros ... <p>...</p>"},{"location":"communities/","title":"Communities","text":"Link Description xAPI Devs and Integrations Community of of over 1500 cisco engineers, partners and customers in a live chat space on the Webex App focused on developing with Cisco Devices and their xAPI AV Integrators Discussion with Cisco Community of of over 1000 cisco engineers, partners and customers in a live chat space on the Webex App focused on Audio Visual integration topics Partner-Customer CE-Deploy feedback &amp; Support Feedback and Support live chat space on the Webex App filled with users all leveraging the CE-Deploy App by Christopher Norman Webex Beta Program Join the Webex Beta Program. Gain access to device Beta Channel Software, participate in feedback groups and touch New xAPIs as they come into the scene Webex Community Hub The Community is a hub for connecting with your peers and Cisco specialists to ask for help, share your expertise, build your network, and grow professionally."},{"location":"conclusion/","title":"Related Sessions at Cisco Live","text":"<ul> <li>BRKXXX-1111 My friend's breakout session</li> </ul>"},{"location":"devSites/","title":"Developer Sites","text":"Link Description API Reference Guide Official CE xAPI reference documentation (PDF). RoomOS Developer Site Cisco Video Devices Developer Resource Site. API References, Guides and Examples CE Deploy Tool to mass deploy customisations to Webex Room devices. Webex for developers Reference documentation for Webex APIs and Video Device Cloud xAPI Intro to the xAPI Intro to macros Intro to UI Extensions Intro to branding Interactive tutorials at the DevNet Learning Labs. Postman Collection Invoke the xAPI from the REST client and explore popular use cases from the Integrator and Administrator collections. Webex Workspaces Overview of the Webex Room devices. Configuration guides Official Cisco guides to customize the Room devices. JSXAPI JavaScript SDK for server (Node.js) and web browsers. Service to Device Socket Workspace Integrations JavaScript SDK for server (Node.js) and web browsers. Service to Webex Control Hub Socket DevNet Sandboxes Book and try a real-life video device from remote without actually owning one. UI Extensions Room Simulator Test and demo UI Extensions with a visual room simulator. Macro examples Git repository with relevant macro examples. Web app examples Git repository with relevant, hosted web app examples. Momentum design Cisco / Webex design guidelines and assets, if you want to create a style that is aligned with the native Webex experience."},{"location":"lab1_getting_started/","title":"Lab 1 - Getting Started","text":""},{"location":"lab1_getting_started/#section-1","title":"Section 1","text":"<p>Please use the following credentials to connect to device:</p> <code>IP Address</code> 1.1.1.1 <code>Username</code> admin <code>Password</code> C1sco123 <p>My content</p> <p>Note</p> <p>This is a note</p> <p>Cisco IOS code block:</p> <pre><code>hostname ABC\ninterface GigabitEthernet1\n ip address 122.1.1.1\n</code></pre> <p>Image:</p> <p></p>"},{"location":"lab1_getting_started/#section-2","title":"Section 2","text":"<p>More content</p>"},{"location":"overview/","title":"Overview","text":"<p>Welcome to the Video Device xAPI Lab</p> <p>In this lab, we'll cover Cisco's Video Device xAPI, how to access this xAPI on real hardware and use this xAPI to build a new solution for you to tailor the device to fit a target use case.</p> <p>We'll take this a step further and show you how to deploy this new solution using our Webex Control Hub cloud management service</p> <p>Important</p> <p>This Lab is under development, understand some pieces may be incomplete, If you run into any issues through the lab, please make use of the official xAPI guides linked in the Resources Tab</p>"},{"location":"overview/#learning-objectives","title":"Learning Objectives","text":"<p>Upon successful completion of this lab, you will be able to: 1.  Use Cisco Video Device xAPI via Serial, SSH, HTTP, WebSockets*, Cloud xAPIs and Macros 2.  Design a custom User Interface using the UI extensions Editor  3.  Build a custom solution leveraging device xAPIs, 3rd party APIs and the Macro Editor 4.  Deploy Macro based solutions via the Cloud and Locally 5.  Deploy Macro based solutions in bulk using Cisco Video Device xAPIs</p>"},{"location":"overview/#lab-requirements","title":"Lab Requirements","text":"<p>...</p>"},{"location":"overview/#disclaimer","title":"Disclaimer","text":"<p>Although the lab design and configuration examples could be used as a reference, for design related questions please contact your representative at Cisco, or a Cisco partner.</p>"},{"location":"overview/#getting-started","title":"Getting Started","text":"<p>Proceed to the first Lab Accessing Device xAPI to begin</p>"},{"location":"slido-QA-iFrame/","title":"slido QA iFrame","text":"Question Best Practices <p>Please provide either your Name or Pod Number</p> <p>This helps the proctors determine if they should engage you directly based on your question</p> <p></p>"},{"location":"tools/","title":"Tools&nbsp<i class=\"fa-solid fa-gear\"></i>","text":"Code Difference Checker <p><p>Use this tool to compare your syntax against the answers to help find stray characters, artifacts or to compare your successful implementation against the lab guides to understand the differences</p>          Ignore Whitespace      Check Differences Differences: </p> Base64 Conversion Tool <p><p>Convert any string into a base64 encoded string</p> <p>If setting up Basic Auth for an endpoint, be sure to use a colon : to separate the Username and Password</p> <p>Example: username:password <p> Click to Convert      Copy your converted Base64 String      </p> Flatten Multiline String Tool <p><p>Some command fields can't accept a multi-line string. Use this tool to remove line breaks in your string.</p> Flatten Text      Copy your flattened text      </p> Stringify XML Body <p><p>Use this tool to \"Stringify\" your XML string. Some data fields may be formatted in XML itself, so if your string is written in XML, then you may confuse that xAPI call if you don't handle the syntax appropriately.</p> Stringify XML      Copy your stringified XML      </p>"},{"location":"wx1_1451_part_1/","title":"Part 1: Lab Setup","text":"<p>Please Follow Each Step</p> 1.1 Factory Reset(Optional)1.2 Setup Device Defaults and Admin Account1.3 Register to Webex1.4 Install CE-Deploy <p> </p> <p> </p> <p> </p> <p> </p> <p> </p> <p> </p> <p> </p> <p>CE-Deploy Install</p> <p>Before we begin our lab you will need to download  and install CE-Deploy using the links below:</p> <p>Windows -&gt; Windows Installer</p> <p>Mac -&gt;  Mac Installer</p> Explore CE-Deploy <p> </p>"},{"location":"wx1_1451_part_2/","title":"Lab&colon; Accessing Device xAPI","text":"<p>Abstract</p> <p>Accessing Device xAPI will run through many examples on how you can interface with your Codec's xAPI through the following integration methods</p> Integration Method Port Common Field Uses SSH 22 AV Room Controllers [Room Automation] HTTP 80/443 AV Room Controllers [Room Automation], Telepresence Management Suite (TMS[EoL]), 3rd Party Management Systems and/or Analytics WebHooks 80/443 Telepresence Management Suite (TMS[EoL]), 3rd Party Management Systems and/or Analytics WebSockets 80/443 AV Room Controllers [Room Automation], Web Applications, Webex Control Hub, 3rd Party Management Systems and/or AnalyticsWeb Applications, Cloud xAPI 80/443 Web Applications,  Webex Control Hub, 3rd Party Management Systems and/or Analytics Macros Local Room Automation <p>Some topics that aren't covered in this lab are the following Integration Methods</p> Integration Method Common Field Uses Closest Integration Method and Differences Serial Rs232 AV Room Controllers [Room Automation], Non-Networked AV solutions SSH - Serial Rs232 interacts with the terminal in the same way as SSH, but requires additional configurations on the Codec and String Terminators to complete the instruction set jsxapi [Javascript Module] AV Room Controllers [Room Automation], Web Applications, 3rd Party Management Systems and/or AnalyticsWeb Applications Macros - Macros are a derivative of the jsxapi. Syntax is largely the same, except the added steps to establish an SSH or WebScoket Connection. Following the SSH, WebSocket and Macro Lessons will teach you format and communication that the jsxapi relies on Workspace Integrations Web Applications,  Webex Control Hub, 3rd Party Management Systems and/or Analytics Cloud xAPI - WorkSpace integrations functions as the Subscription mechanism for Cloud xAPI. There isn't a close example in this lab, but it a worthwhile topic on it's own to explore for solutions that scale in a cloud environment <p>Note</p> <p>Each Section has a <code>Cleanup</code> Process. These are important when moving from each integration method</p> <p>It requires you to have an active SSH session against the endpoint, so once you're done with section 2.2, keep that terminal session alive</p> <p>Every integration method serves a purpose, whether your a customer optimizing their workflow, an integrator wanting a deeper understanding on how all these pieces connect or a partner wanting to building new opportunity for your business with Cisco Video Devices</p>"},{"location":"wx1_1451_part_2/#section-21-docs-and-setup-subscription-assistant-macro","title":"Section 2.1: Docs and Setup Subscription Assistant Macro","text":""},{"location":"wx1_1451_part_2/#section-211-xapi-documentation","title":"Section 2.1.1: xAPI Documentation","text":"<p>Below contain links to various xAPI Guides. Click to expand each section.</p> Official xAPI Guides <p>xAPI Documentation can be found in several locations.</p> <p>The Official API Reference Guide can be found  here</p> <ul> <li>The Official API Doc release with every new On Premise release of RoomOS</li> <li>This guide contains the most accurate information our API as well as a detailed information of our integration protocols</li> </ul> <p> </p> RoomOS Site xAPI Guides (Preferred) <p>The  RoomOS Site contains the same information as the official PDF Doc, but contains the most recent Cloud API Releases</p> <ul> <li>This site comes outfitted with a search engine and examples on how to execute the API</li> <li>It will include all cloud versions of the API and will update automatically on a new cloud release</li> <li>Though not the Official Guide, it's the preferred starting point for Development for it's additional content, code examples, tools and simplicity</li> <li>The RoomOS site is the resource we'll use for the remainder of this lab</li> </ul> <p> </p> Webex for Developer Site <p>The  Webex for Developers portal provides context on how to execute xAPI calls via the cloud</p> <ul> <li>This site does not contain a list of xAPI references, but does contain information on how to execute cloud xAPIs against your Cloud or Webex Edge registered endpoints as well as information about the scopes required for use</li> <li>This developer site will allow you to test cloud API directly from the site to help enable development with Devices and the rest of the Webex Portfolio</li> </ul> <p> </p> <p>     Find additional Resources  Here!  </p>"},{"location":"wx1_1451_part_2/#section-211-setup-subscription-assistant-macro","title":"Section 2.1.1: Setup Subscription Assistant Macro","text":"<p>This macro was built to assist you for lessons where you'll Subscribe/Register Feedback to various xAPI Paths. Do not modify this macro, but feel free to learn from this macro and how it operates. </p> <p>We won't be reviewing this macro in this lab, so if we'd encourage you take a copy home with you, and review outside this course</p> Subscription Assistant Macro How to UseDownload and Install Home ScreenxConfigurationsxStatusesxEventsSection Cleanup <p></p> <p>After installing and enabling the Subscription Assistant Macro, the macro will generate a UI extension on your Codec's Touch Control Surface</p> <p>Clicking on this button, will open various tools for you to use when running through this lab</p> View UI Operation <p> </p> <p></p> <p>In the xConfigurations Page, you'll have tools for modifying xConfigurations on your device. </p> <p>Use these tools when Subscribing/Registering feedback to xConfigurations throughout the various lessons in this lab</p> <p></p> <p>In the xStatuses Page, you'll have tools that will issue certain xCommands that will cause certain xStatus events to fire on your device. </p> <p>Use these tools when Subscribing/Registering feedback to xStatus throughout the various lessons in this lab</p> <p></p> <p>In the xEvents Page, you'll have tools that will cause certain xEvent events to fire on your device. </p> <p>Use these tools when Subscribing/Registering feedback to xEvents throughout the various lessons in this lab</p> <p></p> <p>Throughout this lab, we will Subscribe to the same xAPI paths from each Integration Method. This is to familiarize you more with the Syntax of each integration method and how to structure that xApi Path.</p> <p>That Said, we need to clean up the Codec at the end of each Section. When prompted to by the Lab Guide, run the Section Cleanup button. This will prepare the device for the next set of lessons in this lab</p> DownloadInstall <p> Lab-1451_Subscription-Assistant_Part-2 Macro </p> <p>Gif</p> <ul> <li>Locate the <code>Lab-1451_Subscription-Assistant_Part-2.zip</code> file you downloaded</li> <li>Unzip it's Contents</li> <li>Drag the <code>Lab-1451_Subscription-Assistant_Part-2.js</code> file into the WebUI of your Device</li> <li>Save the Macro</li> <li>Activate the Macro</li> </ul> <p> </p> <p>     Access this table in the CheatSheet  Page!  </p>"},{"location":"wx1_1451_part_2/#section-22-accessing-the-xapi-via-ssh","title":"Section 2.2 Accessing the xAPI via SSH","text":"<p>Section 2.2 Abstract</p> <p>In this section, we'll dive into the various pieces of the xAPI stack and how to make use of them in various ways over an SSH Session to the codec.</p> <p>Topics covered for SSH are nearly a 1:1 match for use cases driven via a Serial Connection, whereas Serial requires additional hardware, it will not be covered in depth in this Lab.</p> <p>Understanding how to navigate a terminal session with the codec will be instrumental in your customization journey, but it's also a key integration pillar to many products, such as a room control processors, to interface with a Cisco Codec.</p>"},{"location":"wx1_1451_part_2/#221-establish-ssh-connection-to-device","title":"2.2.1 - Establish SSH Connection to Device","text":"<ul> <li>Open the Terminal application on your device</li> <li>Connect to the Device via SSH using the built in OpenSSH platform in your terminal window</li> </ul> <p>Note</p> <p>Replace <code>[USERNAME]</code> with your Codec's Username and <code>[IP_ADDRESS]</code> with your Codec's IPv4 address that you set in section[X.X.X]</p> Type into terminal and press Enter<pre><code>ssh [USERNAME]@[IP_ADDRESS]\n</code></pre> If you encountered an warning running the command above, click here <p>If you encounter the following warning</p> <pre><code>ssh [USERNAME]@[IP_ADDRESS]   \n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n@    WARNING: REMOTE HOST IDENTIFICATION HAS CHANGED!     @\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\nIT IS POSSIBLE THAT SOMEONE IS DOING SOMETHING NASTY!\nSomeone could be eavesdropping on you right now (man-in-the-middle attack)!\nIt is also possible that a host key has just been changed.\nThe fingerprint for the RSA key sent by the remote host is\nSHA256:############################################\nPlease contact your system administrator.\nAdd correct host key in [PATH]/.ssh/known_hosts to get rid of this message.\nOffending RSA key in [PATH]/.ssh/known_hosts:##\nHost key for [IP_ADDRESS] has changed and you have requested strict checking.\nHost key verification failed.\n</code></pre> <p>Double Check your device information and try again, if the information you entered is correct, try the following</p> <p>Then run the following command to clear an old SSH Sha Key Be sure to replace <code>[IP_ADDRESS]</code> with your Codec's IPv4</p> Type into terminal and press Enter<pre><code>ssh-keygen -R [IP_Address]\n</code></pre> <p>If you have a different warning or error and you're unable to resolve it, please ask one of the proctors for assistance</p> <p></p> <ul> <li>The OpenSSH platform will ask for you to confirm the device before connecting<ul> <li>Type <code>yes</code> when prompted into the terminal, then hit enter</li> <li>Type the <code>[USERNAME]</code> account password into the terminal when prompted, then hit enter</li> </ul> </li> </ul> <p>Successfully connecting to the Codec should prompt the following information and is now awaiting your input</p> <pre><code>Welcome to  \nCisco Codec Release RoomOS [Codec_Software_Version]\nSW Release Date: [Codec_Software_ReleaseDate]\n*r Login successful\nOK\n</code></pre>"},{"location":"wx1_1451_part_2/#222-navigating-the-terminal","title":"2.2.2 - Navigating the Terminal","text":"<p>Abstract</p> <p>In a terminal session with a Cisco Codec, you can execute commands, get, set or subscribe to configs, get or subscribe to status information as well as subscribe to events.</p> <p>These are especially useful when developing a customization or troubleshooting a system.</p> <p>Click to expand each xCommand each below, execute them in your terminal session and observe the responses in the terminal window.</p> Lesson: Lists All User Command Nodes Type into terminal and press Enter<pre><code>?\n</code></pre> Click to Compare your Terminal Output <pre><code>      - User Commands -\n\nhelp            xcommand        xconfiguration  xdocument       xevent          \nxfeedback       xgetxml         xpreferences    xstatus         xtransaction    \nbye             echo            log             systemtools     \nOK\n</code></pre> <p>We won't cover every command above, we'll only focus on xConfiguration, xCommand, xStatus and xEvent as those contain all the xAPI reference we need to focus on. But we'll also take a brief stop at xPref as it's important for SSH and Serial based integrations.</p> <p>For more information on the rest of those paths, check out the Offical xAPI Guide.Page 33 defines all nodes</p> Lesson: Lists Terminal Preference Options <ul> <li>Lists Terminal Preference Options</li> <li>The xPreferences command is used to set preferences for the RS-232 and SSH sessions. </li> </ul> Type into terminal and press Enter<pre><code>xpref ?\n</code></pre> Click to Compare your Terminal Output <pre><code>xpreferences usage:\n  xpreferences outputmode &lt;terminal/xml/json&gt;\nOK\n</code></pre> <p>Setting <code>xpreferences outputmode</code> to JSON will change the terminal response output into a JSON format and likewise with XML</p> <p>Why might you consider JSON or XML? </p> <ul> <li>Your customization environment may be able to handle responses from the xAPI more efficiently if it's in an output format that easier for your environment to ingest</li> <li>For testing, we'd recommend the terminal format, but when interfacing via a Room Control Processor or another service, you may have tools available to you to parse either JSON or XML to optimize you solution</li> </ul> Compare Output Mode Responses TerminalXMLJSON <pre><code>xpref outputmode terminal\n\nOK\nxStatus Audio Volume            \n*s Audio Volume: 50\n** end\n\nOK\n</code></pre> <pre><code>xpref outputmode xml \nxStatus Audio Volume\n&lt;XmlDoc resultId=\"\"&gt;\n&lt;Status&gt;\n  &lt;Audio&gt;\n    &lt;Volume&gt;50&lt;/Volume&gt;\n  &lt;/Audio&gt;\n&lt;/Status&gt;\n&lt;/XmlDoc&gt;\n</code></pre> <pre><code>xpref outputmode json    \nxStatus Audio Volume\n{\n  \"Status\": {\n    \"Audio\": {\n      \"Volume\": {\n        \"Value\": \"50\"\n      }\n    }\n  }\n}\n</code></pre> Lesson: List Device Command Node References Type into terminal and press Enter<pre><code>xCommand ?\n</code></pre> Click to Compare your Terminal Output <pre><code>- User Commands -\n\nAirPlay          HttpClient       Provisioning     UserInterface    \nAudio            HttpFeedback     Proximity        UserManagement   \nBookings         Logging          RemoteAccess     UserPresence     \nCall             Macros           RoomCleanup      Video            \nCallHistory      Message          RoomPreset       WebEngine        \nCamera           MicrosoftTeams   Security         Webex            \nCameras          Network          SerialPort       WebRTC           \nConference       Peripherals      Standby          Whiteboard       \nDiagnostics      Phonebook        SystemUnit       Zoom             \nDial             Presentation     Time             \n\nOK\n</code></pre> Lesson: List Device Status Node References Type into terminal and press Enter<pre><code>xStatus ?\n</code></pre> Click to Compare your Terminal Output <pre><code>- Status -\n\nAudio             ICE               Proximity         Time              \nBookings          Logging           RemoteAccess      UserInterface     \nCall              MediaChannels     RoomAnalytics     Video             \nCameras           MicrosoftTeams    RoomPreset        WebEngine         \nCapabilities      Network           SIP               Webex             \nConference        NetworkServices   Standby           WebRTC            \nDiagnostics       Peripherals       SystemUnit        \nHttpFeedback      Provisioning      ThousandEyes      \n\nOK\n</code></pre> Lesson: List Device Config Node References Type into terminal and press Enter<pre><code>xConfiguration ?\n</code></pre> Info <pre><code>- User Configurations -\n\nApps              Logging           RoomAnalytics     ThousandEyes      \nAudio             Macros            RoomCleanup       Time              \nBookings          MicrosoftTeams    RoomScheduler     UserInterface     \nCallHistory       Network           RTP               UserManagement    \nCameras           NetworkServices   Security          Video             \nConference        Peripherals       Sensors           VoiceControl      \nFacilityService   Phonebook         SerialPort        WebEngine         \nFiles             Provisioning      SIP               Webex             \nHttpClient        Proximity         Standby           WebRTC            \nHttpFeedback      RemoteAccess      SystemUnit        Zoom              \n\nOK\n</code></pre> Lesson: List Device Event Node References Type into terminal and press Enter<pre><code>xEvent ?\n</code></pre> Click to Compare your Terminal Output <pre><code>xEvent ?\n** end\n\nOK\n</code></pre>  The output of <code>xEvent ?</code> was not what you expected? <p>Try Removing the <code>?</code> from <code>xEvent</code> and re-run the command</p> Type into terminal and press Enter<pre><code>xEvent\n</code></pre> <p>??? info \"Click to Compare your Terminal Output\"       <pre><code>xEvent  \n*es Event Audio Input Connectors Ethernet SubId LoudspeakerActivity\n*es Event Audio Input Connectors Ethernet SubId NoiseLevel\n*es Event Audio Input Connectors Ethernet SubId PPMeter\n*es Event Audio Input Connectors Ethernet SubId VuMeter\n*es Event Audio Input Connectors HDMI Left PPMeter\n*es Event Audio Input Connectors HDMI Left VuMeter\n*es Event Audio Input Connectors HDMI Right PPMeter\n*es Event Audio Input Connectors HDMI Right VuMeter\n*es Event Audio Input Connectors Line PPMeter\n*es Event Audio Input Connectors Line VuMeter\n[... And the list goes on]\nOK\n</code></pre></p> Lesson: Search for an xAPI using a Wildcard <code>//</code> Type into terminal and press Enter<pre><code>xConfig // Name ?\n</code></pre> Click to Compare your Terminal Output <pre><code>xConfig // Name ?\n*? xConfiguration FacilityService Service[1] Name: &lt;S: 0, 1024&gt;\n*? xConfiguration FacilityService Service[2] Name: &lt;S: 0, 1024&gt;\n*? xConfiguration FacilityService Service[3] Name: &lt;S: 0, 1024&gt;\n*? xConfiguration FacilityService Service[4] Name: &lt;S: 0, 1024&gt;\n*? xConfiguration FacilityService Service[5] Name: &lt;S: 0, 1024&gt;\n*? xConfiguration Network[1] DNS Domain Name: &lt;S: 0, 64&gt;\n*? xConfiguration SystemUnit Name: &lt;S: 0, 50&gt;\n*? xConfiguration UserInterface NameAndSiteLabels Mode: &lt;Auto, Hidden&gt;\n*? xConfiguration UserInterface Theme Name: &lt;Auto, Light, Night&gt;\n*? xConfiguration Video Input Connector[1] Name: &lt;S: 0, 50&gt;\n*? xConfiguration Video Input Connector[2] Name: &lt;S: 0, 50&gt;\n*? xConfiguration Video Input Connector[3] Name: &lt;S: 0, 50&gt;\n*? xConfiguration Video Input Connector[4] Name: &lt;S: 0, 50&gt;\n\nOK\n</code></pre>"},{"location":"wx1_1451_part_2/#223-executing-commands","title":"2.2.3 - Executing Commands","text":"<p>xCommands</p> <p>Commands instruct the device to execute actions, such as to dial a number or to search the phone book. All commands start with the prefix xCommand followed by a command path</p> <p>Click to expand each xCommand example below, execute them in your terminal session and observe the responses in the terminal window as well as observe what happens to the Codec after each execution</p> Lesson: Execute an xCommand <ul> <li> <p>xAPI: xCommand Video Selfview Set</p> </li> <li> <p>Task:</p> Type into terminal and press Enter<pre><code>xCommand Video Selfview Set Mode: On FullscreenMode: On OnMonitorRole: First\n</code></pre> <ul> <li> <p>Observe the change to your Codec's Display, you should see your camera feed in Full Screen</p> <ul> <li>If Not, make sure your device's camera cover is not closed</li> </ul> </li> </ul> Type into terminal and press Enter<pre><code>xCommand Video Selfview Set Mode: On FullscreenMode: Off\n</code></pre> <ul> <li>Observe the change to your Codec's Display, you should see your camera feed in a PIP Window</li> </ul> </li> </ul> Additional Info <p>Notice when we set the Mode parameter On we included the FullScreenMode and OnMonitorRole parameters, but when we decided to turn Off selfview, we left out those parameters. know that not all parameters in any given command are required, but some are needed.</p> <p>As you explore the API, feel free to click on the RoomOS.Cisco.Com link in each example to Learn more about the xAPI you're working with.</p> <p>   Learn more about xCommand Video Selfview Set </p> Lesson: Execute an xCommand with multiple arguments with the same name <ul> <li> <p>xAPI(s):</p> <ul> <li>xCommand Video Selfview Set</li> <li>xCommand Video Input SetMainVideoSource</li> </ul> </li> <li> <p>Task:</p> Type into terminal and press Enter<pre><code>xCommand Video Selfview Set Mode: On FullscreenMode: On\n</code></pre> Type into terminal and press Enter<pre><code>xCommand Video Input SetMainVideoSource ConnectorId: 1 ConnectorId: 1\n</code></pre> <ul> <li>Observe the change to your Codec's Display, you should see 2 instances of your camera feed spread equally in FullScreen</li> </ul> Additional Info <p>xCommand Video Input SetMainVideoSource, an other xAPIs like it offer some parameters that allow you to enter multiple times. Notice how we used ConnectorId: 1 twice. This will create a 2x1 composition of your first video input connector and set this as your Main Source. This will effect selfview and what you output on the far end of the call.</p> <p>Though it's NOT practical to send a duplicated camera source as we are now, this xAPI and how it's executed serves as an example of what's possible to do with larger Cisco Codecs that host multiple cameras connected to it.</p> View Successful OSD Output <p> </p> Type into terminal and press Enter<pre><code>xCommand Video Input SetMainVideoSource ConnectorId: 1 ConnectorId: 1 Layout: PIP\n</code></pre> <ul> <li>Observe the change to your Codec's Display, you should see 2 instances of your camera feed, 1 FullScreen and another in a PiP window</li> </ul> View Successful OSD Output <p>Successful execution of this command, with PIP set at the Layout, will look similar to image below</p> <p> </p> Additional Info <p>xCommand Video Input SetMainVideoSource has more than one parameter we can use to alter the composition in our main source. By default, the Layout parameter is set to a value of Equal, but we could opt for PIP or Prominent as Layout values as well.</p> <ul> <li>Lets wrap up by setting your MainSource back to a single connector and disable Selfview</li> </ul> Type into terminal and press Enter<pre><code>xCommand Video Input SetMainVideoSource ConnectorId: 1\n</code></pre> Type into terminal and press Enter<pre><code>xCommand Video Selfview Set Mode: Off\n</code></pre> <ul> <li>Observe the change to your Codec's Display, your selfview should be gone now</li> </ul> </li> </ul> <p>       Learn more about xCommand Video Input SetMainVideoSource </p> Lesson: Execute an xCommand with a multiline argument <p>Info</p> <p>Some commands require a larger body of data. This data is a large string; some written in an XML format, some in JSON, and others as base64 encoded content.</p> <p>When working in a terminal window, these multiline commands are structure as such <pre><code>[Command Path]\n[Multi Line Content]\n.\n</code></pre></p> <p>Note, all must end with a . on the third line.</p> <ul> <li> <p>xAPI: xCommand UserInterface Extensions Panel Save</p> </li> <li> <p>Task:</p> Type into terminal and press Enter<pre><code>xCommand UserInterface Extensions Panel Save PanelId: wx1_lab_multilineCommand\n&lt;Extensions&gt;&lt;Panel&gt;&lt;Order&gt;1&lt;/Order&gt;&lt;PanelId&gt;wx1_lab_multilineCommand&lt;/PanelId&gt;&lt;Location&gt;HomeScreen&lt;/Location&gt;&lt;Icon&gt;Info&lt;/Icon&gt;&lt;Color&gt;#1170CF&lt;/Color&gt;&lt;Name&gt;MultiLine Command [Section 2.2.3]&lt;/Name&gt;&lt;ActivityType&gt;Custom&lt;/ActivityType&gt;&lt;/Panel&gt;&lt;/Extensions&gt;\n.\n</code></pre> </li> <li> <p>Observe the change to your Codec's Display, you should see a new Panel Button labeled <code>MultiLine Command [Section 2.2.3]</code> on your Touch Control interface</p> </li> </ul> View Successful OSD output <p> </p> Lesson: Execute an xCommand which generates data and responds <p>Info</p> <p>Some commands will generate data and output a response of that data. All commands will respond with an \"OK\" or \"Error\" but other can provide data.</p> <p>Whereas we just made a UI extension with the API, we can now pull a list of our custom extensions using the API</p> <ul> <li> <p>xAPI: xCommand Extensions List</p> </li> <li> <p>Task:</p> Type into terminal and press Enter<pre><code>xCommand UserInterface Extensions List ActivityType: Custom\n</code></pre> </li> <li> <p>Observe your Terminal Window's output, you should see details of both the <code>MultiLine Command [Section 2.2.3]</code> panel you loaded in previously as well as the <code>Subscription Assistant</code> panel details</p> </li> </ul> Click to Compare your Terminal Output <pre><code>OK\n*r ExtensionsListResult (status=OK): \n*r ExtensionsListResult Extensions Version: \"1.11\"\n*r ExtensionsListResult Extensions Panel 1 Icon: Custom\n*r ExtensionsListResult Extensions Panel 1 Location: HomeScreenAndCallControls\n*r ExtensionsListResult Extensions Panel 1 ActivityType: Custom\n*r ExtensionsListResult Extensions Panel 1 Name: \"Subscription Assistant [Lab 1451]\"\n*r ExtensionsListResult Extensions Panel 1 PanelId: \"wx1_1451_pt2_labBuddy\"\n*r ExtensionsListResult Extensions Panel 1 Origin: local\n*r ExtensionsListResult Extensions Panel 1 Order: 99\n[...]\n*r ExtensionsListResult Extensions Panel 2 Icon: Info\n*r ExtensionsListResult Extensions Panel 2 Location: HomeScreen\n*r ExtensionsListResult Extensions Panel 2 ActivityType: Custom\n*r ExtensionsListResult Extensions Panel 2 Name: \"MultiLine Command [Section 2.2.3]\"\n*r ExtensionsListResult Extensions Panel 2 PanelId: \"wx1_lab_multilineCommand\"\n*r ExtensionsListResult Extensions Panel 2 Origin: local\n*r ExtensionsListResult Extensions Panel 2 Order: 1\n*r ExtensionsListResult Extensions Panel 2 Color: \"#1170CF\"\n*r ExtensionsListResult Extensions Panel 2 Visibility: Auto\n</code></pre>"},{"location":"wx1_1451_part_2/#224-getting-setting-and-subscribing-to-xconfigurations","title":"2.2.4 - Getting, Setting and Subscribing to xConfigurations","text":"<p>xConfigurations</p> <p>Configurations are device settings that are persistent across boots. Like commands, also configurations are structured in a hierarchy</p> <p>Click to expand each xConfiguration example below, execute them in your terminal session and observe the responses in the terminal window</p> Lesson: Getting an xConfiguration Value <ul> <li> <p>xAPI: xConfiguration Audio DefaultVolume</p> </li> <li> <p>Task: </p> Type into terminal and press Enter<pre><code>xConfig Audio DefaultVolume\n</code></pre> <ul> <li>Observe your Terminal Window's output, you should see the value for your Audio DefaultVolume</li> </ul> Click to Compare your Terminal Output <pre><code>*c xConfiguration Audio DefaultVolume: 50\n** end\n\nOK\n</code></pre> </li> </ul> Lesson: Set a new xConfiguration Value <ul> <li> <p>xAPI: xConfiguration Audio DefaultVolume</p> </li> <li> <p>Task: </p> Type into terminal and press Enter<pre><code>xConfig Audio DefaultVolume: 75\n</code></pre> <ul> <li>Observe your terminal output and review the response</li> </ul> Click to Compare your Terminal Output <pre><code>** end\n\nOK\n</code></pre> <ul> <li>Now that we've set the default volume to 75, let's double check our work by getting that value one more time</li> </ul> Type into terminal and press Enter<pre><code>xConfig Audio DefaultVolume\n</code></pre> Click to Compare your Terminal Output <pre><code>*c xConfiguration Audio DefaultVolume: 75\n** end\n\nOK\n</code></pre> </li> </ul> <p>Note</p> <p>The getting and setting of an xConfiguration only differs slightly when accessing via a terminal.</p> <p>Click on the tabs below to see the differences side by side</p> Get xConfigurationSet xConfiguration <p>xConfiguration Audio DefaultVolume</p> <p>xConfiguration Audio DefaultVolume: 75</p> Lesson: Get multiple xConfiguration Values under a Common Node <p>Info</p> <p>In many cases, you may want to pull information in bulk. We can do this easily by moving running an xConfig get request on Higher Common Node in the xAPI path</p> <p>What do we mean by <code>Higher Common Node</code></p> <p>Click on the tabs below, to see how we'll change our requests by accessing a <code>Higher Common Node</code> on each level of an xAPI Path</p> Full xAPI PathNext Higher Common NodeHighest Common NodeView Visual Diagram <p>xConfig Bluetooth Allowed</p> <p>xConfig Bluetooth Allowed</p> <p>xConfig Bluetooth Allowed</p> <p>Note</p> <p>This Diagram only show a very small subset of our xAPI. We have hundreds of xAPI to explore </p> <pre><code>flowchart TD\n  xAPI --&gt; |Highest Common Node| A\n  A[xConfiguration] --&gt;|Next Node| B(Audio)\n  B --&gt; bb(Default Volume)\n  B --&gt; bc(Input)\n  B --&gt; ba(...)\n  bc --&gt; bd(...)\n  A --&gt; |Next Node| C(Network)\n  C --&gt; CC(IPv4)\n  CC --&gt; CCC(Address)\n  CC --&gt; CCD(Gateway)\n  CC --&gt; CCE(...)\n  A --&gt; |Next Node| D(UserInterface)\n  D --&gt; DD(Message)\n  D --&gt; DF(Extensions)\n  D --&gt; DG(...)\n  DD --&gt; DDE(...)\n  DF --&gt; DDF(...)\n  C --&gt; CD(...) \n  A --&gt; |Next Node| E(Video)\n  E --&gt; EE(Input)\n  EE --&gt; EEE(...)\n  E --&gt; EF(Output)\n  EF --&gt; EEF(...)\n  E --&gt; EG(...)\n  A --&gt; |Nodes Continued| F(...)</code></pre> <ul> <li> <p>xAPI: xConfig Audio</p> </li> <li> <p>Task: </p> Type into terminal and press Enter<pre><code>xConfig Audio\n</code></pre> <ul> <li>Observe your terminal output and review the response</li> </ul> </li> </ul> Click to Compare your Terminal Output <pre><code>*c xConfiguration Audio Input Value: 75\n*c xConfiguration Audio Input HDMI 1 Level: -5\n*c xConfiguration Audio Input HDMI 1 Mode: On\n*c xConfiguration Audio Input HDMI 1 VideoAssociation MuteOnInactiveVideo: On\n*c xConfiguration Audio Input Microphone 1 Mode: On\n*c xConfiguration Audio Input MicrophoneMode: Focused\n*c xConfiguration Audio Input USBC 1 Level: -5\n*c xConfiguration Audio Input USBC 1 Mode: On\n*c xConfiguration Audio Input USBC 1 VideoAssociation MuteOnInactiveVideo: On\n*c xConfiguration Audio Input USBMicrophone 1 EchoControl Mode: On\n*c xConfiguration Audio Input USBMicrophone 1 Level: 5\n*c xConfiguration Audio Input USBMicrophone 1 Zone: 1\n*c xConfiguration Audio Microphones Mute Enabled: True\n*c xConfiguration Audio Microphones NoiseRemoval Mode: Enabled\n*c xConfiguration Audio Microphones UsbPassthrough MuteButton: Inactive\n*c xConfiguration Audio Microphones VoiceActivityDetector Mode: Off\n*c xConfiguration Audio Output InternalSpeaker Mode: On\n*c xConfiguration Audio Panning HeadsetAnalog BinauralProcessing: True\n*c xConfiguration Audio Panning HeadsetAnalog Mode: Auto\n*c xConfiguration Audio Panning HeadsetUSB BinauralProcessing: False\n*c xConfiguration Audio Panning HeadsetUSB Mode: Auto\n*c xConfiguration Audio Panning Mode: Auto\n*c xConfiguration Audio SoundsAndAlerts RingTone: \"Sunrise\"\n*c xConfiguration Audio SoundsAndAlerts RingVolume: 0\n*c xConfiguration Audio USB Mode: SpeakerAndMicrophone\n*c xConfiguration Audio USB VolumeControl Capture Mode: Bypass\n*c xConfiguration Audio USB VolumeControl Capture Value: 0\n*c xConfiguration Audio USB VolumeControl Playback Mode: Bypass\n*c xConfiguration Audio USB VolumeControl Playback Value: 0\n*c xConfiguration Audio Ultrasound MaxVolume: 70\n** end\n</code></pre> <p>By simply removing DefaultVolume from xConfiguration Audio DefaultVolume, we get all of the Configurations listed under the Audio Node of the Codec</p> Lesson: Subscribing to an xConfiguration  What do we mean by Subscribe? <p>A subscription, or feedback registration, is a means to monitor changes to any xConfiguration, xStatus or xEvent</p> <p>This allows you see those changes as they occur and, more importantly, react off of those changes and automate a process without needing to constantly poll for that value</p> <ul> <li> <p>xAPI: xConfiguration Audio DefaultVolume</p> </li> <li> <p>Task: </p> Type into terminal and press Enter<pre><code>    xFeedback Register Configuration/Audio/DefaultVolume\n</code></pre> <ul> <li>Press the <code>Subscription Assistant Button</code> on your Touch Interface<ul> <li>Under the xConfigurations Page, move the Slider labeled Audio DefaultVolume to a new position and release</li> <li>Observe your Terminal Windows output, you should see events for your Subscription fill the Terminal Window<ul> <li>Optional: Move the slider a few more times to see more changes come in</li> </ul> </li> </ul> </li> </ul> Click to Compare your Terminal Output <p> </p> View Subscription Assistant Operation <p> </p> </li> </ul> Lesson: Unsubscribing from an xConfiguration <p>Just as we can subscribe to information on the endpoint, we can unsubscribe from that same information</p>  Why bother with Unsubscribing? <p>You can only run up to 50 subscriptions (feedback registrations) on a device</p> <p>Documented on page 40 of the Official xAPI Guide</p> <p>So as your solutions grow, managing your subscriptions are important. </p> <p>Subscribing to a Higher Common Node, doesn't count towards multiple subscriptions and can allow you to get more data, with less active subscriptions</p> <ul> <li> <p>xAPI: xConfiguration Audio DefaultVolume</p> </li> <li> <p>Task: </p> Type into terminal and press Enter<pre><code>xFeedback Deregister Configuration/Audio/DefaultVolume\n</code></pre> <ul> <li>Press the <code>Subscription Assistant Button</code> on your Touch Interface<ul> <li>Under the xConfigurations Page, move the Slider labeled Audio DefaultVolume to a new position and release</li> <li>Observe your Terminal Windows output, those responses you saw in the previous lesson should have stopped outputting in your Terminal Window<ul> <li>Optional: Move the slider a few more times to verify</li> </ul> </li> </ul> </li> </ul> </li> </ul> Lesson: Subscribe to Multiple xConfigurations under a Common Node <p>Info</p> <p>Similarly to Getting multiple xConfiguration Values, we can subscribe to multiple values under a Higher Common Node</p> <p>This can reduce the number of active subscriptions you consume on a device and simplify your solution should you need to react to changes of information across multiple configurations under a Common Node</p> <p>Click on the tabs below, to see how we'll change our requests by accessing a <code>Higher Common Node</code> on each level of an xAPI Path</p> Full xAPI PathNext Higher Common NodeHighest Common Node <p>xFeedback Register Configuration/Bluetooth/Allowed</p> <p>xFeedback Register Configuration/Bluetooth/Allowed</p> <p>xFeedback Register Configuration/Bluetooth/Allowed</p> <ul> <li> <p>xAPI: xConfiguration Audio Input Airplay</p> </li> <li> <p>Task: </p> Type into terminal and press Enter<pre><code>xFeedback Register Configuration/Video/Input/AirPlay\n</code></pre> <ul> <li>Press the <code>Subscription Assistant Button</code> on your Touch Interface<ul> <li>Under the xConfigurations Page, press the toggles and buttons in the Airplay row</li> <li>Observe your Terminal Windows output, you should see events for your Subscription fill the Terminal Window<ul> <li>Optional: Press those buttons and switches a few times to see more changes come in</li> </ul> </li> </ul> </li> </ul> Click to Compare your Terminal Output <p> </p> View Subscription Assistant Operation <p> </p> </li> </ul> Lesson: Unsubscribe to Multiple xConfigurations under a Higher Common Node <ul> <li> <p>xAPI: xConfiguration Audio Input Airplay</p> </li> <li> <p>Task: </p> Type into terminal and press Enter<pre><code>xFeedback Deregister Configuration/Video/Input/AirPlay\n</code></pre> <ul> <li>Press the <code>Subscription Assistant Button</code> on your Touch Interface<ul> <li>Under the xConfigurations Page, press the toggles and buttons in the Airplay row</li> <li>Observe your Terminal Windows output, those responses you saw in the previous lesson should have stopped outputting in your Terminal Window<ul> <li>Optional: Press those buttons and switches a few times to see more changes come in</li> </ul> </li> </ul> </li> </ul> </li> </ul> <p>Tip</p> <p>In cases where you have multiple subscriptions, you can unsubscribe from all by running</p> Type into terminal and press Enter<pre><code>xFeedback DeregisterAll\n</code></pre>"},{"location":"wx1_1451_part_2/#225-setting-and-subscribing-to-status","title":"2.2.5 - Setting and Subscribing to Status","text":"<p>xStatuses</p> <p>Statuses contain information about the current state of the device, such as connected calls, the status of the gatekeeper registration, connected inputs and output sources.</p> <p>Many of the same techniques we reviewed under section 2.2.4 will apply to section 2.2.5</p> <p>Be sure to complete section 2.2.4, as many pieces of additional context were covered there, and won't be repeated moving forward</p> <p>Click to expand each xStatus example below, execute them in your terminal session and observe the responses in the terminal window</p> Lesson: Getting an xStatus Value <ul> <li> <p>xAPI: xStatus Audio Volume</p> </li> <li> <p>Task: </p> Type into terminal and press Enter<pre><code>xStatus Audio Volume\n</code></pre> <ul> <li>Observe your terminal output and review the response</li> </ul> Click to Compare your Terminal Output <pre><code>*s Audio Volume: 65\n** end\n</code></pre> </li> </ul> Lesson: Get multiple xStatus Values under a Common Node <ul> <li> <p>xAPI: xStatus Audio Input</p> </li> <li> <p>Task: </p> Type into terminal and press Enter<pre><code>xStatus Audio Input\n</code></pre> <ul> <li>Observe your terminal output and review the response</li> </ul> </li> </ul> Click to Compare your Terminal Output <pre><code>[PLACEHOLDER - LUIS OUTPUT]\n</code></pre> Lesson: Subscribing to an xStatus <ul> <li> <p>xAPI: xStatus Audio Volume</p> </li> <li> <p>Task:</p> Type into terminal and press Enter<pre><code>xFeedback Register Status/Audio/Volume\n</code></pre> <ul> <li>Press the <code>Subscription Assistant Button</code> on your Touch Interface<ul> <li>Under the xStatuses Page, move the Slider labeled Adjust Volume, to a new position and release<ul> <li>Alternatively, you can adjust the volume with the Codec's native volume control buttons</li> </ul> </li> <li>Observe your Terminal Windows output, you should see events for your Subscription fill the Terminal Window<ul> <li>Optional: Move the slider a few more times to see more changes come in</li> </ul> </li> </ul> </li> </ul> Click to Compare your Terminal Output <p> </p> View Subscription Assistant Operation <p> </p> </li> </ul> Lesson: Unsubscribing to an xStatus <ul> <li> <p>xAPI: xStatus Audio Input</p> </li> <li> <p>Task:</p> Type into terminal and press Enter<pre><code>xFeedback Deregister Status/Audio/Volume\n</code></pre> <ul> <li>Press the <code>Subscription Assistant Button</code> on your Touch Interface<ul> <li>Under the xStatuses Page, move the Slider labeled Adjust Volume, to a new position and release<ul> <li>Alternatively, you can adjust the volume with the Codec's native volume control buttons</li> </ul> </li> <li>Observe your Terminal Windows output, those responses you saw in the previous lesson should have stopped outputting in your Terminal Window<ul> <li>Optional: Move the slider a few more times to see more changes come in</li> </ul> </li> </ul> </li> </ul> </li> </ul> Lesson: Subscribe to Multiple xStatuses under a Common Node <ul> <li> <p>xAPI: xStatus Cameras Camera [N] Position</p> </li> <li> <p>Task:</p> Type into terminal and press Enter<pre><code>xFeedback Register Status/Cameras/Camera/Position\n</code></pre> What happened to the <code>[N]</code> in the xAPI Path? <p>You may have noticed we never declared <code>[N]</code> in the xAPI Path for the command we ran. This was left out on purpose. <code>[N]</code> corresponds to the CameraId you want to target. Some Codecs can control up 7 cameras, so these xAPI paths branch per connected Camera</p> <p>Whereas you could be running this lab on a variety of Codec's, it's better to leave this out for Lab Purposes, but also has value in a multi-camera system, allowing us to subscribe to ALL camera's positions as they change </p> <ul> <li>Press the <code>Subscription Assistant Button</code> on your Touch Interface<ul> <li>Under the xStatuses Page, click the button in the Camera Control Wheel row<ul> <li>Alternatively, you can adjust your cameras position through the native camera control interface</li> </ul> </li> <li>Observe your Terminal Windows output, you should see events for your Subscription fill the Terminal Window<ul> <li>Optional: Continue pressing buttons to see more changes come in</li> </ul> </li> </ul> </li> </ul> Click on the tabs below to Compare TerminalView Subscription AssistantView Native Camera Control Interface <p> </p> <p> </p> <p> </p> </li> </ul> Lesson: Unsubscribe from all xStatuses <ul> <li> <p>xAPI: N/A</p> </li> <li> <p>Task: </p> Type into terminal and press Enter<pre><code>    xFeedback DeregisterAll\n</code></pre> <ul> <li>Press the <code>Subscription Assistant Button</code> on your Touch Interface<ul> <li>Under the xStatuses Page, click the button in the Camera Control Wheel row<ul> <li>Alternatively, you can adjust your cameras position through the native camera control interface</li> </ul> </li> <li>Observe your Terminal Windows output, those responses you saw in the previous lesson should have stopped outputting in your Terminal Window<ul> <li>Optional: Continue pressing buttons to see more changes come in</li> </ul> </li> </ul> </li> </ul> </li> </ul>"},{"location":"wx1_1451_part_2/#226-subscribing-to-events","title":"2.2.6 - Subscribing to Events","text":"<p>xEvents</p> <p>Event returns information about the events that are available for feedback. </p> <p>Click to expand each xEvent example below, execute them in your terminal session and observe the responses in the terminal window</p> Lesson: Subscribing to an xEvent <ul> <li> <p>xAPI: xEvent UserInterface Message Prompt Response</p> </li> <li> <p>Task: </p> Type into terminal and press Enter<pre><code>xFeedback Register Event/UserInterface/Message/Prompt/Response\n</code></pre> <ul> <li>Press the <code>Subscription Assistant Button</code> on your Touch Interface<ul> <li>Under the xEvents Page, click the Prompt Button in the UserInterface Message row<ul> <li>This will create a Pop Up with 5 options</li> <li>Click on any of these 5 Options</li> </ul> </li> <li>Observe your Terminal Windows output, you should see events for your Subscription fill the Terminal Window<ul> <li>Optional: Try each of the options under <code>Prompt</code> and continue to observe your Terminal Windows</li> </ul> </li> <li>Press click either the <code>TextInput</code>, the <code>Rating</code> or the <code>Alert</code> button and submit any accompanying actions in that interface</li> <li>Observe your Terminal Windows output, you should see events for your Subscription fill the Terminal Window<ul> <li>Responses for <code>TextInput</code>, <code>Rating</code> or <code>Alert</code> shouldn't show since you're currently only subscribed to <code>Prompt</code></li> </ul> </li> </ul> </li> </ul> Click to Compare your Terminal Output View Subscription Assistant Operation <p> </p> </li> </ul> Lesson: Unsubscribing to an xEvent <ul> <li> <p>xAPI: xEvent UserInterface Message Prompt Response</p> </li> <li> <p>Task: </p> Type into terminal and press Enter<pre><code>xFeedback Deregister Event/UserInterface/ScreenShotRequest/RequestId\n</code></pre> <ul> <li>Press the <code>Subscription Assistant Button</code> on your Touch Interface<ul> <li>Under the xEvents Page, click either the <code>Prompt</code>, the <code>TextInput</code>, the <code>Rating</code> or the <code>Alert</code> button in the UserInterface Message row and submit any accompanying actions in that interface</li> <li>Observe your Terminal Windows output, those responses you saw in the previous lesson should have stopped outputting in your Terminal Window</li> </ul> </li> </ul> </li> </ul> Lesson: Subscribe to Multiple xEvents under a Common Node <ul> <li>xAPI: xEvent UserInterface</li> </ul> <p>Note</p> <p>By Subscribing to a High Common Node, such as xEvent UserInterface, we can see all UI related Events available in that xAPI Node</p> <ul> <li> <p>Task: </p> Type into terminal and press Enter<pre><code>xFeedback Register Event/UserInterface\n</code></pre> <ul> <li>Press the <code>Subscription Assistant Button</code> on your Touch Interface<ul> <li>Under the xEvents Page, try any of the <code>Widgets</code> on this page, and submit any accompanying actions in that interface if any</li> <li>Observe your Terminal Windows output, you should see events for your Subscription fill the Terminal Window<ul> <li>Optional: Try all of the <code>Widget</code> on that page </li> </ul> </li> </ul> </li> </ul> Click to Compare your Terminal Output <p> </p> View Subscription Assistant Operation <p> </p> </li> </ul> Lesson: Unsubscribe from all xEvents <ul> <li> <p>xAPI: N/A</p> </li> <li> <p>Task: </p> Type into terminal and press Enter<pre><code>    xFeedback DeregisterAll\n</code></pre> <ul> <li>Press the <code>Subscription Assistant Button</code> on your Touch Interface<ul> <li>Under the xEvents Page, try any of the <code>Widgets</code> on this page, and submit any accompanying actions in that interface if any</li> <li>Observe your Terminal Windows output, those responses you saw in the previous lesson should have stopped outputting in your Terminal Window<ul> <li>Optional: Continue pressing buttons to see more changes come in</li> </ul> </li> </ul> </li> </ul> </li> </ul>"},{"location":"wx1_1451_part_2/#227-tagging-your-xapi-calls","title":"2.2.7 - Tagging your xAPI Calls","text":"<p>As you work to build your automation in a SSH or Serial terminal session, you may find yourself making multiple calls against the same path and the timing of that output may be critical of your solution.</p> <p>To help simplify which data belongs where, you can tag your xAPI paths with a custom value to better track your work.</p> <p>By appending <code>|resultId=\"myValue\"</code> to the end of any xAPI Call, the response from that xAPI will include that resultId you assign</p> <p>Review Tagging examples below</p> xStatus Audio VolumexCommand Video Selfview SetxConfiguration SystemUnit NamexFeedback Register Event/CallSuccessful <pre><code>xStatus Audio Volume |resultId=\"Custom Value 1\"\n*s Audio Volume: 50\n** resultId: \"Custom Value 1\"\n** end\n</code></pre> <pre><code>xCommand Video Selfview Set Mode: On |resultId=\"Custom Value 2\"\n\nOK\n*r SelfviewSetResult (status=OK): \n** resultId: \"Custom Value 2\"\n** end\n</code></pre> <pre><code>xConfiguration SystemUnit Name |resultId=\"Custom Value 3\"\n*c xConfiguration SystemUnit Name: \" \"\n** resultId: \"Custom Value 3\"\n** end\n\nOK\n</code></pre> <p>Note</p> <p>When declaring xFeedback, or subscribing to any xAPI, the resultId will only print when you execute the command, but will not print with the subsequent data coming in from the subscription</p> <pre><code>xFeedback Register Event/CallSuccessful |resultId=\"Custom Value 4\"\n** resultId: \"Custom Value 4\"\n** end\n\nOK\n*e CallSuccessful Protocol: \"Spark\"\n*e CallSuccessful Direction: \"outgoing\"\n*e CallSuccessful RemoteURI: \"spark:XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX\"\n*e CallSuccessful EncryptionIn: \"On\"\n*e CallSuccessful EncryptionOut: \"On\"\n*e CallSuccessful CallRate: 20000\n*e CallSuccessful CallId: 3\n** end\n*e CallSuccessful Protocol: \"Spark\"\n*e CallSuccessful Direction: \"outgoing\"\n*e CallSuccessful RemoteURI: \"spark:XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX\"\n*e CallSuccessful EncryptionIn: \"On\"\n*e CallSuccessful EncryptionOut: \"On\"\n*e CallSuccessful CallRate: 20000\n*e CallSuccessful CallId: 4\n** end  \n</code></pre>"},{"location":"wx1_1451_part_2/#228-section-22-cleanup","title":"2.2.8 - Section 2.2 Cleanup","text":"<p>Abstract</p> <p>As we move into the rest of this lab, we'll cover alot of the same xAPI concepts as we had in our SSH terminal session from other integration methods available on the endpoint</p> <p>To be respectful of time, we'll only cover the minimum needed in those other integration methods, know if there is an xAPI accessible, there is a way from nearly all integration methods</p> <p>Important</p> <ul> <li>Press the <code>Subscription Assistant Button</code> on your Touch Interface</li> <li>Under the Section Cleanup Page, select the Run Section Cleanup? button</li> <li>Select Yes, Run the Cleanup Script</li> </ul> <p> Section Cleanup Confirmation </p> <p>This will reverse the changes we've made to the endpoint, and leave us ready for the next section</p> You can run the cleanup via the terminal as well <p>Copy the contents below into your terminal window and run them all at once</p> Type into terminal and press Enter<pre><code>xFeedback DeregisterAll\nxConfig Audio DefaultVolume: 50\nxCommand UserInterface Extensions Panel Remove PanelId: wx1_lab_multilineCommand\nxCommand Video Selfview Set Mode: Off FullscreenMode: Off\nxCommand Video Input SetMainVideoSource ConnectorId: 1\nxCommand Audio Volume SetToDefault Device: Internal\n</code></pre> <p>Feel free to close your Terminal Window</p>"},{"location":"wx1_1451_part_2/#section-23-accessing-the-xapi-via-http","title":"Section 2.3: Accessing the xAPI via HTTP","text":"<p>Section 2.3 Abstract</p> <p>Like we can with SSH, the xAPI can be accessed via the HTTP protocol. What we'll do in this section is run through the same commands, configs, statuses and events as we did in the SSH section, but the techniques involved executed in a different manner</p> <p>Section Requirements</p> <ul> <li>If Postman is NOT installed, be sure to install it before continuing section 2.3</li> </ul> <p>We'll also be leveraging a Webhook testing site, make sure you have that open in another tab/window as well</p> <ul> <li> <p> Click the icon below for the Postman Download Page</p> <p> </p> </li> <li> <p> Click the icon below for the Section 2.3 Postman Collection</p> <p> </p> </li> <li> <p> Click the icon below for the WebHook Site </p> <p> </p> </li> </ul>"},{"location":"wx1_1451_part_2/#231-http-authentication-and-format","title":"2.3.1 - HTTP Authentication and Format","text":"<p>URL Structure</p> <p>The request URL for your Codec will change depending on whether you're making a Get or Post Call</p> Get UrlPost Url <p>https://[YOUR_DEVICE_IP]/getxml?location=[YOUR_XAPI_PATH_BODY]</p> <p>https://[YOUR_DEVICE_IP]/putxml</p> <p>Authentication Format</p> <p>The Codec uses basic authentication to accept incoming HTTP requests. This authentication is formatted in base64 with it's username and password concatenated as a single string separated by a colon :</p> <p>Click on the tabs below to see how an example Username and Password transitions to base64</p> Base Credentials &gt;Decoded String &gt;Base64 Encoded String &gt;Authorization Request Header <p>Username: admin Password: admin1234</p> <p>admin:admin1234 </p> <p>YWRtaW46YWRtaW4xMjM0 </p> <p>\"Authorization\": \"Basic YWRtaW46YWRtaW4xMjM0\"  </p> <p>Request Headers</p> <p>Your Get and Post requests will use this Authorization in one of its 2 headers</p> Key Value <code>Content-Type</code> <code>text/xml</code> <code>Authorization</code> <code>Basic [YOUR_BASE64_ENCODED_AUTH]</code> <p>Body Format</p> <p>To target a specific path, you need to provide a body to either your Get or Post request</p> <p>Get Requests define their xAPI in the location parameter in the Url itself</p> <p>For Post requests, a body structured as XML and provided as a string is required</p> <p>Here is the fully realized path for <code>xConfiguration SystemUnit Name</code></p> GetPost <p>Url: https://[YOUR_DEVICE_IP]/getxml?location=Configuration/SystemUnit/Name</p> <p>Body: N/A</p> <p>Notice how <code>xConfiguration SystemUnit Name</code> is structured in the ?location Url Parameter using <code>/</code> as a separator. When formatting a Get Request, the full xAPI path will go here, but be sure to remove the <code>x</code> in the Parent xAPI Path</p> <ul> <li>xConfiguration/Child/Child/...</li> <li>xCommand/Child/Child/...</li> <li>xStatus/Child/Child/...</li> </ul> <p>Url: https://[YOUR_DEVICE_IP]/putxml</p> <p>Body: &lt;Configuration&gt;&lt;SystemUnit&gt;&lt;Name&gt;My New System Name&lt;/Name&gt;&lt;/SystemUnit&gt;&lt;/Configuration&gt;</p> <p>With Post requests, a body payload must be provided and the xAPI path is no longer structured in the Url</p> <p>The body must be a String in XML format and each Path for the xAPI are instead the Opening and Closing Tags for the xAPI in question</p> <p>All closing tags must have a <code>/</code> added in front</p> <p>All Values are placed in between their respective parameter tags</p> <p>Remove the <code>x</code> in the Parent xAPI Path</p> <ul> <li>&lt;xConfiguration&gt;&lt;/xConfiguration&gt;</li> <li>&lt;xCommand&gt;&lt;/xConfiguration&gt;</li> <li>&lt;xStatus&gt;&lt;/xConfiguration&gt;</li> </ul> Example XML Structure<pre><code>&lt;Parent&gt;\n  &lt;Child&gt;\n    &lt;ChildParameter&gt;Value&lt;ChildParameter&gt;\n  &lt;/Child&gt;\n&lt;Parent&gt;\n</code></pre> Take advantage of your Code Language <p>Many languages have built in function to help process data</p> <p>For instance, when working in ES6 or newer Javascript Environments, you can leverage the <code>btoa()</code> and <code>atob()</code> functions that are built into that language to quickly encode and decode strings to/from base64. Ex: <code>btoa('admin:admin1234')</code> = YWRtaW46YWRtaW4xMjM0==</p> <p>Full HTTP Get and Post examples</p> Click to view a Full Example of each written using the JavaScript Fetch API GetPost <pre><code>const myHeaders = new Headers();\nmyHeaders.append(\"Content-Type\", \"text/xml\");\nmyHeaders.append(\"Authorization\", \"Basic [YOUR_BASE64_ENCODED_AUTH]\");\n\nconst requestOptions = {\n  method: \"GET\",\n  headers: myHeaders,\n  redirect: \"follow\"\n};\n\nfetch(\"https://[YOUR_DEVICE_IP]/getxml?location=Configuration/SystemUnit/Name\", requestOptions)\n  .then((response) =&gt; response.text())\n  .then((result) =&gt; console.log(result))\n  .catch((error) =&gt; console.error(error));\n\n/* Below is the Response Body after making a Successful Request\n\n&lt;?xml version=\"1.0\"?&gt;\n&lt;Configuration product=\"Cisco Codec\" version=\"ce11.20.1.7.913a6c7c769\" apiVersion=\"4\"&gt;\n    &lt;SystemUnit&gt;\n        &lt;Name valueSpaceRef=\"/Valuespace/STR_0_50_NoFilt\"&gt; My Room Bar Pro&lt;/Name&gt;\n    &lt;/SystemUnit&gt;\n&lt;/Configuration&gt;\n*/\n</code></pre> <pre><code>const myHeaders = new Headers();\nmyHeaders.append(\"Content-Type\", \"text/xml\");\nmyHeaders.append(\"Authorization\", \"Basic [YOUR_BASE64_ENCODED_AUTH]\");\n\nconst raw = \"&lt;Configuration&gt;&lt;SystemUnit&gt;&lt;Name&gt;My New System Name&lt;/Name&gt;&lt;/SystemUnit&gt;&lt;/Configuration&gt;\";\n\nconst requestOptions = {\n  method: \"POST\",\n  headers: myHeaders,\n  body: raw,\n  redirect: \"follow\"\n};\n\nfetch(\"https://[YOUR_DEVICE_IP]/putxml\", requestOptions)\n  .then((response) =&gt; response.text())\n  .then((result) =&gt; console.log(result))\n  .catch((error) =&gt; console.error(error));\n\n/* Below is the Response Body after making a Successful Request\n\n&lt;?xml version=\"1.0\"?&gt;\n&lt;Configuration&gt;\n    &lt;Success/&gt;\n&lt;/Configuration&gt;\n*/\n</code></pre> Click to view a Full Example of each written using the Macro Editor [ES6 JS] and your codec's HTTPClient xAPIs GetPost <pre><code>import xapi from 'xapi';\n\nconst destinationIp = '[YOUR_DEVICE_IP]';\nconst headers = ['Content-Type: text/xml', `Authorization: Basic ${btoa('[YOUR_AUTH]')}`];\n\n\nasync function getPath(path){\n  const destinationUrl = `https://${destinationIp}/getxml?location=${path}`;\n\n  try {\n    const request = await xapi.Command.HttpClient.Get({\n      Url: destinationUrl,\n      Header: headers,\n      AllowInsecureHTTPS: 'True'\n    })\n    console.debug(request);\n    return request\n  } catch (e) {\n    let err = {\n      Context: `Failed Get Request to [${destinationUrl}]`,\n      ...e\n    }\n    throw new Error(e)\n  }\n}\n\ngetPath('Configuration/SystemUnit/Name');\n</code></pre> <pre><code>import xapi from 'xapi';\n\nconst destinationIp = '[YOUR_DEVICE_IP]';\nconst headers = ['Content-Type: text/xml', `Authorization: Basic ${btoa('[YOUR_AUTH]')}`];\n\n\nasync function setPath(body){\n  const destinationUrl = `https://${destinationIp}/putxml`;\n\n  try {\n    const request = await xapi.Command.HttpClient.Post({\n      Url: destinationUrl,\n      Header: headers,\n      AllowInsecureHTTPS: 'True'\n    }, body)\n    console.debug(request);\n    return request\n  } catch (e) {\n    let err = {\n      Context: `Failed Post Request to [${destinationUrl}]`,\n      ...e\n    }\n    throw new Error(e)\n  }\n}\n\nsetPath('&lt;Configuration&gt;&lt;SystemUnit&gt;&lt;Name&gt;My New System Name&lt;/Name&gt;&lt;/SystemUnit&gt;&lt;/Configuration&gt;');\n</code></pre> <p>       Learn more about Device HTTPClient xAPIs </p>  Hey, what's up with that <code>...e</code> in your caught error? <p>Again, knowing you language has it's benefits</p> <p><code>...</code> is called a Spread Operator and it's very useful when playing with data in ES6 JS</p> <p>We're using it here to pass the original error the xAPI produced into an err object as well as some context to help us troubleshoot our macro in the future.</p> <p>       Learn more about Spread Operators </p> Click to view a Full Example of each written using the Python Requests API GetPost <pre><code>import requests\n\nurl = \"https://[YOUR_DEVICE_IP]/getxml?location=Configuration/SystemUnit/Name\"\n\npayload = \"\"\nheaders = {\n  'Content-Type': 'text/xml',\n  'Authorization': 'Basic [YOUR_BASE64_ENCODED_AUTH]'\n}\n\nresponse = requests.request(\"GET\", url, headers=headers, data=payload)\n\nprint(response.text)\n\n# Below is the Response Body after making a Successful Request\n\n# &lt;?xml version=\"1.0\"?&gt;\n# &lt;Configuration&gt;\n#     &lt;Success/&gt;\n# &lt;/Configuration&gt;\n</code></pre> <pre><code>import requests\n\nurl = \"https://[YOUR_DEVICE_IP]/putxml\"\n\npayload = \"&lt;Configuration&gt;&lt;SystemUnit&gt;&lt;Name&gt;My New System Name&lt;/Name&gt;&lt;/SystemUnit&gt;&lt;/Configuration&gt;\"\nheaders = {\n  'Content-Type': 'text/xml',\n  'Authorization': 'Basic [YOUR_BASE64_ENCODED_AUTH]'\n}\n\nresponse = requests.request(\"POST\", url, headers=headers, data=payload)\n\nprint(response.text)\n\n# Below is the Response Body after making a Successful Request\n\n# &lt;?xml version=\"1.0\"?&gt;\n# &lt;Configuration product=\"Cisco Codec\" version=\"ce11.20.1.7.913a6c7c769\" apiVersion=\"4\"&gt;\n#     &lt;SystemUnit&gt;\n#         &lt;Name valueSpaceRef=\"/Valuespace/STR_0_50_NoFilt\"&gt; My Room Bar Pro&lt;/Name&gt;\n#     &lt;/SystemUnit&gt;\n# &lt;/Configuration&gt;\n</code></pre>"},{"location":"wx1_1451_part_2/#232-import-and-configure-the-section-23-postman-collection","title":"2.3.2 - Import and Configure the section 2.3 Postman Collection","text":"<p>Whereas we'll be using Postman, this tool will automatically take our basic auth and structure as an with Header for us and convert that string into base64</p> <p>This collection has most pieces structured as we'd need it to and will be used through section 2.3.2 through 2.3.5</p> Import Collection <ul> <li>With Postman open, in a new or existing workspace select import</li> <li>Select File</li> <li>Locate the WX1-Lab:1451-HTTP-Postman-Collection.Postman_collection.json and Open it</li> <li>You should now have the Postman Collection installed for this lab</li> </ul> View Import Postman Collection <p> </p> Configure Postman Collection for sections 2.3.3 through 2.3.5 <ul> <li>Click on the WX1-Lab:1451-HTTP-Postman-Collection root folder</li> <li>Select Variables</li> <li>Add the following information for your codec in both the <code>Initial Value</code> and <code>Current Value</code> fields<ul> <li>device_username</li> <li>device_password</li> <li>device_ipAddress</li> </ul> </li> <li>Select Save (or one of the keyboard shortcuts for your computer)<ul> <li>Ctrl+S for Windows</li> <li>Cmd+S for Mac</li> </ul> </li> </ul> View Configure Postman Collection for sections 2.3.3 through 2.3.5 <p> </p>"},{"location":"wx1_1451_part_2/#233-executing-xcommands","title":"2.3.3 - Executing xCommands","text":"<p>Abstract</p> <p>Throughout section 2.3.3, you'll learn how to format and execute xCommands via HTTP using Postman.</p> <p>The techniques outlined here will correspond to the methods needed for setting new xConfiguration Values in section 2.3.4</p> Lesson: Execute an xCommand <p>XML Body Location</p> <p> </p> <ul> <li> <p>xAPI: xCommand Video Selfview Set</p> </li> <li> <p>Task: Structure the xAPI command above into an XML format then place this into the Body of the Execute an xCommand request in your Postman collection. Include the following Parameters and Values</p> <ul> <li>Mode: On</li> <li>FullScreenMode: On</li> <li>OnMonitorRole: First</li> </ul> </li> </ul> <p>Once the Postman Request has been updated, Save the request, select Send and review the Postman Terminal's repsonse and observe any changes to your device</p> View properly formatted XML and Successful Response <p></p> <pre><code>&lt;Command&gt;\n  &lt;Video&gt;\n    &lt;Selfview&gt;\n      &lt;Set&gt;\n        &lt;Mode&gt;On&lt;/Mode&gt;\n        &lt;FullScreenMode&gt;On&lt;/FullScreenMode&gt;\n        &lt;OnMonitorRole&gt;First&lt;/OnMonitorRole&gt;\n      &lt;/Set&gt;\n    &lt;/Selfview&gt;\n  &lt;/Video&gt;\n&lt;/Command&gt;\n</code></pre> View Failed Response <p>If you have a failed response, review the errors as it will point out how to resolve your particular issue in your XML payload and try again</p> <p> </p> Lesson: Execute multiple xCommands in a single request <p>Info</p> <p>You can structure your XML to allow for multiple xAPI calls under a single Parent Path, in this case the Parent Path is xCommand</p> <p>So long as the paths you're running are under their appropriate Common Path Nodes, then they will be considered. Should those Common Path Nodes deviate, then you must structure the XML to match</p> <ul> <li> <p>xAPI(s):</p> <ul> <li>xCommand Video Selfview Set</li> <li>xCommand UserInterface WebView Display</li> <li>xCommand UserInterface Message Rating Display</li> </ul> </li> <li> <p>Task: <code>xCommand Video Selfview Set</code> and <code>xCommand UserInterface WebView Display</code> have already be set in your collection under their appropriate Common Node Path. We've highlighted the Common Node Paths above for you to see. Structure the XML for xCommand UserInterface Message Rating Display and place it as the next xCommand in the XML structure given to you. Include the following Parameters and Values</p> <ul> <li>Title: Rate this Site</li> <li>Text: From 0 to 5 stars, rate this Website</li> <li>Duration: 45</li> </ul> </li> </ul> <p>Once the Postman Request has been updated, Save the request, select Send and review the Postman Terminal's repsonse and observe any changes to your device</p> View Successful OSD Output <p> What to expect on your OSD on a successful request </p> View properly formatted XML and Successful Response <p></p> Message Rating Display XMLFull XML body <pre><code>&lt;Command&gt;\n  &lt;UserInterface&gt;\n    &lt;Message&gt;\n      &lt;Rating&gt;\n        &lt;Display&gt;\n          &lt;Title&gt;Rate this Site&lt;/Title&gt;\n          &lt;Text&gt;From 0 to 5 stars, rate this Website&lt;/Text&gt;\n          &lt;Duration&gt;45&lt;/Duration&gt;\n        &lt;/Display&gt;\n      &lt;/Rating&gt;\n    &lt;/Message&gt;\n  &lt;/UserInterface&gt;\n&lt;/Command&gt;\n</code></pre> <pre><code>&lt;Command&gt;\n  &lt;Video&gt;\n    &lt;Selfview&gt;\n      &lt;Set&gt;\n        &lt;Mode&gt;Off&lt;/Mode&gt;\n      &lt;/Set&gt;\n    &lt;/Selfview&gt;\n  &lt;/Video&gt;\n  &lt;UserInterface&gt;\n    &lt;WebView&gt;\n      &lt;Display&gt;\n        &lt;Mode&gt;Modal&lt;/Mode&gt;\n        &lt;Url&gt;https://roomos.cisco.com&lt;/Url&gt;\n      &lt;/Display&gt;\n    &lt;/WebView&gt;\n    &lt;!-- Message Rating Display Should Start Here --&gt;\n    &lt;Message&gt;\n      &lt;Rating&gt;\n        &lt;Display&gt;\n          &lt;Title&gt;Rate this Site&lt;/Title&gt;\n          &lt;Text&gt;From 0 to 5 stars, rate this Website&lt;/Text&gt;\n          &lt;Duration&gt;45&lt;/Duration&gt;\n        &lt;/Display&gt;\n      &lt;/Rating&gt;\n    &lt;/Message&gt;\n    &lt;!-- Message Rating Display Should End Here --&gt;\n  &lt;/UserInterface&gt;\n&lt;/Command&gt;\n</code></pre> View Failed Response <p>If you have a failed response, review the errors as it will point out how to resolve your particular issue in your XML payload and try again</p> <p> </p> Lesson: Execute an xCommand with multiple arguments with the same name <p>Info</p> <p>We can structure the XML payload for HTTP to include multiple parameters under the same name</p> <p>Simply duplicate the Parameter that's capable of being duplicated and add that into your XML body. Be sure to include the Opening and Closing XML tags for that parameter as well</p> <ul> <li> <p>xAPI(s):</p> <ul> <li>xCommand UserInterface WebView Clear</li> <li>xCommand UserInterface Message Rating Clear</li> <li>xCommand Video Selfview Set</li> <li>xCommand Video Input SetMainVideoSource</li> </ul> </li> <li> <p>Task: We'll be running multiple commands in conjunction to having multiple parameters in this lesson.</p> <ul> <li>To clean up from the previous lesson, we'll send an xCommand to clear by replacing the Display Tags for both with Clear and deleting any parameters they had<ul> <li><code>xCommand UserInterface WebView DisplayClear</code></li> <li><code>xCommand UserInterface Message Rating DisplayClear</code></li> </ul> </li> <li>Then we'll set selfview back on in Full Screen</li> <li>The above tasks will come preloaded in the Postman collection, your task is to structure the XML for xCommand Video Input SetMainVideoSource and place it as the next xCommand in the XML structure given to you and duplicate the <code>ConnectorId</code> parameter. Include the following Parameters and Values<ul> <li>ConnectorId: 1</li> <li>Layout: Prominent</li> </ul> </li> </ul> </li> </ul> <p>Once the Postman Request has been updated, Save the request, select Send and review the Postman Terminal's repsonse and observe any changes to your device</p> View Successful OSD Output <p> What to expect on your OSD on a successful request </p> View properly formatted XML and Successful Response <p></p> Video Input SetMainVideoSource XMLFull XML body <pre><code>&lt;Command&gt;\n  &lt;Video&gt;\n    &lt;Input&gt;\n      &lt;SetMainVideoSource&gt;\n        &lt;ConnectorId&gt;1&lt;/ConnectorId&gt;\n        &lt;!-- Your Duplicate ConnectorId Parameter Should Start Here  --&gt;\n        &lt;ConnectorId&gt;1&lt;/ConnectorId&gt;\n        &lt;!-- Your Duplicate ConnectorId Parameter Should End Here  --&gt;\n        &lt;Layout&gt;Prominent&lt;/Layout&gt;\n      &lt;/SetMainVideoSource&gt;\n    &lt;/Input&gt;\n  &lt;/Video&gt;\n&lt;/Command&gt;\n</code></pre> <pre><code>&lt;Command&gt;\n  &lt;UserInterface&gt;\n    &lt;WebView&gt;\n      &lt;Clear&gt;&lt;/Clear&gt;\n    &lt;/WebView&gt;\n    &lt;Message&gt;\n      &lt;Rating&gt;\n        &lt;Clear&gt;&lt;/Clear&gt;\n      &lt;/Rating&gt;\n    &lt;/Message&gt;\n  &lt;/UserInterface&gt;\n  &lt;Video&gt;\n    &lt;Selfview&gt;\n      &lt;Set&gt;\n        &lt;Mode&gt;On&lt;/Mode&gt;\n        &lt;FullScreenMode&gt;On&lt;/FullScreenMode&gt;\n        &lt;OnMonitorRole&gt;First&lt;/OnMonitorRole&gt;\n      &lt;/Set&gt;\n    &lt;/Selfview&gt;\n    &lt;Input&gt;\n      &lt;SetMainVideoSource&gt;\n        &lt;ConnectorId&gt;1&lt;/ConnectorId&gt;\n        &lt;!-- Your Duplicate ConnectorId Parameter Should Start Here  --&gt;\n        &lt;ConnectorId&gt;1&lt;/ConnectorId&gt;\n        &lt;!-- Your Duplicate ConnectorId Parameter Should End Here  --&gt;\n        &lt;Layout&gt;Prominent&lt;/Layout&gt;\n      &lt;/SetMainVideoSource&gt;\n    &lt;/Input&gt;\n  &lt;/Video&gt;\n&lt;/Command&gt;\n</code></pre> View Failed Response <p>If you have a failed response, review the errors as it will point out how to resolve your particular issue in your XML payload and try again</p> <p> </p> Lesson: Execute an xCommand with a multiline argument <p>Info</p> <p>Multiline Arguments can be placed into the body of the XML as well. This specifically uses a <code>&lt;body&gt;</code> which isn't explicitly highlighted in the path of the API.</p> <p>The structure of a Multiline argument should look similar to the following</p> Example XML Structure with Multiline Argument<pre><code>&lt;Parent&gt;\n  &lt;Child&gt;\n    &lt;ChildParameter&gt;Value&lt;ChildParameter&gt;\n    &lt;body&gt;[MY_MULTILINE_ARGUMENT]&lt;/body&gt;\n  &lt;/Child&gt;\n&lt;Parent&gt;\n</code></pre> <ul> <li> <p>xAPI(s):</p> <ul> <li>xCommand Video Selfview Set</li> <li>xCommand Video Input SetMainVideoSource</li> <li>xCommand UserInterface Extensions Panel Save</li> </ul> </li> <li> <p>Task: We'll be running multiple commands in conjunction to having a multiline argument.</p> <ul> <li>We'll start by correcting our Camera View from the previous lesson, which will come pre-loaded in the Postman Collection</li> <li>Your task is to structure the XML for xCommand UserInterface Extensions Panel Save and place it as the next xCommand in the XML structure given. Include the following Parameters and Values<ul> <li>PanelId: wx1_lab_multilineCommand</li> <li>body:     Your &lt;body&gt; Value<pre><code>&lt;Extensions&gt;\n  &lt;Panel&gt;\n    &lt;Order&gt;1&lt;/Order&gt;\n    &lt;PanelId&gt;wx1_lab_multilineCommand&lt;/PanelId&gt;\n    &lt;Location&gt;HomeScreen&lt;/Location&gt;\n    &lt;Icon&gt;Info&lt;/Icon&gt;\n    &lt;Color&gt;#FF70CF&lt;/Color&gt;\n    &lt;Name&gt;MultiLine Command [Section 2.3.3]&lt;/Name&gt;\n    &lt;ActivityType&gt;Custom&lt;/ActivityType&gt;\n  &lt;/Panel&gt;\n&lt;/Extensions&gt;\n</code></pre></li> </ul> </li> </ul> </li> </ul> <p>Once the Postman Request has been updated, Save the request, select Send and review the Postman Terminal's repsonse and observe any changes to your device</p> You're Wrapping XML around XML! <p>Note: Not all multiline arguments are in XML format; for example, xCommand UserInterface Extensions Panel Save is. It\u2019s important to remember that any data placed within a <code>&lt;body&gt;</code> tag should always be written as a <code>String</code>. If your integration automatically injects this information, additional processing may be necessary.</p> <p>The xAPI will have a hard time deciphering your Body's XML value vs the xAPI XML Payload</p> <p>You'll want to \"Stringify\" the XML body by replacing all instances of <code>&lt;</code> characters with &amp;lt; and all instances of <code>&gt;</code> characters with &amp;gt; &gt;</p> <ul> <li>These aren't the only characters that are impacted, and that will largely depend on your XML body value</li> </ul> <p>Luckily, you can use the Stringify XML Body on the Tools Page to do this for you</p> <p>   Open Tools  Page  </p> View Successful OSD Output <p> What to expect on your OSD on a successful request </p> View properly formatted XML and Successful Response <p></p> UserInterface Extensions Panel Save XMLFull XML body <pre><code>&lt;Command&gt;\n  &lt;UserInterface&gt;\n    &lt;Extensions&gt;\n      &lt;Panel&gt;\n        &lt;Save&gt;\n          &lt;PanelId&gt;wx1_lab_multilineCommand&lt;/PanelId&gt;\n          &lt;body&gt;&amp;lt;Extensions&amp;gt; &amp;lt;Panel&amp;gt; &amp;lt;Order&amp;gt;1&amp;lt;/Order&amp;gt; &amp;lt;PanelId&amp;gt;wx1_lab_multilineCommand&amp;lt;/PanelId&amp;gt; &amp;lt;Location&amp;gt;HomeScreen&amp;lt;/Location&amp;gt; &amp;lt;Icon&amp;gt;Info&amp;lt;/Icon&amp;gt; &amp;lt;Color&amp;gt;#FF70CF&amp;lt;/Color&amp;gt; &amp;lt;Name&amp;gt;MultiLine Command [Section 2.3.3]&amp;lt;/Name&amp;gt; &amp;lt;ActivityType&amp;gt;Custom&amp;lt;/ActivityType&amp;gt; &amp;lt;/Panel&amp;gt; &amp;lt;/Extensions&amp;gt;\n          &lt;/body&gt;\n        &lt;/Save&gt;\n      &lt;/Panel&gt;\n    &lt;/Extensions&gt;\n  &lt;/UserInterface&gt;\n&lt;/Command&gt;\n</code></pre> <pre><code>&lt;Command&gt;\n  &lt;Video&gt;\n    &lt;Selfview&gt;\n      &lt;Set&gt;\n        &lt;Mode&gt;Off&lt;/Mode&gt;\n      &lt;/Set&gt;\n    &lt;/Selfview&gt;\n    &lt;Input&gt;\n      &lt;SetMainVideoSource&gt;\n        &lt;ConnectorId&gt;1&lt;/ConnectorId&gt;\n        &lt;Layout&gt;Equal&lt;/Layout&gt;\n      &lt;/SetMainVideoSource&gt;\n    &lt;/Input&gt;\n  &lt;/Video&gt;\n  &lt;!-- Your UserInterface Extensions Panel Save XML Should Start Here  --&gt;\n  &lt;UserInterface&gt;\n    &lt;Extensions&gt;\n      &lt;Panel&gt;\n        &lt;Save&gt;\n          &lt;PanelId&gt;wx1_lab_multilineCommand&lt;/PanelId&gt;\n          &lt;body&gt;&amp;lt;Extensions&amp;gt; &amp;lt;Panel&amp;gt; &amp;lt;Order&amp;gt;1&amp;lt;/Order&amp;gt; &amp;lt;PanelId&amp;gt;wx1_lab_multilineCommand&amp;lt;/PanelId&amp;gt; &amp;lt;Location&amp;gt;HomeScreen&amp;lt;/Location&amp;gt; &amp;lt;Icon&amp;gt;Info&amp;lt;/Icon&amp;gt; &amp;lt;Color&amp;gt;#FF70CF&amp;lt;/Color&amp;gt; &amp;lt;Name&amp;gt;MultiLine Command [Section 2.3.3]&amp;lt;/Name&amp;gt; &amp;lt;ActivityType&amp;gt;Custom&amp;lt;/ActivityType&amp;gt; &amp;lt;/Panel&amp;gt; &amp;lt;/Extensions&amp;gt;\n          &lt;/body&gt;\n        &lt;/Save&gt;\n      &lt;/Panel&gt;\n    &lt;/Extensions&gt;\n  &lt;/UserInterface&gt;\n  &lt;!-- Your UserInterface Extensions Panel Save XML Should Start Here  --&gt;\n&lt;/Command&gt;\n</code></pre> View Failed Response <p>If you have a failed response, review the errors as it will point out how to resolve your particular issue in your XML payload and try again</p> <p> </p> Lesson: Execute an xCommand which generates data and responds <p>Info</p> <p>Some commands will generate data and output a response of that data. All commands will respond with an \"OK\" or \"Error\" but other can provide data.</p> <p>Whereas we just made a UI extension with the API, we can now pull a list of our custom extensions using the API</p> <ul> <li> <p>xAPI: xCommand UserInterface Extensions List</p> </li> <li> <p>Task: Structure the xAPI command above into an XML format then place this into the Body of the Execute an xCommand which generates data and responds request in your Postman collection. Include the following Parameters and Values</p> <ul> <li>ActivityType: Custom</li> </ul> </li> </ul> <p>Once the Postman Request has been updated, Save the request, select Send and review the Postman Terminal's repsonse and observe any changes to your device</p> View properly formatted XML and Successful Response <p></p> <pre><code>&lt;Command&gt;\n  &lt;UserInterface&gt;\n    &lt;Extensions&gt;\n      &lt;List&gt;\n        &lt;ActivityType&gt;Custom&lt;/ActivityType&gt;\n      &lt;/List&gt;\n    &lt;/Extensions&gt;\n  &lt;/UserInterface&gt;\n&lt;/Command&gt;\n</code></pre> View Failed Response <p>If you have a failed response, review the errors as it will point out how to resolve your particular issue in your XML payload and try again</p> <p> </p> Challenge: Open a Text Input Prompt! <ul> <li>Duplicate the Execute an xCommand request in Postman</li> <li>Replace the body of this request with a new body that implements xCommand UserInterface Message TextInput Display</li> <li>Set the Following Parameters [Keep them Safe for Work ]<ul> <li>Title</li> <li>Text</li> <li>Duration: [Set any value between 15 and 45]</li> </ul> </li> <li>Save and Execute</li> <li>Look at your Touch Controller, it should have a Text Input field </li> </ul> View a Successful Touch Controller ScreenShot <p> </p> <p>   Giving Up? Check out the Challenge Answers Page  </p>"},{"location":"wx1_1451_part_2/#234-setting-and-getting-xconfigurations","title":"2.3.4 - Setting and Getting xConfigurations","text":"<p>Abstract</p> <p>Throughout section 2.2.4, you'll continue to learn how to format XML payloads as you work to set new xConfigurations against the codec</p> <p>Unlike xCommands, you can then pull back the value of xConfigurations using a Get Request.</p> <p>The techniques outlined here will correspond to the methods needed for Getting xStatus Values in section 2.3.5</p> Lesson: Set a new xConfiguration Value <ul> <li> <p>xAPI: xConfiguration Audio DefaultVolume</p> </li> <li> <p>Task: Structure the xAPI command above into an XML format then place this into the Body of the Set a new xConfiguration Value request in your Postman collection. Set DefaultVolume to <code>75</code></p> </li> </ul> View properly formatted XML and Successful Response <p></p> <pre><code>&lt;Configuration&gt;\n  &lt;Audio&gt;\n    &lt;DefaultVolume&gt;75&lt;/DefaultVolume&gt;\n  &lt;/Audio&gt;\n&lt;/Configuration&gt;\n</code></pre> View Failed Response <p>If you have a failed response, review the errors as it will point out how to resolve your particular issue in your XML payload and try again</p> <p> </p> Lesson: Set multiple xConfiguration Values in a single Request <ul> <li> <p>xAPI(s): </p> <ul> <li>xConfiguration Audio DefaultVolume</li> <li>xConfiguration SystemUnit Name</li> </ul> </li> <li> <p>Task: </p> <ul> <li>We'll set the DefaultVolume back to 50, which will be preloaded into the Postman collection</li> <li>Your task is to structure the XML for xConfiguration SystemUnit Name and place it as the next xCommand in the XML structure given. Set the Name to <code>Codec_X</code> where X is the # of your workstation pod or your name</li> </ul> </li> </ul> View properly formatted XML and Successful Response <p></p> SystemUnit Name XMLFull XML Body <pre><code>&lt;Configuration&gt;\n  &lt;SystemUnit&gt;\n    &lt;Name&gt;Pod_X&lt;/Name&gt;\n  &lt;/SystemUnit&gt;\n&lt;/Configuration&gt;\n</code></pre> <pre><code>&lt;Configuration&gt;\n  &lt;Audio&gt;\n    &lt;DefaultVolume&gt;50&lt;/DefaultVolume&gt;\n  &lt;/Audio&gt;\n  &lt;!-- SystemUnit Name Should Start Here --&gt;\n  &lt;SystemUnit&gt;\n    &lt;Name&gt;Pod_X&lt;/Name&gt;\n  &lt;/SystemUnit&gt;\n  &lt;!-- SystemUnit Name Should End Here --&gt;\n&lt;/Configuration&gt;\n</code></pre> View Failed Response <p>If you have a failed response, review the errors as it will point out how to resolve your particular issue in your XML payload and try again</p> <p> </p> Lesson: Getting an xConfiguration Value <p>Info</p> <p>Up until this point, you've been making Post requests with an xAPI path provided as a part of the Post body written in XML format</p> <p>Whereas, we're pivoting to a Get rest, the format of the request changes. We no longer need a body, but we need to define the xAPI path as apart of the URL under it's location tag</p> <p>Refer to section 2.3.2 for a refresher on this syntax</p> <ul> <li> <p>xAPI: xConfiguration Audio DefaultVolume</p> </li> <li> <p>Structure the xAPI command above into the URL under the Getting an xConfiguration Value request in your Postman collection. This path should rest behind the ?location and separated by a <code>/</code></p> </li> </ul> View properly formatted URL and Successful Response <p></p> Audio DefaultVolume URL <p>https://{{device_ipAddress}}/getxml?location=Configuration/Audio/DefaultVolume</p> View Failed Response <p>Something to note on xConfig Get Requests, is you'll still get a 200 OK if your auth and IP are correct when talking to the Codec</p> <p>But a lack of response information can tell you that you may have a fault in your xAPI path in the URL</p> <p> What to expect for a bad path </p> <p> What to expect for a missing path </p> Lesson: Get multiple xConfiguration Values under a Common Node <p>Info</p> <p>You can pull more information if you move up to a Common Node</p> <p>By dropping <code>DefaultVolume</code> from xConfiguration Audio DefaultVolume we can grab all the Configuration Setting under the Audio Branch from the codec</p> <ul> <li> <p>xAPI: xConfiguration Audio</p> </li> <li> <p>Structure the xAPI command above into the URL under the Getting multiple xConfiguration Values under a Common Node request in your Postman collection.</p> </li> </ul> View properly formatted URL and Successful Response Audio DefaultVolume URL <p>https://{{device_ipAddress}}/getxml?location=Configuration/Audio</p> View Successful HTTP Response <pre><code>&lt;?xml version=\"1.0\"?&gt;\n&lt;Configuration product=\"Cisco Codec\" version=\"ce11.20.1.7.913a6c7c769\" apiVersion=\"4\"&gt;\n  &lt;Audio&gt;\n    &lt;DefaultVolume valueSpaceRef=\"/Valuespace/INT_0_100\"&gt;75&lt;/DefaultVolume&gt;\n    &lt;Ethernet&gt;\n      &lt;Encryption valueSpaceRef=\"/Valuespace/TTPAR_RequiredOptional\"&gt;Required&lt;/Encryption&gt;\n      &lt;SAPDiscovery&gt;\n        &lt;Address valueSpaceRef=\"/Valuespace/STR_0_64_IPv4AdminMcast\"&gt;239.255.255.255&lt;/Address&gt;\n        &lt;Mode valueSpaceRef=\"/Valuespace/TTPAR_OnOff\"&gt;Off&lt;/Mode&gt;\n      &lt;/SAPDiscovery&gt;\n    &lt;/Ethernet&gt;\n    &lt;!-- And the List Goes On... --&gt;\n  &lt;/Audio&gt;\n&lt;/Configuration&gt;\n</code></pre> View Failed Response <p>Something to note on xConfig Get Requests, is you'll still get a 200 OK if your auth and IP are correct when talking to the Codec</p> <p>But a lack of response information can tell you that you may have a fault in your xAPI path in the URL</p> <p> What to expect for a bad path </p> <p> What to expect for a missing path </p>  What about Subscribing to an xConfiguration? <p>Subscriptions via HTTP are possible, but require a process outside of using HTTP Post/Get commands. We'll need to leverage the HTTPFeedback feature of the codec and a tool that can receive a WebHook</p> <p>So we'll save HTTPFeedback for the end of section 2.3 and handle all HTTP based subscriptions there</p>"},{"location":"wx1_1451_part_2/#235-getting-xstatuses","title":"2.3.5 - Getting xStatuses","text":"Lesson: Getting an xStatus Value <ul> <li> <p>xAPI: xStatus Audio Volume</p> </li> <li> <p>Structure the xAPI command above into the URL under the Getting an xStatus request in your Postman collection.</p> </li> </ul> View properly formatted URL and Successful Response <p></p> Audio DefaultVolume URL <p>https://{{device_ipAddress}}/getxml?location=Status/Audio/Volume</p> View Failed Response <p>Something to note on xStatus Get Requests, is you'll still get a 200 OK if your auth and IP are correct when talking to the Codec</p> <p>But a lack of response information can tell you that you may have a fault in your xAPI path in the URL</p> <p> What to expect for a bad path </p> <p> What to expect for a missing path </p> Lesson: Get multiple xStatus Values under a Common Node <ul> <li> <p>xAPI: xStatus Audio</p> </li> <li> <p>Structure the xAPI command above into the URL under the Getting multiple xStatus Values under a Common Node request in your Postman collection.</p> </li> </ul> View properly formatted URL and Successful Response Audio DefaultVolume URL <p>https://{{device_ipAddress}}/getxml?location=Status/Audio</p> View Successful HTTP Response <pre><code>&lt;?xml version=\"1.0\"?&gt;\n&lt;Status product=\"Cisco Codec\" version=\"ce11.20.1.7.913a6c7c769\" apiVersion=\"4\"&gt;\n  &lt;Audio&gt;\n    &lt;Devices&gt;\n      &lt;Bluetooth&gt;\n        &lt;ActiveProfile&gt;None&lt;/ActiveProfile&gt;\n      &lt;/Bluetooth&gt;\n      &lt;HandsetUSB&gt;\n        &lt;ConnectionStatus&gt;NotConnected&lt;/ConnectionStatus&gt;\n        &lt;Cradle&gt;OnHook&lt;/Cradle&gt;\n      &lt;/HandsetUSB&gt;\n      &lt;HeadsetUSB&gt;\n        &lt;ConnectionStatus&gt;NotConnected&lt;/ConnectionStatus&gt;\n        &lt;Description&gt;&lt;/Description&gt;\n        &lt;Manufacturer&gt;&lt;/Manufacturer&gt;\n      &lt;!-- And the List Goes On... --&gt;\n  &lt;/Audio&gt;\n&lt;/Status&gt;\n</code></pre> View Failed Response <p>Something to note on xStatus Get Requests, is you'll still get a 200 OK if your auth and IP are correct when talking to the Codec</p> <p>But a lack of response information can tell you that you may have a fault in your xAPI path in the URL</p> <p> What to expect for a bad path </p> <p> What to expect for a missing path </p>"},{"location":"wx1_1451_part_2/#236-using-webhooks-to-subscribe-to-xconfigurations-xstatuses-and-xevents","title":"2.3.6 - Using WebHooks to subscribe to xConfigurations, xStatuses and xEvents","text":"<p>Important</p> <p>Your codec has a limit of 4 HTTPFeedback Slots with up to 15 xAPI paths expressions in the same command</p> xCommand References for Section: 2.3.6 <ul> <li> <p> xCommand HttpFeedback Register</p> <p>Register the device to an HTTP(S) server to return XML feedback over HTTP(S) to specific URLs.</p> <p>Parameters:</p> <p> ServerUrl [Required] FeedbackSlot [Required] Expression Format </p> <p>   Reference for xCommand HttpFeedback Register </p> </li> <li> <p> xCommand HttpFeedback Deregister</p> <p>Deregister the HTTP feedback over HTTP(S).</p> <p>Parameters:</p> <p> FeedbackSlot [Required] </p> <p>   Reference for xCommand HttpFeedback Deregister </p> </li> <li> <p> xCommand HttpFeedback Enable</p> <p>Re-enables a previously registered feedback slot after it has failed and become deactivated.</p> <p>Parameters:</p> <p> FeedbackSlot [Required] </p> <p>   Reference for xCommand HttpFeedback Enable </p> </li> </ul> Locate and Configure your Unique URL from Webhook.Site <ul> <li>Go to https://webhook.site</li> <li>Copy your Unique URL</li> <li>Open Postman<ul> <li>Click on the WX1-Lab:1451-HTTP-Postman-Collection root folder</li> <li>Select Variables</li> <li>Pase your unique URL into <code>Initial Value</code> and <code>Current Value</code> fields for WebhookSite_Unique_Url</li> <li>Select Save (or one of the keyboard shortcuts for your computer)<ul> <li>Ctrl+S for Windows</li> <li>Cmd+S for Mac</li> </ul> </li> </ul> </li> </ul> <p> </p> <p>Info</p> <p>For all Webhook Examples below, we'll need to register HTTPFeedback slot by first running</p> <p><code>xCommand HTTPFeedback Register</code></p> <p>These have been preformatted for you in the Postman collection</p> View Example WebHook.site output <p> </p> Lesson: Subscribe to the full xConfiguration Branch <ul> <li>Task:<ul> <li>In your Postman Collection under HTTP &gt; Section: 2.3.6</li> <li>Select the Subscribe to the full xConfiguration Branch request</li> <li>View how the body is Structured in the XML body</li> <li>Select Send</li> <li>Press the <code>Subscription Assistant Button</code> on your Touch Interface<ul> <li>Under the xConfigurations Page, press any of the buttons on this page</li> <li>Observe your Webhook.Site Terminal output, those responses you saw in the previous lesson should have stopped outputting in your Webhook.Site Terminal<ul> <li>Optional: Press those buttons and switches a few times to see more changes come in</li> </ul> </li> </ul> </li> </ul> </li> </ul> Lesson: Subscribe to the full xStatus Branch <ul> <li>Task:<ul> <li>In your Postman Collection under HTTP &gt; Section: 2.3.6</li> <li>Select the Subscribe to the full xStatus Branch request</li> <li>View how the body is Structured in the XML body</li> <li>Then select Send and Monitor the output on the Webhook.Site terminal<ul> <li>Your device will forward an event in the status branch soon</li> </ul> </li> <li>Press the <code>Subscription Assistant Button</code> on your Touch Interface<ul> <li>Under the xStatuses Page, press any of the buttons on this page</li> <li>Observe your Webhook.Site Terminal output, those responses you saw in the previous lesson should have stopped outputting in your Webhook.Site Terminal</li> </ul> </li> </ul> </li> </ul> Lesson: Subscribe to the full xEvent Branch <ul> <li>Task:<ul> <li>In your Postman Collection under HTTP &gt; Section: 2.3.6</li> <li>Select the Subscribe to the full xEvent Branch request</li> <li>View how the body is Structured in the XML body</li> <li>Then select Send and Monitor the output on the Webhook.Site terminal<ul> <li>Your device will forward an event in the event branch soon</li> </ul> </li> <li>Press the <code>Subscription Assistant Button</code> on your Touch Interface<ul> <li>Under the xEvents Page, press any of the buttons on this page</li> <li>Observe your Webhook.Site Terminal output, those responses you saw in the previous lesson should have stopped outputting in your Webhook.Site Terminal</li> </ul> </li> </ul> </li> </ul> Lesson: Subscribe to Specific Expressions on any Branch <ul> <li>Task:<ul> <li>In your Postman Collection under HTTP &gt; Section: 2.3.6</li> <li>Select the Subscribe to Specific Expressions on any Branch request</li> <li>View how the body is Structured in the XML body<ul> <li>Take Note, we've changed our Expression Parameter</li> <li>Rather than subscribing to All States, we instead narrow down what we're interested in</li> <li>For each expression we want to listen too, we will declare a new Expression Parameter</li> <li>We can have up to 15 Expressions defined in a single feedback slot</li> </ul> </li> <li>Then select Send and Monitor the output on the Webhook.Site terminal<ul> <li>You will need to interact with the system Volume and press the MultiLine Command [Section 2.3.3] Panel to see events pour into the WebHook.site terminal</li> </ul> </li> <li>Press the <code>Subscription Assistant Button</code> on your Touch Interface<ul> <li>Clicking on the <code>Subscription Assistant Button</code> will fire a Panel Event</li> <li>Under the xStatuses, move the Adjust Volume slider to generate events<ul> <li>Other buttons under xStatus won't take any effect</li> </ul> </li> <li>Under the xEvents Page, press any of the buttons on this page</li> <li>Observe your Webhook.Site Terminal output, those responses you saw in the previous lesson should have stopped outputting in your Webhook.Site Terminal</li> </ul> </li> </ul> </li> </ul>"},{"location":"wx1_1451_part_2/#237-section-23-cleanup","title":"2.3.7 - Section 2.3 Cleanup","text":"<p>Important</p> <ul> <li>Press the <code>Subscription Assistant Button</code> on your Touch Interface</li> <li>Under the Section Cleanup Page, select the Run Section Cleanup? button</li> <li>Select Yes, Run the Cleanup Script</li> </ul> <p> Section Cleanup Confirmation </p> <p>This will reverse the changes we've made to the endpoint, and leave us ready for the next section</p> You can run the cleanup via the terminal as well <p>Copy the contents below into your terminal window and run them all at once</p> Type into terminal and press Enter<pre><code>xConfig Audio DefaultVolume: 50\nxCommand UserInterface Extensions Panel Remove PanelId: wx1_lab_multilineCommand\nxCommand Video Selfview Set Mode: Off FullscreenMode: Off\nxCommand Video Input SetMainVideoSource ConnectorId: 1\nxCommand Audio Volume SetToDefault Device: Internal\nxCommand HTTPFeedBack Deregister FeedbackSlot: 1 FeedbackSlot: 2 FeedbackSlot: 3 FeedbackSlot: 4\n</code></pre>"},{"location":"wx1_1451_part_2/#section-24-accessing-the-xapi-via-websockets","title":"Section 2.4: Accessing the xAPI via WebSockets","text":"Under Construction - Feel Free to look, just not ready <p>Abstract</p> <p>WebSockets offer a way to enable real time communication over HTTP/HTTPS but allows for persistent communication, unlike an HTTP Post or Get request which briefly opens a socket and closes</p> <p>It's akin to our SSH, but differs in format, execution, network port and protocol for communication</p> <p>       Learn more about our WebSocket xAPI </p> <p>Section Requirements</p> <p>Unfortunately, we can't provide a WebSocket collection in Postman, as that not a collection type we can export</p> <p>However, you can still use Postman to setup WebSocket requests in Postman</p> <p>For the interest of time, please skip section 2.4, should you have time, please due follow along, we'll briefly cover how to make a WebSocket Request in Postman, just know you'll need to</p> <ul> <li>Instantiate a Postman Collection</li> <li>Assign Variables to your Collection</li> <li>Structure each Request in Full</li> </ul>"},{"location":"wx1_1451_part_2/#241-websocket-authentication-and-format","title":"2.4.1 - WebSocket Authentication and Format","text":"<p>URL Structure</p> <p>The request URL for your Codec will change depending on whether you're making a WebSocket or Secure WebSocket Connection</p> WebSocket [ws]Secure WebSocket [wss] <p>ws://[YOUR_DEVICE_IP]/ws</p> <p>wss://[YOUR_DEVICE_IP]/ws</p> <p>Authentication Format</p> <p>The Codec uses basic authentication to accept incoming requests. This authentication is formatted in base64 with it's username and password concatenated as a single string separated by a colon :</p> <p>Click on the tabs below to see how an example Username and Password transitions to base64</p> Base Credentials &gt;Decoded String &gt;Base64 Encoded String &gt;Authorization Request HeaderSec-WebSocket-Protocol Request Header <p>Username: admin Password: admin1234</p> <p>admin:admin1234 </p> <p>YWRtaW46YWRtaW4xMjM0 </p> <p>\"Authorization\": \"Basic YWRtaW46YWRtaW4xMjM0\"  </p> <p>\"Sec-WebSocket-Protocol\": \"auth-YWRtaW46YWRtaW4xMjM0\"  </p> <p>Request Headers</p> <p>Your WebSockets will use either the <code>Authorization</code> or <code>Sec-WebSocket-Protocol</code> as it's sole header</p> <p> Key Value Use Case <code>Authorization</code> <code>Basic [YOUR_BASE64_ENCODED_AUTH]</code> Focused on authentication, ensuring the client is allowed to connect. <code>Sec-WebSocket-Protocol</code> <code>auth-[YOUR_BASE64_ENCODED_AUTH]</code> Focused on defining the protocol for the communication after the connection is established. This method is required for browser-based clients. </p> <p>Body Format</p> <p>All WebSocket messages are formatted in JSON. They require the following Objects to be successful</p> Object Value Description IsRequired jsonrpc \"2.0\" The JSON RPC Version Yes id String/Integer An identifier of this request. The server must reply with the same value in the Response object. Yes method String A String containing the name of the method to be invoked. For example \"xGet\", \"xQuery\", \"xCommand/[Path]\" or \"xSet\". Yes params Nest Objects An Object that holds the parameter values to be used during the invocation of the method. The Object must have member names that match the names that the server expects. Yes <p>Review Websocket Message Structure Examples and Responses</p> xCommand/[Path]xGet [xStatus/xConfiguration]xQuery [xStatus/xConfiguration]xSet [xConfiguration]xFeedback [xStatus/xConfiguration/xEvent] <p>xCommand Paths follow the xCommand method in the <code>method</code> object, separated by forward slash ( / )</p> <p>Parameters for the xCommand are defined as individual objects under the <code>params</code> object written in JSON format</p> Request Response Error Response  <pre><code>{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 111,\n  \"method\": \"xCommand/Dial\",\n  \"params\": {\n    \"Number\": \"bobby@example.com\",\n    \"Protocol\": \"Spark\"\n  }\n}\n</code></pre> <pre><code>{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 111,\n  \"result\": { // &lt;-- This is the Value for your request\n  \"CallId\": 2,\n  \"ConferenceId\": 1\n  }\n}\n</code></pre> <pre><code>{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 111,\n  \"error\": {\n    \"code\": 1,\n      \"data\": {\n      \"Cause\": 21\n    },\n    \"message\": \"Not paired with isdn link\"\n  }\n}\n</code></pre> <p><code>xStatus</code> and <code>xConfiguration</code> branches can make use of the xGet method. Unlike Commands, the xAPI path is provided in the params object under a Path object and is structured as an Array</p> Request Response  <pre><code>{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 102,\n  \"method\": \"xGet\",\n  \"params\": {\n    \"Path\": [\"Configuration\", \"SystemUnit\", \"Name\"]\n  }\n}   \n</code></pre> <pre><code>{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 102,\n  \"result\": \"my-device\" // &lt;-- This is the Value for your request\n}\n</code></pre> <p><code>xStatus</code> and <code>xConfiguration</code> branches can make use of the xQuery method. xQuery is formatted and functions largely like the xGet method</p> <p>Note the difference between <code>xQuery</code> and <code>xGet</code></p> <ul> <li>The response to xQuery always starts from the top node, i.e. \"Status\" or \"Configuration\".</li> <li>The response to xGet starts relative to the path given in the \"Query\".</li> <li>xQuery can also implement Wildcards (<code>**</code>) in it's path, which matches zero or more levels in the path.</li> </ul> Request Response  <pre><code>{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 105,\n  \"method\": \"xQuery\",\n  \"params\": {\n    \"Query\": [\"Status\", \"**\", \"DisplayName\"] \n  }\n}\n</code></pre> <pre><code>{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 105,\n  \"result\": { // &lt;-- This is the Value for your request\n    \"Status\": {\n      \"SIP\": {\n        \"CallForward\": {\n          \"DisplayName\": \"Room Bar Pro\"\n        }\n      },\n      \"SystemUnit\": {\n        \"Software\": {\n          \"DisplayName\": \"RoomOS 11.20...\"\n        }\n      }\n    }\n  }\n}\n</code></pre> Request Response  <pre><code>{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 110,\n  \"method\": \"xSet\",\n  \"params\": {\n    \"Path\": [\"Configuration\",\"SystemUnit\",\"Name\"],\n    \"Value\": \"My New System Name\"\n  }\n}\n</code></pre> <pre><code>{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 110,\n  \"result\": true // &lt;-- This is the Value for your request\n}\n</code></pre> <p>xFeedback, or Subscriptions, have 2 Id objects within the life of it's process. When sending any message, you will assign an <code>id</code> and get an initial response containing that same <code>id</code>. But when you subscribe, it will contain an additional Id in it's results object which corresponds to this specific subscription. All notifications after the initial response from this subscription will contain the Subscription Id not the initial message <code>id</code>. This is important, as you may have multiple or similar subscriptions you may want to instantiate and handle separately as you develop your solution.</p> Subscribe Request Initial Response Notification Response Unsubscribe Request  <pre><code>{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 113, // &lt;-- This is the Message id\n  \"method\": \"xFeedback/Subscribe\",\n  \"params\": {\n    \"Query\": [\"Status\", \"Video\", \"Selfview\"],\n    \"NotifyCurrentValue\": true // &lt;-- When true, will respond with additional notifications\n  }\n}\n</code></pre> <pre><code>{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 113,\n  \"result\": { // &lt;-- This is the Value for your request\n    \"Id\": 1 // &lt;-- This is the Subscription Id of the new feedback registration. Use this Subscription Id to map incoming notifications to the initial subscription request, or to unsubscribe from this data\n  }\n}\n</code></pre> <pre><code>{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"xFeedback/Event\",\n  \"params\": {\n    \"Id\": 1, // &lt;-- This is the Subscription Id of the feedback registration.\n    \"Status\": {\n      \"Video\": {\n        \"Selfview\": {\n          \"FullscreenMode\": \"Off\",\n          \"Mode\": \"Off\",\n          \"OnMonitorRole\": \"First\",\n          \"PIPPosition\": \"CenterRight\"\n        }\n      }\n    }\n  }\n}\n</code></pre> <pre><code>{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 113, // &lt;-- This is the Message id\n  \"method\": \"xFeedback/Subscribe\",\n  \"params\": {\n    \"Id\": 1, // &lt;-- This is the Subscription Id of the initial feedback registration.\n  }\n}\n</code></pre> Subscription Visual Flow <pre><code>sequenceDiagram\n    participant My Customization\n    participant Target Codec\n    My Customization&lt;&lt;--&gt;&gt;Target Codec: Websocket Connection\n    Note over My Customization,Target Codec: Register Subscription\n    My Customization-&gt;&gt;+Target Codec: xFeedback/Subscribe [Message `id`#58; 101]\n    Target Codec -&gt;&gt; My Customization: Acknowledges Message `id`#58; 101&lt;br&gt;[Provides Subscription `Id`#58; 1]\n    Note over My Customization,Target Codec: Incoming Events\n    Target Codec --&gt;&gt;+ My Customization: &lt;br&gt; Event Payload. Contains [Subscription `Id`#58; 1]\n    Target Codec --&gt;&gt; My Customization: &lt;br&gt; Event Payload. [Subscription `Id`#58; 1]\n    Target Codec --&gt;&gt;- My Customization: &lt;br&gt; ........... [Subscription `Id`#58; 1]\n    Note over My Customization,Target Codec: Deregister Subscription\n    My Customization-&gt;&gt;-Target Codec: xFeedback/Unsubscribe &lt;br&gt;Provide Subscription [`Id`#58; 1] NOT Message [`id`#58; 101] as param&lt;br&gt;[Subscription `Id`#58; 1]</code></pre> <p>Full Websocket examples</p> Click to view a Full Example of each written using NodeJs [Javascript Backend] <pre><code>const WebSocket = require('ws');\n\n// Base64 encode your username and password for Basic Auth\nconst username = 'admin';\nconst password = 'admin1234';\nconst ipAddress = 'X.X.X.X';\nconst encoded_auth = Buffer.from(`${username}:${password}`).toString('base64')\n  .replace(/\\+/g, '-')\n  .replace(/\\//g, '_')\n  .replace(/=+/g, '');\n\n// Define the subprotocol including custom authentication\nconst subprotocols = [`auth-${encoded_auth}`];\n\n// Create a WebSocket connection, requesting the subprotocols\nconst socket = new WebSocket(`wss://${ipAddress}/ws`, subprotocols, {\n  rejectUnauthorized: false\n});\n\nsocket.on('open', () =&gt; {\n  console.log('WebSocket established against Codec');\n\n  // Structure your xAPI message to send\n  const message = {\n    \"jsonrpc\": \"2.0\",\n    \"id\": \"xStatus SystemUnit Uptime\",\n    \"method\": \"xGet\",\n    \"params\": {\n      \"Path\": [\"Status\", \"SystemUnit\", \"Uptime\"]\n    }\n  };\n\n  // Send the JSON message as a string\n  socket.send(JSON.stringify(message));\n});\n\nsocket.on('message', (message) =&gt; {\n  try {\n    const data = JSON.parse(message);\n    console.log('Parsed response:', data);\n\n    socket.close();\n  } catch (error) {\n    console.error('Error parsing JSON:', error);\n  }\n});\n\nsocket.on('error', (error) =&gt; {\n  console.error('WebSocket error observed:', error);\n  socket.close();\n});\n\nsocket.on('close', (event) =&gt; {\n  console.log('WebSocket connection closed:', event);\n});\n</code></pre> Click to view a Full Example of each written using the Python websocket-client API <pre><code>import websocket\nimport json\nimport base64\n\n# Base64 encode your username and password for Basic Auth\nusername = 'admin'\npassword = 'admin1234'\nip_address = 'X.X.X.X'  # Replace with your actual IP address\nencoded_auth = base64.b64encode(f\"{username}:{password}\".encode()).decode()\nencoded_auth = encoded_auth.replace('+', '-').replace('/', '_').replace('=', '')\n\n# Define the subprotocol including custom authentication\nsubprotocols = f\"auth-{encoded_auth}\"\n\n# Define the WebSocket URL\nws_url = f\"wss://{ip_address}/ws\"\n\n# Define the on_open event\ndef on_open(ws):\n    print(\"WebSocket established against Codec\")\n\n    # Structure your xAPI message to send\n    message = {\n        \"jsonrpc\": \"2.0\",\n        \"id\": \"xStatus Systemunit Uptime\",\n        \"method\": \"xGet\",\n        \"params\": {\n            \"Path\": [\"Status\", \"SystemUnit\", \"Uptime\"]\n        }\n    }\n\n    # Send the JSON message as a string\n    ws.send(json.dumps(message))\n\n# Define the on_message event\ndef on_message(ws, message):\n    try:\n        data = json.loads(message)\n        print(\"Parsed response:\", data)\n\n        # Close the WebSocket after receiving the message\n        ws.close()\n    except json.JSONDecodeError as error:\n        print(\"Error parsing JSON:\", error)\n\n# Define the on_error event\ndef on_error(ws, error):\n    print(\"WebSocket error observed:\", error)\n    ws.close()\n\n# Define the on_close event\ndef on_close(ws, close_status_code, close_msg):\n    print(\"WebSocket connection closed:\", close_msg)\n\n# Create the WebSocket application\nws = websocket.WebSocketApp(ws_url,\n                            subprotocols=[subprotocols],\n                            on_open=on_open,\n                            on_message=on_message,\n                            on_error=on_error,\n                            on_close=on_close)\n\n# Allow self-signed certificates\nws.run_forever(sslopt={\"cert_reqs\": 0})\n</code></pre>"},{"location":"wx1_1451_part_2/#242-create-and-configure-postman-collection","title":"2.4.2 - Create and Configure Postman Collection","text":"Create New Collection Folder Create Collection Variables Create New Request"},{"location":"wx1_1451_part_2/#243-executing-xcommands","title":"2.4.3 - Executing xCommands","text":"Lesson: Execute an xCommand <p>Message Body Location</p> <p> </p> <ul> <li> <p>xAPI: xCommand Video Selfview Set</p> </li> <li> <p>Task: </p> <ul> <li>Assign the correct Method to the <code>method</code> object for xCommands</li> <li>Fill in the <code>params</code> object using the following parameters<ul> <li>Mode: On</li> <li>FullScreenMode: On</li> <li>OnMonitorRole: First</li> </ul> </li> </ul> </li> <li> <p>Once the Message body has been updated</p> <ul> <li>Save the request</li> <li>Select Connect to establish the WebSocket connection to the Codec</li> <li>select Send and review the Postman Terminal's repsonse and observe any changes to your device</li> </ul> </li> <li> <p>When you've finished this lesson, select Disconnect to terminate the WebSocket connection</p> </li> </ul> Need Help with the Syntax? <p>   Open the Websocket Method and Parameter Table in the CheatSheet  </p> View properly formatted Message and Successful Response Message Body <code>JSON</code>Response Body <pre><code>{\n  \"jsonrpc\": \"2.0\",\n  \"id\": \"Execute an xCommand\",\n  \"method\": \"xCommand/Video/Selfview/Set\",\n  \"params\": {\n    \"Mode\": \"On\",\n    \"FullScreenMode\": \"On\",\n    \"OnMonitorRole\":\"First\"\n  }\n}\n</code></pre> <pre><code>{\n  \"id\": \"Execute an xCommand\",\n  \"jsonrpc\": \"2.0\",\n  \"result\": { // &lt;-- This is the Value for your request\n    \"status\": \"OK\"\n  }\n}\n</code></pre> Lesson: Execute an xCommand with multiple arguments with the same name <p>In cases where we need to declare multiple arguments of the same name, rather than duplicating and re-running the parameters, we instead leverage an Array in place of the value, containing all values we want to implement under that Parameter</p> <p>   Learn more about Arrays </p> <p>Click on the tabs to see how Terminal Syntax relates to WebSocket Syntax</p> Terminal SyntaxWebSocket Syntax <pre><code>xParent Child ChildParam_X: 1, ChildParam_X: 2\n</code></pre> Body<pre><code>{\n  \"jsonrpc\": \"2.0\",\n  \"id\": \"Example Syntax\",\n  \"method\": \"xParent/Child\",\n  \"params\": {\n    \"ChildParam_X\": [1, 1]\n  }\n}\n</code></pre> <ul> <li> <p>xAPI: xCommand Video Input SetMainVideoSource</p> </li> <li> <p>Task: </p> <ul> <li>Assign the correct Method to the <code>method</code> object for xCommands</li> <li>Fill in the <code>params</code> object using the following parameters, but duplicate the ConnectorId<ul> <li>ConnectorId: 1</li> <li>Layout: Equal</li> </ul> </li> </ul> </li> <li> <p>Once the Message body has been updated</p> <ul> <li>Save the request</li> <li>Select Connect to establish the WebSocket connection to the Codec</li> <li>select Send and review the Postman Terminal's repsonse and observe any changes to your device</li> </ul> </li> <li> <p>When you've finished this lesson, select Disconnect to terminate the WebSocket connection</p> </li> </ul> View Successful OSD Output <p> </p> View properly formatted Message and Successful Response Message Body <code>JSON</code>Response Body <pre><code>{\n  \"jsonrpc\": \"2.0\",\n  \"id\": \"Execute an xCommand with multiple arguments with the same name\",\n  \"method\": \"xCommand/Video/Input/SetMainVideoSource\",\n  \"params\": {\n    \"ConnectorId\": [1, 1],\n    \"Layout\":\"Equal\"\n  }\n}\n</code></pre> <pre><code>{\n  \"id\": \"Execute an xCommand with multiple arguments with the same name\",\n  \"jsonrpc\": \"2.0\",\n  \"result\": { // &lt;-- This is the Value for your request\n    \"status\": \"OK\"\n  }\n}\n</code></pre> Lesson: Execute an xCommand with a multiline argument <p>Info</p> <p>Multiline Arguments can be placed into the <code>params</code> object as well. This specifically uses a <code>body</code> object which will contain your multi-line argument.</p> <p>The structure of a Multiline argument should look similar to the following</p> <p>Click on the tabs to see how Terminal Syntax relates to WebSocket Syntax</p> Terminal SyntaxWebSocket Syntax <pre><code>[xParent Child ChildParam_X: SomeValue]\n[Multi Line Content]\n.\n</code></pre> Body<pre><code>{\n  \"jsonrpc\": \"2.0\",\n  \"id\": \"Example Syntax\",\n  \"method\": \"xParent/Child\",\n  \"params\": {\n    \"ChildParam_X\": \"SomeValue\",\n    \"body\": \"Multi Line Content\"\n  }\n}\n</code></pre> <p>Note</p> <p>Your Selfview may still be open</p> <p>Run the following in your terminal window to close selfview</p> <pre><code>xCommand Video Selfview Set Mode: Off\n</code></pre> Challenge: Alter <code>Execute an xCommand</code> in your WebSocket Postman Collection <p>Rather than re-open your terminal session, you can go back to <code>Execute an xCommand</code> in your WebSocket Postman Collection, and update the <code>params</code> object to set the Mode parameter to Off</p> <p>     Giving Up? Check out the Challenge Answers Page  </p> <ul> <li> <p>xAPI: xCommand UserInterface Extensions Panel Save</p> </li> <li> <p>Task: </p> <ul> <li>Assign the correct Method to the <code>method</code> object for xCommands</li> <li>Fill in the <code>params</code> object using the following parameters<ul> <li>PanelId: wx1_lab_multilineCommand</li> <li>body:       Your &lt;body&gt; Value<pre><code>&lt;Extensions&gt;\n  &lt;Panel&gt;\n    &lt;Order&gt;1&lt;/Order&gt;\n    &lt;PanelId&gt;wx1_lab_multilineCommand&lt;/PanelId&gt;\n    &lt;Location&gt;HomeScreen&lt;/Location&gt;\n    &lt;Icon&gt;Info&lt;/Icon&gt;\n    &lt;Color&gt;#FF70CF&lt;/Color&gt;\n    &lt;Name&gt;MultiLine Command [Section 2.4.3]&lt;/Name&gt;\n    &lt;ActivityType&gt;Custom&lt;/ActivityType&gt;\n  &lt;/Panel&gt;\n&lt;/Extensions&gt;\n</code></pre></li> </ul> </li> </ul> </li> <li> <p>Once the Message body has been updated</p> <ul> <li>Save the request</li> <li>Select Connect to establish the WebSocket connection to the Codec</li> <li>select Send and review the Postman Terminal's repsonse and observe any changes to your device</li> </ul> </li> <li> <p>When you've finished this lesson, select Disconnect to terminate the WebSocket connection</p> </li> </ul> View Successful OSD Output <p> What to expect on your OSD on a successful request </p> View properly formatted Message and Successful Response Message Body <code>JSON</code>Response Body <pre><code>{\n  \"jsonrpc\": \"2.0\",\n  \"id\": \"Execute an xCommand with a multiline argument\",\n  \"method\": \"xCommand/UserInterface/Extensions/Panel/Save\",\n  \"params\": {\n    \"PanelId\": \"wx1_lab_multilineCommand\",\n    \"body\":\"&lt;Extensions&gt; &lt;Panel&gt; &lt;Order&gt;1&lt;/Order&gt; &lt;PanelId&gt;wx1_lab_multilineCommand&lt;/PanelId&gt; &lt;Location&gt;HomeScreen&lt;/Location&gt; &lt;Icon&gt;Info&lt;/Icon&gt; &lt;Color&gt;#FFCC00&lt;/Color&gt; &lt;Name&gt;MultiLine Command [Section 2.4.3]&lt;/Name&gt; &lt;ActivityType&gt;Custom&lt;/ActivityType&gt; &lt;/Panel&gt; &lt;/Extensions&gt;\"\n  }\n}\n</code></pre> <pre><code>{\n  \"id\": \"Execute an xCommand with a multiline argument\",\n  \"jsonrpc\": \"2.0\",\n  \"result\": { // &lt;-- This is the Value for your request\n    \"status\": \"OK\"\n  }\n}\n</code></pre> Lesson: Execute an xCommand which generates data and responds <ul> <li> <p>xAPI: xCommand UserInterface Extensions List</p> </li> <li> <p>Task: </p> <ul> <li>Assign the correct Method to the <code>method</code> object for xCommands</li> <li>Fill in the <code>params</code> object using the following parameters<ul> <li>ActivityType: Custom</li> </ul> </li> </ul> </li> <li> <p>Once the Message body has been updated</p> <ul> <li>Save the request</li> <li>Select Connect to establish the WebSocket connection to the Codec</li> <li>select Send and review the Postman Terminal's repsonse and observe any changes to your device</li> </ul> </li> <li> <p>When you've finished this lesson, select Disconnect to terminate the WebSocket connection</p> </li> </ul> View properly formatted Message and Successful Response Message BodyResponse Body <pre><code>{\n  \"jsonrpc\": \"2.0\",\n  \"id\": \"Execute an xCommand with a multiline argument\",\n  \"method\": \"xCommand/UserInterface/Extensions/List\",\n  \"params\": {\n    \"ActivityType\": \"Custom\"\n  }\n}\n</code></pre> <pre><code>{\n  \"id\": \"Execute an xCommand with a multiline argument\",\n  \"jsonrpc\": \"2.0\",\n  \"result\": { // &lt;-- This is the Value for your request\n    \"Extensions\": {\n      \"Panel\": [\n        {\n          \"ActivityType\": \"Custom\",\n          \"Color\": \"#FFCC00\",\n          \"Icon\": \"Info\",\n          \"Location\": \"HomeScreen\",\n          \"Name\": \"MultiLine Command [Section 2.4.3]\",\n          \"Order\": 1,\n          \"Origin\": \"local\",\n          \"PanelId\": \"wx1_lab_multilineCommand\",\n          \"Visibility\": \"Auto\",\n          \"id\": 1\n        }\n      ],\n      \"Version\": \"1.11\"\n    },\n    \"status\": \"OK\"\n  }\n}\n</code></pre>"},{"location":"wx1_1451_part_2/#244-getting-setting-and-subscribing-to-xconfigurations","title":"2.4.4 - Getting, Setting and Subscribing to xConfigurations","text":"Lesson: Set a new xConfiguration Value <p>Message Body Location</p> <p> </p> <ul> <li> <p>xAPI: xConfiguration Audio DefaultVolume</p> </li> <li> <p>Task: </p> <ul> <li>Assign the correct Method to the <code>method</code> object for setting xConfigurations</li> <li> <p>Within the <code>params</code> object, fill in the <code>Path</code> object using the xAPI above and place it's new Configuration Value in the <code>Value</code> object</p> </li> <li> <p>Once the Message body has been updated</p> <ul> <li>Save the request</li> <li>Select Connect to establish the WebSocket connection to the Codec</li> <li>select Send and review the Postman Terminal's repsonse</li> </ul> </li> </ul> </li> <li> <p>When you've finished this lesson, select Disconnect to terminate the WebSocket connection</p> </li> </ul> Need Help with the Syntax? <p>   Open the Websocket Method and Parameter Table in the CheatSheet  </p> View properly formatted Message and Successful Response Message Body <code>JSON</code>Response Body <pre><code>{\n  \"jsonrpc\": \"2.0\",\n  \"id\": \"Set a new xConfiguration Value\",\n  \"method\": \"xSet\",\n  \"params\": {\n    \"Path\": [\"Configuration\", \"Audio\", \"DefaultVolume\"],\n    \"Value\": 75\n  }\n}\n</code></pre> <pre><code>{\n  \"id\": \"Set a new xConfiguration Value\",\n  \"jsonrpc\": \"2.0\",\n  \"result\": true // &lt;-- This is the Value for your request\n}\n</code></pre> Lesson: Getting an xConfiguration Value <ul> <li> <p>xAPI: xConfiguration Audio DefaultVolume</p> </li> <li> <p>Task: </p> <ul> <li>Assign the correct Method to the <code>method</code> object for setting xConfigurations</li> <li>Within the <code>params</code> object, fill in the <code>Path</code> object using the xAPI above</li> </ul> </li> <li> <p>Once the Message body has been updated</p> <ul> <li>Save the request</li> <li>Select Connect to establish the WebSocket connection to the Codec</li> <li>select Send and review the Postman Terminal's repsonse</li> </ul> </li> <li> <p>When you've finished this lesson, select Disconnect to terminate the WebSocket connection</p> </li> </ul> View properly formatted Message and Successful Response Message Body <code>JSON</code>Response Body <pre><code>{\n  \"jsonrpc\": \"2.0\",\n  \"id\": \"Getting an xConfiguration Value\",\n  \"method\": \"xGet\",\n  \"params\": {\n    \"Path\": [\"Configuration\", \"Audio\", \"DefaultVolume\"]\n  }\n}\n</code></pre> <pre><code>{\n  \"id\": \"Getting an xConfiguration Value\",\n  \"jsonrpc\": \"2.0\",\n  \"result\": 75 // &lt;-- This is the Value for your request\n}\n</code></pre> Lesson: Get multiple xConfiguration Values under a Common Node <ul> <li> <p>xAPI: xConfiguration Audio</p> </li> <li> <p>Task: </p> <ul> <li>Assign the correct Method to the <code>method</code> object for setting xConfigurations</li> <li>Within the <code>params</code> object, fill in the <code>Path</code> object using the xAPI above</li> </ul> </li> <li> <p>Once the Message body has been updated</p> <ul> <li>Save the request</li> <li>Select Connect to establish the WebSocket connection to the Codec</li> <li>select Send and review the Postman Terminal's repsonse</li> </ul> </li> <li> <p>When you've finished this lesson, select Disconnect to terminate the WebSocket connection</p> </li> </ul> View properly formatted Message and Successful Response Message Body <code>JSON</code>Response Body <pre><code>{\n  \"jsonrpc\": \"2.0\",\n  \"id\": \"Get multiple xConfiguration Values under a Common Node\",\n  \"method\": \"xGet\",\n  \"params\": {\n    \"Path\": [\"Configuration\", \"Audio\"]\n  }\n}\n</code></pre> <pre><code>{\n  \"id\": \"Get multiple xConfiguration Values under a Common Node\",\n  \"jsonrpc\": \"2.0\",\n  \"result\": { // &lt;-- This is the Value for your request\n    \"DefaultVolume\": 75,\n    \"Input\": {\n      \"Microphone\": [\n        {\n          \"Mode\": \"On\",\n          \"Zone\": 1,\n          \"id\": 1\n        },\n        {\n          \"EchoControl\": {\n            \"Mode\": \"On\",\n            \"NoiseReduction\": \"On\"\n          },\n          \"Gain\": 20,\n          \"Mode\": \"On\",\n          \"Zone\": 1,\n          \"id\": 2\n        },\n        {\n          \"EchoControl\": {\n            \"Mode\": \"On\",\n            \"NoiseReduction\": \"On\"\n          },\n          \"Gain\": 20,\n          \"Mode\": \"On\",\n          \"Zone\": 1,\n          \"id\": 3\n        }\n      ],\n      \"USBC\": [\n        {\n          \"Gain\": -5,\n          \"Mode\": \"On\",\n          \"VideoAssociation\": {\n            \"MuteOnInactiveVideo\": \"On\"\n          },\n          \"id\": 1\n        }\n      ],\n      \"USBMicrophone\": [\n        {\n          \"EchoControl\": {\n            \"Mode\": \"On\"\n          },\n          \"Gain\": 5,\n          \"Zone\": 1,\n          \"id\": 1\n        }\n      ]\n    },\n    \"Microphones\": {\n      \"BeamMix\": {\n        \"Inputs\": \"Auto\"\n      },\n      \"Mute\": {\n        \"Enabled\": \"True\"\n      },\n      \"NearTalkerSector\": {\n        \"Mode\": \"Off\"\n      },\n      \"NoiseRemoval\": {\n        \"Mode\": \"Enabled\"\n      },\n      \"PhantomPower\": \"On\",\n      \"UsbPassthrough\": {\n        \"MuteButton\": \"Active\"\n      },\n      \"VoiceActivityDetector\": {\n        \"Mode\": \"Off\"\n      }\n    },\n    \"Output\": {\n      \"InternalSpeaker\": {\n        \"Mode\": \"On\"\n      },\n      \"Line\": [\n        {\n          \"Mode\": \"On\",\n          \"OutputType\": \"Loudspeaker\",\n          \"id\": 1\n        }\n      ]\n    },\n    \"Panning\": {\n      \"Mode\": \"Auto\"\n    },\n    \"Placement\": \"Wallmount\",\n    \"SoundsAndAlerts\": {\n      \"RingTone\": \"Sunrise\",\n      \"RingVolume\": 50\n    },\n  }\n}\n</code></pre> Lesson: Query an xConfiguration Value <ul> <li> <p>xAPI: xConfiguration SystemUnit Name</p> </li> <li> <p>Task: </p> <ul> <li>Assign the correct Method to the <code>method</code> object for setting xConfigurations</li> <li>Within the <code>params</code> object, fill in the <code>Query</code> object using the xAPI above</li> </ul> </li> <li> <p>Once the Message body has been updated</p> <ul> <li>Save the request</li> <li>Select Connect to establish the WebSocket connection to the Codec</li> <li>select Send and review the Postman Terminal's repsonse</li> </ul> </li> <li> <p>When you've finished this lesson, select Disconnect to terminate the WebSocket connection</p> </li> </ul> View properly formatted Message and Successful Response Message Body <code>JSON</code>Response Body <pre><code>{\n  \"jsonrpc\": \"2.0\",\n  \"id\": \"Query an xConfiguration Value\",\n  \"method\": \"xQuery\",\n  \"params\": {\n    \"Query\": [\"Configuration\", \"SystemUnit\", \"Name\"]\n  }\n}\n</code></pre> <pre><code>{\n  \"id\": \"Query an xConfiguration Value\",\n  \"jsonrpc\": \"2.0\",\n  \"result\": { // &lt;-- This is the Value for your request\n    \"Configuration\": {\n      \"SystemUnit\": {\n        \"Name\": \"Room Bar Pro\"\n      }\n    }\n  }\n}\n</code></pre> Lesson: Query an xConfiguration Value using a WildCard <p>Info</p> <p>When forming an xQuery Message, you can use <code>**</code> as a wildcard value within the path of the xAPI. This will return any matching nodes following <code>**</code> similar to the role of <code>//</code> in an SSH session.</p> <ul> <li> <p>xAPI: xConfiguration ** Name</p> </li> <li> <p>Task: </p> <ul> <li>Assign the correct Method to the <code>method</code> object for setting xConfigurations</li> <li> <p>Within the <code>params</code> object, fill in the <code>Query</code> object using the xAPI above. Be sure to treat <code>**</code> as a separate entity in the xAPI Path.</p> </li> <li> <p>Once the Message body has been updated</p> <ul> <li>Save the request</li> <li>Select Connect to establish the WebSocket connection to the Codec</li> <li>select Send and review the Postman Terminal's repsonse</li> </ul> </li> <li> <p>When you've finished this lesson, select Disconnect to terminate the WebSocket connection</p> </li> </ul> </li> </ul> View properly formatted Message and Successful Response Message Body <code>JSON</code>Response Body <pre><code>{\n  \"jsonrpc\": \"2.0\",\n  \"id\": \"Query an xConfiguration Value using a WildCard\",\n  \"method\": \"xQuery\",\n  \"params\": {\n    \"Query\": [\"Configuration\", \"**\", \"Name\"]\n  }\n}\n</code></pre> <pre><code>{\n  \"id\": \"Query an xConfiguration Value using a WildCard\",\n  \"jsonrpc\": \"2.0\",\n  \"result\": { // &lt;-- This is the Value for your request\n    \"Configuration\": {\n      \"FacilityService\": {\n        \"Service\": [\n          {\n            \"Name\": \"Live Support\",\n            \"id\": 1\n          },\n          {\n            \"Name\": \"\",\n            \"id\": 2\n          },\n          {\n            \"Name\": \"\",\n            \"id\": 3\n          },\n          {\n            \"Name\": \"\",\n            \"id\": 4\n          },\n          {\n            \"Name\": \"\",\n            \"id\": 5\n          }\n        ]\n      },\n      \"Network\": [\n        {\n          \"DNS\": {\n            \"Domain\": {\n              \"Name\": \"\"\n            }\n          },\n          \"id\": 1\n        }\n      ],\n      \"SystemUnit\": {\n        \"Name\": \"Room Bar Pro\"\n      },\n      \"UserInterface\": {\n        \"Theme\": {\n          \"Name\": \"Night\"\n        }\n      },\n      \"Video\": {\n        \"Input\": {\n          \"Connector\": [\n            {\n              \"Name\": \"Camera\",\n              \"id\": 1\n            },\n            {\n              \"Name\": \"PC (HDMI)\",\n              \"id\": 2\n            },\n            {\n              \"Name\": \"PC (USB-C)\",\n              \"id\": 3\n            }\n          ]\n        }\n      }\n    }\n  }\n}\n</code></pre> Lesson: Subscribe and Unsubscribe to an xConfiguration <ul> <li> <p>xAPI: xConfiguration Audio DefaultVolume</p> </li> <li> <p>Task: </p> <ul> <li> <p>Subscribe</p> <ul> <li>Assign the correct Method to the <code>method</code> object in order to Subscribe to an xConfiguration</li> <li> <p>Within the <code>params</code> object, fill in the <code>Query</code> object using the xAPI above</p> </li> <li> <p>Once the Message body has been updated</p> <ul> <li>Save the request</li> <li>Select Connect to establish the WebSocket connection to the Codec</li> <li>Select Send</li> <li>Observe the Initial Response in the Postman Terminal<ul> <li>Record the responses Result Id value <code>result: {Id: ##}</code> [This is your Subscription Id]</li> </ul> </li> </ul> </li> <li> <p>Press the <code>Subscription Assistant Button</code> on your Touch Interface</p> <ul> <li>Under the xConfigurations Page, move the Slider labeled Audio DefaultVolume to a new position and release</li> <li>Observe your Postman Terminal output, you should see events for your Subscription fill the Postman Terminal<ul> <li>Optional: Move the slider a few more times to see more changes come in</li> </ul> </li> </ul> </li> </ul> </li> <li> <p>Unsubscribe</p> <ul> <li>Assign the correct Method to the <code>method</code> object in order to Unsubscribe from an xConfiguration</li> <li> <p>Within the <code>params</code> object, fill in the <code>Query</code> object the Subscription Id you recorded</p> </li> <li> <p>Once the Message body has been updated</p> <ul> <li>Save the request</li> <li>Select Send</li> <li>Observe the Initial Response in the Postman Terminal</li> </ul> </li> <li> <p>Press the <code>Subscription Assistant Button</code> on your Touch Interface</p> <ul> <li>Under the xConfigurations Page, move the Slider labeled Audio DefaultVolume to a new position and release</li> <li>Observe your Postman Terminal output, those responses you saw in the previous lesson should have stopped outputting in your Postman Terminal<ul> <li>Optional: Move the slider a few more times to see more changes come in</li> </ul> </li> </ul> </li> </ul> </li> <li> <p>When you've finished this lesson, select Disconnect to terminate the WebSocket connection</p> </li> </ul> View properly formatted Message Subscribe Message bodyUnsubscribe Message Body <pre><code>{\n  \"jsonrpc\": \"2.0\",\n  \"id\": \"Subscribing to an xConfiguration\",\n  \"method\": \"xFeedback/Subscribe\",\n  \"params\": {\n    \"Query\": [\"Configuration\",\"Audio\",\"DefaultVolume\"],\n    \"NotifyCurrentValue\": true\n  }\n}\n</code></pre> <pre><code>{\n  \"jsonrpc\": \"2.0\",\n  \"id\": \"Unsubscribing to an xConfiguration\",\n  \"method\": \"xFeedback/Unsubscribe\",\n  \"params\": {\n    \"Id\": 1 //&lt;-- NOTE: You're Id may differ\n  }\n}\n</code></pre> </li> </ul> Lesson: Subscribe and Unsubscribe to Multiple xConfigurations under a Common Node <ul> <li> <p>xAPI: xConfiguration Airplay</p> </li> <li> <p>Task: </p> <ul> <li> <ul> <li>Within the <code>params</code> object, fill in the <code>Query</code> object using the xAPI above</li> </ul> <p>Assign the correct Method to the <code>method</code> object in order to Subscribe to an xConfiguration</p> <ul> <li> <p>Once the Message body has been updated</p> <ul> <li>Save the request</li> <li>Select Connect to establish the WebSocket connection to the Codec</li> <li>Select Send</li> <li>Observe the Initial Response in the Postman Terminal<ul> <li>Record the responses Result Id value <code>result: {Id: ##}</code> [This is your Subscription Id]</li> </ul> </li> </ul> </li> <li> <p>Press the <code>Subscription Assistant Button</code> on your Touch Interface</p> <ul> <li>Under the xConfigurations Page, press the toggles and buttons in the Airplay row</li> <li>Observe your Postman Terminal output, you should see events for your Subscription fill the Postman Terminal<ul> <li>Optional: Move the slider a few more times to see more changes come in</li> </ul> </li> </ul> </li> </ul> </li> <li> <p>Unsubscribe</p> <ul> <li>Assign the correct Method to the <code>method</code> object in order to Unsubscribe from an xConfiguration</li> <li> <p>Within the <code>params</code> object, fill in the <code>Query</code> object the Subscription Id you recorded</p> </li> <li> <p>Once the Message body has been updated</p> <ul> <li>Save the request</li> <li>Select Send</li> <li>Observe the Initial Response in the Postman Terminal</li> </ul> </li> <li> <p>Press the <code>Subscription Assistant Button</code> on your Touch Interface</p> <ul> <li>Under the xConfigurations Page, press the toggles and buttons in the Airplay row</li> <li>Observe your Postman Terminal output, those responses you saw in the previous lesson should have stopped outputting in your Postman Terminal<ul> <li>Optional: Move the slider a few more times to see more changes come in</li> </ul> </li> </ul> </li> </ul> </li> </ul> </li> <li> <p>When you've finished this lesson, select Disconnect to terminate the WebSocket connection</p> </li> </ul> View properly formatted Messages Subscribe Message bodyUnsubscribe Message Body <pre><code>{\n  \"jsonrpc\": \"2.0\",\n  \"id\": \"Subscribe to Multiple xConfigurations under a Common Node\",\n  \"method\": \"xFeedback/Subscribe\",\n  \"params\": {\n    \"Query\": [\"Configuration\",\"Video\",\"Input\",\"Airplay\"],\n    \"NotifyCurrentValue\": true\n  }\n}\n</code></pre> <pre><code>{\n  \"jsonrpc\": \"2.0\",\n  \"id\": \"Unsubscribing to an xConfiguration\",\n  \"method\": \"xFeedback/Unsubscribe\",\n  \"params\": {\n    \"Id\": 1 //&lt;-- NOTE: You're Id may differ\n  }\n}\n</code></pre>"},{"location":"wx1_1451_part_2/#245-getting-and-subscribing-to-xstatuses","title":"2.4.5 - Getting and Subscribing to xStatuses","text":"Lesson: Getting an xStatus Value <p>Message body location</p> <p> </p> <ul> <li> <p>xAPI: xStatus Audio Volume</p> </li> <li> <p>Task: </p> <ul> <li>Assign the correct Method to the <code>method</code> object for getting an xStatus</li> <li> <p>Within the <code>params</code> object, fill in the <code>Path</code> object using the xAPI above</p> </li> <li> <p>Once the Message body has been updated</p> <ul> <li>Save the request</li> <li>Select Connect to establish the WebSocket connection to the Codec</li> <li>select Send and review the Postman Terminal's repsonse</li> </ul> </li> <li> <p>When you've finished this lesson, select Disconnect to terminate the WebSocket connection</p> </li> </ul> </li> </ul> Need Help with the Syntax? <p>   Open the Websocket Method and Parameter Table in the CheatSheet  </p> View properly formatted Message and Successful Response Message Body <code>JSON</code>Response Body <pre><code>{\n  \"jsonrpc\": \"2.0\",\n  \"id\": \"Getting an xStatus Value\",\n  \"method\": \"xGet\",\n  \"params\": {\n    \"Path\": [\"Status\", \"Audio\", \"Volume\"]\n  }\n}\n</code></pre> <pre><code>{\n  \"id\": \"Getting an xStatus Value\",\n  \"jsonrpc\": \"2.0\",\n  \"result\": 50 // &lt;-- This is the Value for your request\n}\n</code></pre> Lesson: Get multiple xStatuses Values under a Common Node <ul> <li> <p>xAPI: xStatus Audio</p> </li> <li> <p>Task: </p> <ul> <li>Assign the correct Method to the <code>method</code> object for getting an xStatus</li> <li> <p>Within the <code>params</code> object, fill in the <code>Path</code> object using the xAPI above</p> </li> <li> <p>Once the Message body has been updated</p> <ul> <li>Save the request</li> <li>Select Connect to establish the WebSocket connection to the Codec</li> <li>select Send and review the Postman Terminal's repsonse</li> </ul> </li> <li> <p>When you've finished this lesson, select Disconnect to terminate the WebSocket connection</p> </li> </ul> </li> </ul> View properly formatted Message and Successful Response Message Body <code>JSON</code>Response Body <pre><code>{\n  \"jsonrpc\": \"2.0\",\n  \"id\": \"Get multiple xStatuses Values under a Common Node\",\n  \"method\": \"xGet\",\n  \"params\": {\n    \"Path\": [\"Status\", \"Audio\"]\n  }\n}\n</code></pre> <p><code>{ .json , .no-copy } {   \"id\": \"Get multiple xStatuses Values under a Common Node\",   \"jsonrpc\": \"2.0\",   \"result\": {     \"Devices\": {       \"Bluetooth\": {         \"ActiveProfile\": \"None\"       },       \"HandsetUSB\": {         \"ConnectionStatus\": \"NotConnected\",         \"Cradle\": \"OnHook\"       },       \"HeadsetUSB\": {         \"ConnectionStatus\": \"NotConnected\",         \"Description\": \"\",         \"Manufacturer\": \"\"       }     },     \"Input\": {       \"Connectors\": {         \"HDMI\": [           {             \"Mute\": \"On\",             \"id\": 1           }         ],         \"Microphone\": [           {             \"ConnectionStatus\": \"Connected\",             \"id\": 1           },           {             \"ConnectionStatus\": \"NotConnected\",             \"id\": 2           },           {             \"ConnectionStatus\": \"NotConnected\",             \"id\": 3           }         ],         \"USBC\": [           {             \"Mute\": \"On\",             \"id\": 1           }         ]       }     },     \"Microphones\": {       \"MusicMode\": \"Off\",       \"Mute\": \"Off\",       \"NoiseRemoval\": \"On\",       \"VoiceActivityDetector\": {         \"Activity\": \"False\"       }     },     \"Output\": {       \"Connectors\": {         \"HDMI\": [           {             \"Mode\": \"DelayMeasurement\",             \"id\": 1           }         ],         \"InternalSpeaker\": [           {             \"DelayMs\": 0,             \"id\": 1           }         ],         \"Line\": [           {             \"ConnectionStatus\": \"NotConnected\",             \"DelayMs\": 0,             \"id\": 1           }         ]       },       \"MeasuredHdmiArcDelay\": 0,       \"MeasuredHdmiDelay\": 0,       \"ReportedHdmiCecDelay\": 0     },     \"SelectedDevice\": \"Internal\",     \"Ultrasound\": {       \"Volume\": 70     },     \"Volume\": 50,     \"VolumeHandsetUsb\": 50,     \"VolumeHeadsetBluetooth\": 50,     \"VolumeHeadsetUsb\": 50,     \"VolumeInternal\": 50,     \"VolumeMute\": \"Off\"   } }</code></p> Lesson: Query an xStatus Value <ul> <li> <p>xAPI: xStatus Video Input Airplay Status</p> </li> <li> <p>Task: </p> <ul> <li>Assign the correct Method to the <code>method</code> object for querying an xStatus</li> <li> <p>Within the <code>params</code> object, fill in the <code>Query</code> object using the xAPI above</p> </li> <li> <p>Once the Message body has been updated</p> <ul> <li>Save the request</li> <li>Select Connect to establish the WebSocket connection to the Codec</li> <li>select Send and review the Postman Terminal's repsonse</li> </ul> </li> <li> <p>When you've finished this lesson, select Disconnect to terminate the WebSocket connection</p> </li> </ul> </li> </ul> View properly formatted Message and Successful Response Message Body <code>JSON</code>Response Body <pre><code>{\n  \"jsonrpc\": \"2.0\",\n  \"id\": \"Query an xStatus Value\",\n  \"method\": \"xQuery\",\n  \"params\": {\n    \"Query\": [\"Status\", \"Video\", \"Input\", \"Airplay\", \"Status\"]\n  }\n}\n</code></pre> <pre><code>{\n  \"id\": \"Query an xStatus Value\",\n  \"jsonrpc\": \"2.0\",\n  \"result\": {\n    \"Status\": {\n      \"Video\": {\n        \"Input\": {\n          \"AirPlay\": {\n            \"Status\": \"Active\"\n          }\n        }\n      }\n    }\n  }\n}\n</code></pre> Lesson: Query an xStatus Value using a WildCard <ul> <li> <p>xAPI: xStatus ** Temperature</p> </li> <li> <p>Task: </p> <ul> <li>Assign the correct Method to the <code>method</code> object for getting an xStatus</li> <li> <p>Within the <code>params</code> object, fill in the <code>Query</code> object using the xAPI above. Be sure to treat <code>**</code> as a separate entity in the xAPI Path.</p> </li> <li> <p>Once the Message body has been updated</p> <ul> <li>Save the request</li> <li>Select Connect to establish the WebSocket connection to the Codec</li> <li>select Send and review the Postman Terminal's repsonse</li> </ul> </li> <li> <p>When you've finished this lesson, select Disconnect to terminate the WebSocket connection</p> </li> </ul> </li> </ul> View properly formatted Message and Successful Response Message Body <code>JSON</code>Response Body <pre><code>{\n  \"jsonrpc\": \"2.0\",\n  \"id\": \"Query an xStatus Value using a WildCard\",\n  \"method\": \"xQuery\",\n  \"params\": {\n    \"Query\": [\"Status\", \"**\", \"Temperature\"]\n  }\n}\n</code></pre> <pre><code>{\n  \"id\": \"Query an xStatus Value using a WildCard\",\n  \"jsonrpc\": \"2.0\",\n  \"result\": {\n    \"Status\": {\n      \"SystemUnit\": {\n        \"Hardware\": {\n          \"Monitoring\": {\n            \"Temperature\": {\n              \"Status\": \"Normal\"\n            }\n          }\n        }\n      },\n      \"Video\": {\n        \"Output\": {\n          \"Monitor\": [\n            {\n              \"Temperature\": \"Normal\",\n              \"id\": 1\n            }\n          ]\n        }\n      }\n    }\n  }\n}\n</code></pre> Lesson: Subscribe and Unsubscribe to an xStatus <ul> <li> <p>xAPI: xStatus Audio Volume</p> </li> <li> <p>Task: </p> <ul> <li> <ul> <li>Within the <code>params</code> object, fill in the <code>Query</code> object using the xAPI above</li> </ul> <p>Assign the correct Method to the <code>method</code> object in order to Subscribe to an xStatus</p> <ul> <li> <p>Once the Message body has been updated</p> <ul> <li>Save the request</li> <li>Select Connect to establish the WebSocket connection to the Codec</li> <li>Select Send</li> <li>Observe the Initial Response in the Postman Terminal<ul> <li>Record the responses Result Id value <code>result: {Id: ##}</code> [This is your Subscription Id]</li> </ul> </li> </ul> </li> <li> <p>Press the <code>Subscription Assistant Button</code> on your Touch Interface</p> </li> <li>Under the xStatuses Page, move the Slider labeled Adjust Volume, to a new position and release<ul> <li>Alternatively, you can adjust the volume with the Codec's native volume control buttons</li> </ul> </li> <li>Observe your Postman Terminal output, you should see events for your Subscription fill the Postman Terminal<ul> <li>Optional: Move the slider a few more times to see more changes come in</li> </ul> </li> </ul> </li> <li> <p>Unsubscribe</p> <ul> <li>Assign the correct Method to the <code>method</code> object in order to Unsubscribe from an xStatus</li> <li> <p>Within the <code>params</code> object, fill in the <code>Query</code> object the Subscription Id you recorded</p> </li> <li> <p>Once the Message body has been updated</p> <ul> <li>Save the request</li> <li>Select Send</li> <li>Observe the Initial Response in the Postman Terminal</li> </ul> </li> <li> <p>Press the <code>Subscription Assistant Button</code> on your Touch Interface</p> <ul> <li>Under the xStatuses Page, move the Slider labeled Adjust Volume, to a new position and release<ul> <li>Alternatively, you can adjust the volume with the Codec's native volume control buttons</li> </ul> </li> <li>Observe your Postman Terminal output, those responses you saw in the previous lesson should have stopped outputting in your Postman Terminal<ul> <li>Optional: Move the slider a few more times to see more changes come in</li> </ul> </li> </ul> </li> </ul> </li> </ul> </li> <li> <p>When you've finished this lesson, select Disconnect to terminate the WebSocket connection</p> </li> </ul> View properly formatted Messages Subscribe Message bodyUnsubscribe Message Body <pre><code>{\n  \"jsonrpc\": \"2.0\",\n  \"id\": \"Subscribe to an xStatus\",\n  \"method\": \"xFeedback/Subscribe\",\n  \"params\": {\n    \"Query\": [\"Status\", \"Audio\", \"Volume\"],\n    \"NotifyCurrentValue\": true\n  }\n}\n</code></pre> <pre><code>{\n  \"jsonrpc\": \"2.0\",\n  \"id\": \"Unsubscribe to an xStatus\",\n  \"method\": \"xFeedback/Unsubscribe\",\n  \"params\": {\n    \"Id\": 1 //&lt;-- NOTE: You're Id may differ\n  }\n}\n</code></pre> View Subscription Assistant <p> </p> Lesson: Subscribe and Unsubscribe to Multiple xStatuses under a Common Node <ul> <li> <p>xAPI: xStatus Cameras Camera [N] Position</p> </li> <li> <p>Task:</p> <ul> <li> <ul> <li>Within the <code>params</code> object, fill in the <code>Query</code> object using the xAPI above</li> </ul> <p>Assign the correct Method to the <code>method</code> object in order to Subscribe to an xStatus</p> <ul> <li> <p>Once the Message body has been updated</p> <ul> <li>Save the request</li> <li>Select Connect to establish the WebSocket connection to the Codec</li> <li>Select Send</li> <li>Observe the Initial Response in the Postman Terminal<ul> <li>Record the responses Result Id value <code>result: {Id: ##}</code> [This is your Subscription Id]</li> </ul> </li> </ul> </li> <li> <p>Press the <code>Subscription Assistant Button</code> on your Touch Interface</p> <ul> <li>Under the xStatuses Page, click the button in the Camera Control Wheel row<ul> <li>Alternatively, you can adjust your cameras position through the native camera control interface</li> </ul> </li> <li>Observe your Postman Terminal output, you should see events for your Subscription fill the Postman Terminal<ul> <li>Optional: Continue pressing buttons to see more changes come in</li> </ul> </li> </ul> </li> </ul> </li> <li> <p>Unsubscribe</p> <ul> <li>Assign the correct Method to the <code>method</code> object in order to Unsubscribe from an xStatus</li> <li> <p>Within the <code>params</code> object, fill in the <code>Query</code> object the Subscription Id you recorded</p> </li> <li> <p>Once the Message body has been updated</p> <ul> <li>Save the request</li> <li>Select Send</li> <li>Observe the Initial Response in the Postman Terminal</li> </ul> </li> <li> <p>Press the <code>Subscription Assistant Button</code> on your Touch Interface</p> <ul> <li>Under the xStatuses Page, click the button in the Camera Control Wheel row<ul> <li>Alternatively, you can adjust your cameras position through the native camera control interface</li> </ul> </li> <li>Observe your Postman Terminal output, you should see events for your Subscription fill the Postman Terminal<ul> <li>Optional: Continue pressing buttons to see more changes come in</li> </ul> </li> </ul> </li> </ul> </li> </ul> </li> <li> <p>When you've finished this lesson, select Disconnect to terminate the WebSocket connection</p> </li> </ul> View properly formatted Messages Subscribe Message bodyUnsubscribe Message Body <pre><code>{\n  \"jsonrpc\": \"2.0\",\n  \"id\": \"Subscribe to Multiple xStatuses under a Common Node\",\n  \"method\": \"xFeedback/Subscribe\",\n  \"params\": {\n    \"Query\": [\"Status\", \"Cameras\", \"Camera\", \"Position\"],\n    \"NotifyCurrentValue\": true\n  }\n}\n</code></pre> <pre><code>{\n  \"jsonrpc\": \"2.0\",\n  \"id\": \"Unsubscribe to Multiple xStatuses under a Common Node\",\n  \"method\": \"xFeedback/Unsubscribe\",\n  \"params\": {\n    \"Id\": 1 //&lt;-- NOTE: You're Id may differ\n  }\n}\n</code></pre> View Subscription Assistant <p> </p>"},{"location":"wx1_1451_part_2/#246-subscribing-to-xevents","title":"2.4.6 - Subscribing to xEvents","text":"Subscribe and Unsubscribe to an xEvent <p>XML Body Location</p> <p> </p> <ul> <li> <p>xAPI: xEvent UserInterface Message Prompt Response</p> </li> <li> <p>Task: </p> <ul> <li> <ul> <li>Within the <code>params</code> object, fill in the <code>Query</code> object using the xAPI above</li> </ul> <p>Assign the correct Method to the <code>method</code> object in order to Subscribe to an xStatus</p> <ul> <li> <p>Once the Message body has been updated</p> <ul> <li>Save the request</li> <li>Select Connect to establish the WebSocket connection to the Codec</li> <li>Select Send</li> <li>Observe the Initial Response in the Postman Terminal<ul> <li>Record the responses Result Id value <code>result: {Id: ##}</code> [This is your Subscription Id]</li> </ul> </li> </ul> </li> <li> <p>Press the <code>Subscription Assistant Button</code> on your Touch Interface</p> <ul> <li>Under the xEvents Page, click the Prompt Button in the UserInterface Message row<ul> <li>This will create a Pop Up with 5 options</li> <li>Click on any of these 5 Options</li> </ul> </li> <li>Observe your Postman Terminal output, you should see events for your Subscription fill the Postman Terminal<ul> <li>Optional: Try each of the options under <code>Prompt</code> and continue to observe your Postman Terminal</li> </ul> </li> <li>Press click either the <code>TextInput</code>, the <code>Rating</code> or the <code>Alert</code> button and submit any accompanying actions in that interface</li> <li>Observe your Postman Terminal output, you should see events for your Subscription fill the Postman Terminal<ul> <li>Responses for <code>TextInput</code>, <code>Rating</code> or <code>Alert</code> shouldn't show since you're currently only subscribed to <code>Prompt</code></li> </ul> </li> </ul> </li> </ul> </li> <li> <p>Unsubscribe</p> <ul> <li>Assign the correct Method to the <code>method</code> object in order to Unsubscribe from an xStatus</li> <li> <p>Within the <code>params</code> object, fill in the <code>Query</code> object the Subscription Id you recorded</p> </li> <li> <p>Once the Message body has been updated</p> <ul> <li>Save the request</li> <li>Select Send</li> <li>Observe the Initial Response in the Postman Terminal</li> </ul> </li> <li> <p>Press the <code>Subscription Assistant Button</code> on your Touch Interface</p> <ul> <li>Under the xStatuses Page, move the Slider labeled Adjust Volume, to a new position and release<ul> <li>Alternatively, you can adjust the volume with the Codec's native volume control buttons</li> </ul> </li> <li>Observe your Postman Terminal output, those responses you saw in the previous lesson should have stopped outputting in your Postman Terminal<ul> <li>Optional: Move the slider a few more times to see more changes come in</li> </ul> </li> </ul> </li> </ul> </li> </ul> </li> <li> <p>When you've finished this lesson, select Disconnect to terminate the WebSocket connection</p> </li> </ul> Need Help with the Syntax? <p>   Open the Websocket Method and Parameter Table in the CheatSheet  </p> View properly formatted Messages Subscribe Message bodyUnsubscribe Message Body <pre><code>{\n  \"jsonrpc\": \"2.0\",\n  \"id\": \"Subscribe to an xEvent\",\n  \"method\": \"xFeedback/Subscribe\",\n  \"params\": {\n    \"Query\": [\"Event\", \"UserInterface\", \"Message\", \"Prompt\", \"Response\"]\n  }\n}\n</code></pre> <pre><code>{\n  \"jsonrpc\": \"2.0\",\n  \"id\": \"Unsubscribe to an xEvent\",\n  \"method\": \"xFeedback/Subscribe\",\n  \"params\": {\n    \"Id\": 1 //&lt;-- NOTE: You're Id may differ\n  }\n}\n</code></pre> View Subscription Assistant <p> </p> Lesson: Subscribe and Unsubscribe to Multiple xEvents under a Common Node <ul> <li> <p>xAPI: xEvent UserInterface</p> </li> <li> <p>Task: </p> <ul> <li> <ul> <li>Within the <code>params</code> object, fill in the <code>Query</code> object using the xAPI above</li> </ul> <p>Assign the correct Method to the <code>method</code> object in order to Subscribe to an xEvent</p> <ul> <li> <p>Once the Message body has been updated</p> <ul> <li>Save the request</li> <li>Select Connect to establish the WebSocket connection to the Codec</li> <li>Select Send</li> <li>Observe the Initial Response in the Postman Terminal<ul> <li>Record the responses Result Id value <code>result: {Id: ##}</code> [This is your Subscription Id]</li> </ul> </li> </ul> </li> <li> <p>Press the <code>Subscription Assistant Button</code> on your Touch Interface</p> <ul> <li>Under the xEvents Page, try any of the <code>Widgets</code> on this page, and submit any accompanying actions in that interface if any</li> <li>Observe your Postman Terminal output, you should see events for your Subscription fill the Postman Terminal<ul> <li>Optional: Try all of the <code>Widget</code> on that page </li> </ul> </li> </ul> </li> </ul> </li> <li> <p>Unsubscribe</p> <ul> <li>Assign the correct Method to the <code>method</code> object in order to Unsubscribe from an xStatus</li> <li> <p>Within the <code>params</code> object, fill in the <code>Query</code> object the Subscription Id you recorded</p> </li> <li> <p>Once the Message body has been updated</p> <ul> <li>Save the request</li> <li>Select Send</li> <li>Observe the Initial Response in the Postman Terminal</li> </ul> </li> <li> <p>Press the <code>Subscription Assistant Button</code> on your Touch Interface</p> <ul> <li>Under the xEvents Page, try any of the <code>Widgets</code> on this page, and submit any accompanying actions in that interface if any</li> <li>Observe your Postman Terminal output, those responses you saw in the previous lesson should have stopped outputting in your Postman Terminal<ul> <li>Optional: Continue pressing buttons to see more changes come in</li> </ul> </li> </ul> </li> </ul> </li> </ul> </li> <li> <p>When you've finished this lesson, select Disconnect to terminate the WebSocket connection</p> </li> </ul> View properly formatted Messages Subscribe Message bodyUnsubscribe Message Body <pre><code>{\n  \"jsonrpc\": \"2.0\",\n  \"id\": \"Subscribe to Multiple xEvents under a Common Node\",\n  \"method\": \"xFeedback/Subscribe\",\n  \"params\": {\n    \"Query\": [\"Event\", \"UserInterface\"]\n  }\n}\n</code></pre> <pre><code>{\n  \"jsonrpc\": \"2.0\",\n  \"id\": \"Unsubscribe to Multiple xEvents under a Common Node\",\n  \"method\": \"xFeedback/Subscribe\",\n  \"params\": {\n    \"Id\": 1 //&lt;-- NOTE: You're Id may differ\n  }\n}\n</code></pre> View Subscription Assistant <p> </p>"},{"location":"wx1_1451_part_2/#248-section-24-cleanup","title":"2.4.8 - Section 2.4 Cleanup","text":"<p>Important</p> <ul> <li>Press the <code>Subscription Assistant Button</code> on your Touch Interface</li> <li>Under the Section Cleanup Page, select the Run Section Cleanup? button</li> <li>Select Yes, Run the Cleanup Script</li> </ul> <p> Section Cleanup Confirmation </p> <p>This will reverse the changes we've made to the endpoint, and leave us ready for the next section</p> You can run the cleanup via the terminal as well <p>Copy the contents below into your terminal window and run them all at once</p> Type into terminal and press Enter<pre><code>xConfig Audio DefaultVolume: 50\nxCommand UserInterface Extensions Panel Remove PanelId: wx1_lab_multilineCommand\nxCommand Video Selfview Set Mode: Off FullscreenMode: Off\nxCommand Video Input SetMainVideoSource ConnectorId: 1\nxCommand Audio Volume SetToDefault Device: Internal\nxCommand HTTPFeedBack Deregister FeedbackSlot: 1 FeedbackSlot: 2 FeedbackSlot: 3 FeedbackSlot: 4\n</code></pre>"},{"location":"wx1_1451_part_2/#section-25-accessing-xapi-via-cloud-xapi","title":"Section 2.5: Accessing xAPI via Cloud xAPI","text":"<p>Abstract</p> <p>Cloud xAPIs are only accessible for devices registered to the Webex Cloud or Cloud Edge for Devices</p> <p>They are HTTP requests, but differ in the sens that you're not directly communicating to the endpoint in a 1:1 relationship like we would with every other protocol we offer.</p> <p>You instead make a request, or offer a WebHook, to your Webex Cloud instance and then your cloud instance will broker the communication between itself and the device</p> <p>In short, when using Cloud xAPIs you're communicating using the Webex Cloud APIs, not directly interfacing with the Device xAPI. but fortunately, the paths fo the Device xAPI stack remain the same</p> <p>Click the Tabs Below to see how HTTP xAPI calls differ from Cloud xAPI calls</p> HTTP APICloud xAPI Get Requests [xStatuses/xConfigs]Post Requests [xCommands/xConfigs]Subscriptions [HTTPFeedback] <pre><code>%%{init: {'theme':'dark'}}%%\nsequenceDiagram\n  participant My Customization\n  participant Target Codec\n  My Customization-&gt;&gt;+Target Codec: xStatus/xConfig Get Request\n  Note over My Customization,Target Codec: If Device Online\n  Target Codec-&gt;&gt;- My Customization: Responds 200 OK</code></pre> <pre><code>%%{init: {'theme':'dark'}}%%\nsequenceDiagram\n  participant My Customization\n  participant Target Codec\n  My Customization-&gt;&gt;+Target Codec: xCommand/xConfig Post Request\n  Note over My Customization,Target Codec: If Device Online\n  Target Codec-&gt;&gt;- My Customization: Responds 200 OK</code></pre> <pre><code>%%{init: {'theme':'dark'}}%%\nsequenceDiagram\n  participant My Customization\n  participant Target Codec\n  activate Target Codec\n  Note over My Customization, Target Codec: WebHook Offered by My Customization&lt;br&gt;Configured in Target Codec\n  Target Codec --&gt;&gt;+ My Customization: Forwards Subscription Traffic\n  Note over My Customization,Target Codec: On Subscription callBack from Target Codec\n  deactivate Target Codec\n  activate My Customization\n  Target Codec-&gt;&gt;+ My Customization: Ex. xEvent UserInterface Extension Panel Clicked (QuickDial)\n  activate Target Codec\n  My Customization-&gt;&gt;+Target Codec: Responds with xCommand Dial Post Request\n  deactivate My Customization\n  Target Codec-&gt;&gt;- My Customization: Responds 200 OK</code></pre> Get Requests [xStatuses/xConfigs]Post Requests [xCommands]Patch Requests [xConfigs]Subscriptions [Workspace Integrations] <pre><code>%%{init: {'theme':'dark'}}%%\nsequenceDiagram\n  participant My Customization\n  participant Webex Cloud\n  participant Target Codec\n  Webex Cloud&lt;&lt;--&gt;&gt;Target Codec: Websocket Connection\n  Note over Webex Cloud,Target Codec: Forwarding xStatus, xConfig&lt;br&gt; and xEvent information\n  My Customization-&gt;&gt;+Webex Cloud: xStatus/xConfig Get Request\n  Webex Cloud -&gt;&gt;- My Customization: 200 OK\n  Note over My Customization,Webex Cloud: xStatus and xConfig&lt;br&gt; Information Saved in Cloud</code></pre> <pre><code>%%{init: {'theme':'dark'}}%%\nsequenceDiagram\n  participant My Customization\n  participant Webex Cloud\n  participant Target Codec\n  Webex Cloud&lt;&lt;--&gt;&gt;Target Codec: Websocket Connection\n  Note over Webex Cloud,Target Codec: Forwarding xStatus, xConfig&lt;br&gt; and xEvent information\n  My Customization-&gt;&gt;+Webex Cloud: xCommand Post Request\n  activate Webex Cloud\n  Note over Webex Cloud,Target Codec: Runs xCommand if&lt;br&gt;Device is Online\n  Webex Cloud-&gt;&gt;+Target Codec: Forwards Request\n  activate Target Codec\n  Target Codec-&gt;&gt;+Webex Cloud: Responds to Request\n  deactivate Target Codec\n  Webex Cloud-&gt;&gt;- My Customization: Forwards Response 200 OK\n  deactivate Webex Cloud</code></pre> <pre><code>%%{init: {'theme':'dark'}}%%\nsequenceDiagram\n  participant My Customization\n  participant Webex Cloud\n  participant Target Codec\n  Webex Cloud&lt;&lt;--&gt;&gt;Target Codec: Websocket Connection\n  Note over Webex Cloud,Target Codec: Forwarding xStatus, xConfig&lt;br&gt; and xEvent information\n  My Customization-&gt;&gt;+Webex Cloud: xConfig Patch Request\n  activate Webex Cloud\n  %% Note over Webex Cloud,Target Codec: Runs xConfig\n  %% Webex Cloud-&gt;&gt;+Target Codec: Forwards Patch Request\n  %% Target Codec-&gt;&gt;+Webex Cloud: Responds Error 503\n  %% deactivate Target Codec\n  Note over Webex Cloud,My Customization: Cloud Accepts Changes\n  Webex Cloud-&gt;&gt;+ My Customization: Forwards Response 200 OK\n  deactivate Webex Cloud\n  activate Target Codec\n  Webex Cloud-&gt;&gt;+Target Codec: Forwards xConfig Patch Request\n  Note over Webex Cloud,Target Codec: If the Target Codec is Offline, On Boot,&lt;br&gt;Webex Cloud Re-issues all xConfig Changes\n  Target Codec-&gt;&gt;+Webex Cloud: Responds 200 OK\n  deactivate Target Codec</code></pre> <pre><code>%%{init: {'theme':'dark'}}%%\nsequenceDiagram\n  participant My Customization\n  participant Webex Cloud\n  participant All Org Codecs\n  participant Target Codec\n  Webex Cloud&lt;&lt;--&gt;&gt;All Org Codecs: Websocket Connection&lt;br&gt;HTTP LongPoll\n  Note over Webex Cloud,All Org Codecs: Forwarding xStatus, xConfig&lt;br&gt; and xEvent information\n  Note over My Customization, Webex Cloud: WebHook Offered by My Customization&lt;br&gt;Configured in Webex Cloud\n  Webex Cloud --&gt;&gt;+ My Customization: Forwards Subscription Traffic&lt;br&gt;\n  par\n  Note over My Customization, Target Codec: On Subscription callBack from Target Codec\n  Target Codec --&gt;&gt;+ Webex Cloud: Ex. xEvent UserInterface Extension Panel Clicked (QuickDial)\n  Webex Cloud --&gt;&gt;- My Customization: Forwards xEvent UserInterface Extension Panel Clicked\n  My Customization-&gt;&gt;+Webex Cloud: Responds with xCommand Dial Post Request\n  Note over Webex Cloud,Target Codec: Runs xCommand if&lt;br&gt;Device is Online\n  Webex Cloud-&gt;&gt;-Target Codec: Forwards xCommand Dial Request\n  Target Codec-&gt;&gt;+Webex Cloud: Responds 200 OK\n  Webex Cloud-&gt;&gt;- My Customization: Forwards Response 200 OK\n  end</code></pre> <p>Section Requirements</p> <p>Postman should have been installed on your loaner laptop, make sure it is</p> <ul> <li>If Postman is NOT installed, be sure to install it before continuing section 2.5</li> </ul> <ul> <li> <p> Click the icon below for the Postman Download Page</p> <p> </p> </li> <li> <p> Click the icon below for the Section 2.5 Postman Collection</p> <p> </p> </li> </ul>"},{"location":"wx1_1451_part_2/#251-cloud-xapi-authentication-and-format","title":"2.5.1  - Cloud xAPI Authentication and Format","text":"<p>URL Structure</p> <p>The request URL for your Codec will change depending on whether you're making a Get, Post, Patch or Delete request to the Webex Cloud Service</p> GetPostPatchDelete xAPI BranchDevices BranchWorkSpaces Branch <p>https://webexapis.com/v1/xapi/status?[URL_Params]</p> <p>https://webexapis.com/v1/devices?[URL_Params]</p> <p>https://webexapis.com/v1/workspaces?[URL_Params]</p> Why is there a split between <code>xAPI</code>, <code>Devices</code> and <code>Workspaces</code> <p>The Webex API stack offers APIs from all technologies within it's portfolio, not just for Video Devices. You'll have APIs for phone services, messaging, user management and the list goes on</p> <p>The <code>Devices</code> branch represents cloud-registered Webex RoomOS devices and Webex Calling phones. Devices may be associated with Workspaces.</p> <p>The <code>xAPI</code> branch allows developers to programmatically invoke commands and query the status of devices that run Webex RoomOS software. This is the very same xAPI we've been working with in the Previous Sections. These Video Devices themselves fall under the <code>Devices</code> branch and <code>Workspaces</code> branches, but mainly for management purposes.</p> <p>The <code>Workspaces</code> branch represents where people work, such as conference rooms, meeting spaces, lobbies, and lunch rooms. Devices may be associated with workspaces.</p> <p>We'll only cover 2 simple examples for the <code>Devices</code> and <code>Workspaces</code> branches in this lab as they are a bit out of scope, but they are worthwhile to know about, as they can help you build solutions for your video devices that scale across your organization.</p> xAPI BranchDevices BranchWorkspaces Branch <p>https://webexapis.com/v1/xapi/command/[Command_xAPI_Path]</p> <p>https://webexapis.com/v1/devices/[Devices_API_Path]?[URL_Params]</p> <p>https://webexapis.com/v1/workspaces[Workspaces_API_Path]?[URL_Params]</p> xAPI BranchDevices BranchWorkspaces Branch <p>https://webexapis.com/v1/deviceConfigurations?[URL_Params]</p> I thought this was the <code>xAPI</code> branch, Not the <code>deviceConfigurations</code>? <p>Keen Eye . This is the branch to access Device xAPI/xConfigurations but in Webex, all Device Related Configurations run under this branch</p> <p>So when working with Video Device or Phone Devices, you'll configure them here.</p> <p>https://webexapis.com/v1/devices/[Device_Id]?[URL_Params]</p> <p>https://webexapis.com/v1/workspaces[Workspaces_API_Path]?[URL_Params]</p> xAPI BranchDevices BranchWorkspaces Branch <p>None Available</p> <p>https://webexapis.com/v1/devices/[deviceId]?[URL_Params]</p> <p>https://webexapis.com/v1/workspaceLocations/[locationId]/[Workspaces_API_Path]</p> <p>Authentication Format</p> <p>Authentication can vary between Webex API branches and it's a bit of a broad topic depending on the solution.</p> <p>If you're interested in learning more about Webex APIs and the various scopes, check out the</p> <p>   Platform Introduction Guide  </p> <p>On developer.webex.com</p> <p>For the lab, we'll use our Personal Access Token, which, with admin or device admin rights, will suffice.</p> <p>Your Personal Access Token is a form of <code>Bearer</code> authentication</p> <p>Request Headers</p> Key Value <code>Content-Type</code> <code>application/json</code> <code>Content-Type</code> <code>application/json-patch+json</code> <code>Authorization</code> <code>Bearer [YOUR_TOKEN]</code>"},{"location":"wx1_1451_part_2/#252-get-and-your-personal-access-token-import-and-configure-postman-collection","title":"2.5.2  - Get and your Personal Access Token, Import and Configure Postman Collection","text":"<p>Get your Personal Access Token</p> <p>First, go to the Webex Developer Site</p> <p>       Webex for Developers  </p> <p>Click the Tabs and follow the steps to get your Token</p> 1. Select Login &gt;&gt;2. Enter Your Email &gt;&gt;3. Select Documentation &gt;&gt;4. Find Devices Reference &gt;&gt;5. Copy Personal Access Token <p>In the Top Navigation Bar</p> <p> Select Login </p> <p>Use the email provided to you in this lab</p> <p> Enter Your Email </p> <p>In the Top Navigation Bar</p> <p> Select Documentation </p> <p>In the left Navigation Bar</p> <p> Select Device References </p> <p>In the Top Navigation Bar, then in the right content menu</p> <p> Select List Devices and Copy Personal Access Token </p> <p>Import and Configure Postman Collection</p> <p>Import Collection</p> <ul> <li>With Postman open, in a new or existing workspace select import</li> <li>Select File</li> <li>Locate the WX1-Lab:1451-CloudxAPI-Postman-Collection.Postman_collection.json and Open it</li> <li>You should now have the Postman Collection installed for this lab</li> </ul> View Import Postman Collection <p> </p> <p>Configure Collection</p> <ul> <li>Click on the WX1-Lab:1451-CloudxAPI-Postman-Collection root folder</li> <li>Select Variables</li> <li>Add the following information for your codec in both the <code>Initial Value</code> and <code>Current Value</code> fields<ul> <li>developer_Token</li> <li>device_Id</li> </ul> </li> <li>Select Save (or one of the keyboard shortcuts for your computer)<ul> <li>Ctrl+S for Windows</li> <li>Cmd+S for Mac</li> </ul> </li> </ul> View Configure Postman Collection <p> </p> <p>Important</p> <p>For each lesson throughout Sections 2.5.3 through 2.5.6, use the WX1-Lab:1451-CloudxAPI-Postman-Collection.Postman_collection.json Postman collection.</p> <p>Each Section has it's own Folder and each lesson name below matches a Postman Request in that folder.</p> <p>When tasked to use Postman, use the Request that matches your current lesson.</p>"},{"location":"wx1_1451_part_2/#253-webex-devices-and-workspace-apis","title":"2.5.3 - Webex Devices and Workspace APIs","text":"<p>Note</p> <p>In section 2.5.3, we'll review a single API from the Devices and Workspaces branches. These APIs are not directly associated to the Devices xAPI, but help highlights what's possible to do at scale when interacting with your devices.</p> Lesson: List Devices <ul> <li> <p>Webex Api: List Devices</p> </li> <li> <p>Task:</p> <ul> <li>This Postman Request comes predefined, no action other than selecting Send and review the Postman Terminal's repsonse</li> </ul> </li> </ul> <p>Note</p> <p>The result will contain all devices you have access to in your Webex Control Hub Organization. This includes not only Video Collaboration devices, but Phones, headsets and any other hardware listed as a Device</p> <p>You can apply filters to this Get request in the form of URL parameters to refine which devices you're interested in listing</p> View properly formatted Url, Body and Successful Response URLBodyResponse <p><pre><code>https://webexapis.com/v1/devices</code></pre></p> <p>No Body Required</p> <pre><code>{\n  \"items\": [\n    {\n      \"id\": \"{{device_Id}}\",\n      \"displayName\": \"XXXX-XXXX\",\n      \"placeId\": \"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\",\n      \"orgId\": \"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\",\n      \"capabilities\": [],\n      \"permissions\": [],\n      \"product\": \"Cisco Desk Mini\",\n      \"type\": \"roomdesk\",\n      \"tags\": [],\n      \"ip\": \"XXX.XXX.XXX.XXX\",\n      \"mac\": \"XX:XX:XX:XX:XX:XX\",\n      \"serial\": \"XXXXXXXXXXX\",\n      \"activeInterface\": \"LAN\",\n      \"software\": \"RoomOS XX.XX.XX.XX xxxxxxxxxx\",\n      \"upgradeChannel\": \"Stable\",\n      \"primarySipUrl\": \"example@example.com\",\n      \"sipUrls\": [\n        \"example@example.com\"\n      ],\n      \"errorCodes\": [],\n      \"connectionStatus\": \"Online\",\n      \"created\": \"0000-00-00T00:00:00.000Z\",\n      \"firstSeen\": \"0000-00-00T00:00:00.000Z\",\n      \"lastSeen\": \"0000-00-00T00:00:00.000Z\",\n      \"managedBy\": \"Webex\",\n      \"devicePlatform\": \"cisco\",\n      \"workspaceId\": \"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\"\n    },\n    [\"Devices Continued...\"]\n  ]\n}\n</code></pre> Lesson: List Workspaces <ul> <li> <p>Webex Api: List Workspaces</p> </li> <li> <p>Task:</p> <ul> <li>This Postman Request comes predefined, no action other than selecting Send and review the Postman Terminal's repsonse</li> </ul> </li> </ul> <p>Note</p> <p>The result will contain all workspaces you have access to in your Webex Control Hub Organization. This includes information about each workspace you've defined. Keep in mind, each device is apart of a Workspace</p> <p>You can apply filters to this Get request in the form of URL parameters to refine which workspaces you're interested in listing</p> View properly formatted Url, Body and Successful Response URLBodyResponse <p><pre><code>https://webexapis.com/v1/workspaces</code></pre></p> <p>No Body Required</p> <pre><code>{\n  \"items\": [\n    {\n      \"id\": \"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\",\n      \"orgId\": \"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\",\n      \"workspaceLocationId\": \"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\",\n      \"locationId\": \"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\",\n      \"floorId\": \"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\",\n      \"displayName\": \"XXXX-XXXX\",\n      \"capacity\": 16,\n      \"type\": \"meetingRoom\",\n      \"sipAddress\": \"example@example.rooms.webex.com\",\n      \"created\": \"0000-00-00T00:00:00.000Z\",\n      \"calling\": {\n        \"type\": \"webexCalling\",\n        \"licenses\": [\"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\"]\n      },\n      \"calendar\": {\n        \"type\": \"none\"\n      },\n      \"hotdeskingStatus\": \"off\",\n      \"deviceHostedMeetings\": {\n        \"enabled\": true,\n        \"siteUrl\": \"example.webex.com\"\n      },\n      \"supportedDevices\": \"collaborationDevices\",\n      \"devicePlatform\": \"cisco\"\n    },\n    [\"Workspaces Continued...\"]\n  ]\n}\n</code></pre>"},{"location":"wx1_1451_part_2/#254-executing-xcommands","title":"2.5.4 - Executing xCommands","text":"Lesson: Execute an xCommand <p>Click on the tabs to see how Terminal Syntax relates to Cloud xAPI Syntax</p> Terminal SyntaxCloud xAPI <p>Url: <pre><code>xCommand Child Child ChildParam_X: SomeValue </code></pre></p> <p>Url: <pre><code>https://webexapis.com/v1/xapi/status?deviceId={{device_Id}}&amp;name=Child.Child</code></pre></p> Body<pre><code>{\n    \"deviceId\": \"{{device_Id}}\",\n    \"arguments\": {\n      \"ChildParam_X\": \"SomeValue\"\n  }\n}\n</code></pre> <ul> <li> <p>xAPI: xCommand Video Selfview Set</p> </li> <li> <p>Task:</p> <ul> <li> <p>Structure the xAPI Path above in the <code>URL</code></p> </li> <li> <p>In the Postman request Body, structure the following parameters using JSON format into the <code>arguments</code> object</p> <ul> <li>Mode: On</li> <li>FullScreenMode: On</li> <li>OnMonitorRole: First</li> </ul> </li> </ul> <p>Once the Postman Request has been updated, Save the request, select Send and review the Postman Terminal's repsonse and observe any changes to your device</p> </li> </ul> View properly formatted Url, Body and Successful Response UrlBodyResponse <p><pre><code>https://webexapis.com/v1/xapi/command/Video.Selfview.Set</code></pre></p> <pre><code>{\n    \"deviceId\": \"{{device_Id}}\",\n    \"arguments\": {\n      \"Mode\": \"On\",\n      \"FullScreenMode\": \"On\",\n      \"OnMonitorRole\": \"First\"\n  }\n}\n</code></pre> <pre><code>{\n  \"deviceId\": \"[YOUR_DEVICE_ID]\",\n  \"result\": {}\n}\n</code></pre> Lesson: Execute an xCommand with multiple arguments with the same name <p>In cases where we need to declare multiple arguments of the same name, rather than duplicating and re-running the parameters, we instead leverage an Array in place of the value, containing all values we want to implement under that Parameter</p> <p>   Learn more about Arrays </p> <p>Click on the tabs to see how Terminal Syntax relates to Cloud xAPI Syntax</p> Terminal SyntaxCloud xAPI Syntax <pre><code>xParent Child ChildParam_X: 1, ChildParam_X: 2\n</code></pre> <p>Url: https://webexapis.com/v1/xapi/command/Parent.Child</p> Body<pre><code>{\n    \"deviceId\": \"{{device_Id}}\",\n    \"arguments\": {\n      \"ChildParam_X\": [1, 2]\n  }\n}\n</code></pre> <ul> <li> <p>xAPI: xCommand Video Input SetMainVideoSource</p> </li> <li> <p>Task:</p> <ul> <li> <p>Structure the xAPI Path above in the <code>URL</code></p> </li> <li> <p>In the Postman request Body, structure the following parameters using JSON format into the <code>arguments</code> object, but duplicate the ConnectorId parameter twice</p> <ul> <li>ConnectorId: 1</li> <li>Layout: Equal</li> </ul> </li> </ul> <p>Once the Postman Request has been updated, Save the request, select Send and review the Postman Terminal's repsonse and observe any changes to your device</p> </li> </ul> View properly formatted Url, Body and Successful Response UrlBodyResponse <p><pre><code>https://webexapis.com/v1/xapi/command/Video.Input.SetMainVideoSource</code></pre></p> <pre><code>{\n    \"deviceId\": \"{{device_Id}}\",\n    \"arguments\": {\n      \"ConnectorId\": [1, 1],\n      \"Layout\": \"Equal\"\n  }\n}\n</code></pre> <pre><code>{\n  \"deviceId\": \"[YOUR_DEVICE_ID]\",\n  \"result\": {}\n}\n</code></pre> Lesson: Execute an xCommand with a multiline argument <p>Info</p> <p>Multiline Arguments can be placed into the <code>body</code> object object of your post. This is defined after the arguments object, not within it.</p> <p>The structure of a Multiline argument should look similar to the following</p> <p>Click on the tabs to see how Terminal Syntax relates to WebSocket Syntax</p> Terminal SyntaxWebSocket Syntax <pre><code>[xParent Child ChildParam_X: SomeValue]\n[Multi Line Content]\n.\n</code></pre> <p>Url: https://webexapis.com/v1/xapi/command/Parent.Child</p> Body<pre><code>{\n  \"deviceId\": \"{{device_Id}}\",,\n  \"arguments\": {\n    \"ChildParam_X\": \"SomeValue\"\n  },\n  \"body\": \"Multi Line Content\"\n}\n</code></pre> <p>Note</p> <p>Your Selfview may still be open</p> <p>Run the following in your terminal window to close selfview</p> <pre><code>xCommand Video Selfview Set Mode: Off\n</code></pre> Challenge: Alter <code>Execute an xCommand</code> in your Cloud xAPI Postman Collection <p>Rather than re-open your terminal session, you can go back to <code>Execute an xCommand</code> in your Cloud xAPI Postman Collection, and update the <code>argument</code> object to set the Mode parameter to Off</p> <p>     Giving Up? Check out the Challenge Answers Page  </p> <ul> <li> <p>xAPI: xCommand UserInterface Extensions Panel Save</p> </li> <li> <p>Task:</p> <ul> <li> <p>Structure the xAPI Path above in the <code>URL</code></p> </li> <li> <p>In the Postman request Body, structure the following parameters into the <code>arguments</code> object</p> <ul> <li>PanelId: wx1_lab_multilineCommand</li> </ul> </li> <li> <p>In the Postman request Body, format the XML below into the <code>body</code> object</p> Your &lt;body&gt; Value<pre><code>&lt;Extensions&gt;\n  &lt;Panel&gt;\n    &lt;Order&gt;1&lt;/Order&gt;\n    &lt;PanelId&gt;wx1_lab_multilineCommand&lt;/PanelId&gt;\n    &lt;Location&gt;HomeScreen&lt;/Location&gt;\n    &lt;Icon&gt;Info&lt;/Icon&gt;\n    &lt;Color&gt;#FF70CF&lt;/Color&gt;\n    &lt;Name&gt;MultiLine Command [Section 2.4.3]&lt;/Name&gt;\n    &lt;ActivityType&gt;Custom&lt;/ActivityType&gt;\n  &lt;/Panel&gt;\n&lt;/Extensions&gt;\n</code></pre> </li> <li> <p>Once the Postman Request has been updated, Save the request, select Send and review the Postman Terminal's repsonse and observe any changes to your device</p> </li> </ul> <p>Note</p> <p>JSON is not a big fan of multiline strings. No need to flatten it to one line yourself, we have a <code>Flatten Multiline String Tool</code> on the Tools page</p> <p>   Open Tools  Page  </p> <p>Once the Postman Request has been updated, Save the request, select Send and review the Postman Terminal's repsonse and observe any changes to your device</p> </li> </ul> View properly formatted Url, Body and Successful Response UrlBodyResponse <p><pre><code>https://webexapis.com/v1/xapi/command/UserInterface.Extensions.Panel.Save</code></pre></p> <pre><code>{\n  \"deviceId\": \"{{device_Id}}\",\n  \"arguments\": {\n    \"PanelId\": \"wx1_lab_multilineCommand\"\n  },\n  \"body\": \"&lt;Extensions&gt; &lt;Panel&gt; &lt;Order&gt;1&lt;/Order&gt; &lt;PanelId&gt;wx1_lab_multilineCommand&lt;/PanelId&gt; &lt;Location&gt;HomeScreen&lt;/Location&gt; &lt;Icon&gt;Info&lt;/Icon&gt; &lt;Color&gt;#FF70CF&lt;/Color&gt; &lt;Name&gt;MultiLine Command [Section 2.5.4]&lt;/Name&gt; &lt;ActivityType&gt;Custom&lt;/ActivityType&gt; &lt;/Panel&gt; &lt;/Extensions&gt;\"\n}\n</code></pre> <pre><code>{\n  \"deviceId\": \"[YOUR_DEVICE_ID]\",\n  \"result\": {}\n}\n</code></pre> Lesson: Execute an xCommand which generates data and responds <ul> <li> <p>xAPI: xCommand UserInterface Extensions List</p> </li> <li> <p>Task:</p> <ul> <li> <p>Structure the xAPI Path above in the <code>URL</code></p> </li> <li> <p>In the Postman request Body, structure the following parameters using JSON format into the <code>arguments</code> object.</p> <ul> <li>ActivityType: Custom</li> </ul> </li> </ul> </li> <li> <p>Once the Postman Request has been updated, Save the request, select Send and review the Postman Terminal's repsonse and observe any changes to your device</p> </li> </ul> View properly formatted Url, Body and Successful Response UrlBodyResponse <p><pre><code>https://webexapis.com/v1/xapi/command/UserInterface.Extensions.List</code></pre></p> <pre><code>{\n  \"deviceId\": \"{{device_Id}}\",\n  \"arguments\": {\n    \"ActivityType\": \"Custom\"\n  }\n}\n</code></pre> <pre><code>\"result\": {\n  \"Extensions\": {\n    \"Panel\": [\n      {\n        \"ActivityType\": \"Custom\",\n        \"Color\": \"#FF70CF\",\n        \"Icon\": \"Info\",\n        \"Location\": \"HomeScreen\",\n        \"Name\": \"MultiLine Command [Section 2.5.4]\",\n        \"Order\": 1,\n        \"Origin\": \"local\",\n        \"PanelId\": \"wx1_lab_multilineCommand\",\n        \"Visibility\": \"Auto\",\n        \"id\": 2\n      },\n      {\"Continues...\"}\n    ],\n    \"Version\": \"1.11\"\n  }\n}\n</code></pre>"},{"location":"wx1_1451_part_2/#255-getting-and-setting-to-xconfigurations","title":"2.5.5 - Getting and Setting to xConfigurations","text":"Lesson: Getting an xConfiguration Value <p>Click on the tabs to see how Terminal Syntax relates to Cloud xAPI Syntax</p> Terminal SyntaxCloud xAPI <p><pre><code>xConfiguration Child Child</code></pre></p> <p><pre><code>https://webexapis.com/v1/deviceConfigurations?deviceId={{device_Id}}=Child.Child</code></pre></p> <ul> <li> <p>xAPI: xConfiguration Audio DefaultVolume</p> </li> <li> <p>Task:</p> <ul> <li> <p>Structure the xAPI Path above in the <code>URL</code></p> </li> <li> <p>Once the Postman Request has been updated, Save the request, select Send and review the Postman Terminal's repsonse and observe any changes to your device</p> </li> </ul> </li> </ul> View properly formatted URL, Body and Successful Response URLBodyResponse <p><pre><code>https://webexapis.com/v1/deviceConfigurations?deviceId={{device_Id}}&amp;key=Audio.DefaultVolume</code></pre></p> <p>No Body Required</p> <pre><code>{\n    \"deviceId\": \"{{device_Id}}\",\n    \"items\": {\n        \"Audio.DefaultVolume\": {\n            \"value\": 71, // &lt;-- Response Includes New Value for Path\n            \"source\": \"configured\",\n            \"sources\": {\n                \"default\": {\n                    \"value\": 50,\n                    \"editability\": {\n                        \"isEditable\": false,\n                        \"reason\": \"FACTORY_DEFAULT\"\n                    },\n                    \"level\": \"schemaDefault\",\n                    \"enforced\": false\n                },\n                \"configured\": {\n                    \"value\": 71,\n                    \"editability\": {\n                        \"isEditable\": true\n                    },\n                    \"level\": \"device\",\n                    \"enforced\": false\n                }\n            },\n            \"valueSpace\": {\n                \"type\": \"integer\",\n                \"maximum\": 100,\n                \"minimum\": 0\n            }\n        }\n    }\n}\n</code></pre> Lesson: Getting multiple xConfiguration Values under a common Node <p>Note</p> <p>In order to Get all configuration values under a common node, we need to insert a wildcard (*) into the path as the last argument</p> <p>Click each Tab below to see how the wildcard is implemented in the URL</p> Full xAPI PathNext Higher Common NodeHighest Common Node <p><pre><code>https://webexapis.com/v1/deviceConfigurations?deviceId={{device_Id}}&amp;key=Bluetooth.Allowed</code></pre></p> <p><pre><code>https://webexapis.com/v1/deviceConfigurations?deviceId={{device_Id}}&amp;key=Bluetooth.*</code></pre></p> <p><pre><code>https://webexapis.com/v1/deviceConfigurations?deviceId={{device_Id}}&amp;key=</code></pre></p> <p>Note</p> <p>When requesting the entire xConfiguration Branch, path or wildcard id not required, simply remove the entire <code>key</code> URL parameter</p> <ul> <li> <p>xAPI: xConfiguration Audio</p> </li> <li> <p>Task:</p> <ul> <li> <p>Structure the xAPI Path above in the <code>URL</code></p> </li> <li> <p>Once the Postman Request has been updated, Save the request, select Send and review the Postman Terminal's repsonse and observe any changes to your device</p> </li> </ul> </li> </ul> View properly formatted URL, Body and Successful Response URLBodyResponse <p><pre><code>https://webexapis.com/v1/deviceConfigurations?deviceId={{device_Id}}&amp;key=Audio.*</code></pre></p> <p>No Body Required</p> <pre><code>{\n    \"deviceId\": \"{{device_Id}}\",\n    \"items\": { // &lt;-- Response Includes New Values for Common Path\n      \"Audio.Input.Ethernet[1].Channel[2].Gain\": {\n        \"value\": 45,\n        \"source\": \"default\",\n        \"sources\": {\n          \"default\": {\n            \"value\": 45,\n            \"editability\": {\n              \"isEditable\": false,\n              \"reason\": \"FACTORY_DEFAULT\"\n            },\n            \"level\": \"schemaDefault\",\n            \"enforced\": false\n          },\n          \"configured\": {\n            \"value\": null,\n            \"editability\": {\n              \"isEditable\": true\n            },\n            \"level\": \"device\",\n            \"enforced\": false\n          }\n        },\n        \"valueSpace\": {\n          \"type\": \"integer\",\n          \"maximum\": 70,\n          \"minimum\": 0\n        }\n      },\n      [\"And the list continues...[5000+ Lines]\"]\n    }\n}\n</code></pre> Lesson: Set a new xConfiguration Value <p>Note</p> <p>Unlike commands, configurations use HTTP Patches. This is because you're making a change to the configuration stored on Webex Control Hub, then control hub will forward changes to the device.</p> <p>The benefit here, is that your device doesn't need to be online to make these changes . So in the case of making bulk changes across your portfolio, Webex Control Hub will apply the configurations you set to all online devices, and should a device be offline, Webex Control Hub will apply those config changes after the device reconnects to the cloud on boot</p> <p>With that said, execution of xConfiguration changes via Cloud xAPI changes how the URL and Body are structured</p> <p>Click on the tabs to see how Terminal Syntax relates to Cloud xAPI Syntax</p> Terminal SyntaxCloud xAPI Syntax <pre><code>xConfig Child ChildParam_X: 1\n</code></pre> <p>Url: https://webexapis.com/v1/deviceConfigurations?deviceId={{device_Id}}</p> Set new ValueSet Default Value <p>To set a new value, the <code>op</code> object must have a value of replace and the <code>value</code> object requires the configurations new value</p> Body<pre><code>[\n    {\n        \"op\": \"replace\",\n        \"path\": \"Child.ChildParam_X/sources/configured/value\",\n        \"value\": 1\n    }\n]\n</code></pre> <p>To the configuration back to it's default value, the <code>op</code> object must have a value of remove and omit <code>value</code> object</p> Body<pre><code>[\n    {\n        \"op\": \"remove\",\n        \"path\": \"Child.Child/sources/configured/value\",\n    }\n]\n</code></pre> <p>Important</p> <p>All xAPI paths in the <code>path</code> object must end with /sources/configured/value</p> <ul> <li> <p>xAPI: xConfiguration Audio DefaultVolume</p> </li> <li> <p>Task: </p> <ul> <li> <p>Assign the correct value to the <code>op</code> object in order to Set a new value for the xAPI above</p> </li> <li> <p>Structure the xAPI above in the path correctly, be sure to end that path with /sources/configured/value</p> </li> <li> <p>Assign a value of 100 to the <code>value</code> object</p> </li> </ul> </li> </ul> View properly formatted URL, Body and Successful Response URLBodyResponse <p><pre><code>https://webexapis.com/v1/deviceConfigurations?deviceId={{device_Id}}</code></pre></p> <pre><code>[\n    {\n        \"op\": \"replace\",\n        \"path\": \"Audio.DefaultVolume/sources/configured/value\",\n        \"value\": 100\n    }\n]\n</code></pre> <pre><code>{\n  \"deviceId\": \"{{device_Id}}\",\n  \"items\": {\n    \"Audio.DefaultVolume\": {\n      \"value\": 100, // &lt;-- Response Includes New Value for Path\n      \"source\": \"configured\",\n      \"sources\": {\n        \"default\": {\n          \"value\": 50,\n          \"editability\": {\n            \"isEditable\": false,\n            \"reason\": \"FACTORY_DEFAULT\"\n          },\n          \"level\": \"schemaDefault\",\n          \"enforced\": false\n        },\n        \"configured\": {\n          \"value\": 50,\n          \"editability\": {\n            \"isEditable\": true\n          },\n          \"level\": \"device\",\n          \"enforced\": false\n        }\n      },\n      \"valueSpace\": {\n        \"type\": \"integer\",\n        \"maximum\": 100,\n        \"minimum\": 0\n      }\n    },\n    [\"10000+ Line Response...\"]\n  }\n}\n</code></pre> Lesson: Set an xConfiguration to it's Default Value <ul> <li> <p>xAPI: xConfiguration Audio DefaultVolume</p> </li> <li> <p>Task: </p> <ul> <li> <p>Assign the correct value to the <code>op</code> object in order to Set the Default Value for the xAPI above</p> </li> <li> <p>Structure the xAPI above in the path correctly, be sure to end that path with /sources/configured/value</p> </li> </ul> </li> </ul> View properly formatted URL, Body and Successful Response URLBodyResponse <p><pre><code>https://webexapis.com/v1/deviceConfigurations?deviceId={{device_Id}}</code></pre></p> <pre><code>[\n    {\n        \"op\": \"remove\",\n        \"path\": \"Audio.DefaultVolume/sources/configured/value\"\n    }\n]\n</code></pre> <pre><code>{\n  \"deviceId\": \"{{device_Id}}\",\n  \"items\": {\n    \"Audio.DefaultVolume\": {\n      \"value\": 50,  // &lt;-- Response Includes New Value for Path\n      \"source\": \"configured\",\n      \"sources\": {\n        \"default\": {\n          \"value\": 50,\n          \"editability\": {\n            \"isEditable\": false,\n            \"reason\": \"FACTORY_DEFAULT\"\n          },\n          \"level\": \"schemaDefault\",\n          \"enforced\": false\n        },\n        \"configured\": {\n          \"value\": 50,\n          \"editability\": {\n            \"isEditable\": true\n          },\n          \"level\": \"device\",\n          \"enforced\": false\n        }\n      },\n      \"valueSpace\": {\n        \"type\": \"integer\",\n        \"maximum\": 100,\n        \"minimum\": 0\n      }\n    },\n    [\"10000+ Line Response...\"]\n  }\n}\n</code></pre> Lesson: Setting multiple xConfiguration Values in a single Request <p>Note</p> <p>Setting multiple configuration values can be handled in a single Patch request. The Body starts as an Array, we only need to push more properties into the array</p> <p>Click the Tabs below to view multiple xConfigurations structured in a single request body</p> <p>=== \"Single xConfig\"</p> <pre><code>  ``` JSON\n  [\n      {\n          \"op\": \"remove\",\n          \"path\": \"Child_A.Child_A_Param/sources/configured/value\"\n      }\n  ]\n  ```\n</code></pre> <p>=== \"2 xConfigs\"</p> <pre><code>  ``` JSON\n  [\n      {\n          \"op\": \"remove\",\n          \"path\": \"Child_A.Child_A_Param/sources/configured/value\"\n      },\n      {\n          \"op\": \"remove\",\n          \"path\": \"Child_B.Child_B_Param/sources/configured/value\"\n      }\n  ]\n  ```\n</code></pre> <p>=== \"3 xConfigs\"</p> <pre><code>  ``` JSON\n  [\n      {\n          \"op\": \"remove\",\n          \"path\": \"Child_A.Child_A_Param/sources/configured/value\"\n      },\n      {\n          \"op\": \"remove\",\n          \"path\": \"Child_B.Child_B_Param/sources/configured/value\"\n      },\n      {\n          \"op\": \"remove\",\n          \"path\": \"Child_B.Child_B_Param/sources/configured/value\"\n      }\n  ]\n  ```\n</code></pre> <ul> <li> <p>xAPI(s):</p> <ul> <li>xConfiguration Video Input Airplay Mode: On</li> <li>xConfiguration Video Input Airplay Beacon: Auto</li> </ul> </li> <li> <p>Task:</p> <ul> <li> <p>Assign the correct value to the <code>op</code> object in order to Set a new value for each xAPI above</p> </li> <li> <p>Structure the xAPI above in the path correctly, be sure to end that path with /sources/configured/value</p> </li> <li> <p>Assign the Values for each xAPI Value above to their <code>value</code> object</p> </li> <li> <p>Hint: Reference the <code>2 xConfig</code> tab above</p> </li> </ul> </li> </ul> View properly formatted URL, Body and Successful Response URLBodyResponse <p><pre><code>https://webexapis.com/v1/deviceConfigurations?deviceId={{device_Id}}</code></pre></p> <pre><code>[\n    {\n        \"op\": \"remove\",\n        \"path\": \"Audio.DefaultVolume/sources/configured/value\"\n    }\n]\n</code></pre> <pre><code>{\n  \"deviceId\": \"{{device_Id}}\",\n  \"items\": {\n    \"Video.Input.AirPlay.Mode\": {\n      \"value\": \"On\", // &lt;-- Response Includes New Value for Path\n      \"source\": \"configured\",\n      \"sources\": {\n        \"default\": {\n          \"value\": \"Off\",\n          \"editability\": {\n            \"isEditable\": false,\n            \"reason\": \"FACTORY_DEFAULT\"\n          },\n          \"level\": \"schemaDefault\",\n          \"enforced\": false\n        },\n        \"configured\": {\n          \"value\": \"On\",\n          \"editability\": {\n            \"isEditable\": true\n          },\n          \"level\": \"device\",\n          \"enforced\": false\n        }\n      },\n      \"valueSpace\": {\n        \"enum\": [\n          \"Off\",\n          \"On\"\n        ],\n        \"type\": \"string\"\n      }\n    },\n    \"Video.Input.AirPlay.Beacon\": {\n      \"value\": \"Auto\", // &lt;-- Response Includes New Value for Path\n      \"source\": \"configured\",\n      \"sources\": {\n        \"default\": {\n          \"value\": \"Auto\",\n          \"editability\": {\n            \"isEditable\": false,\n            \"reason\": \"FACTORY_DEFAULT\"\n          },\n          \"level\": \"schemaDefault\",\n          \"enforced\": false\n        },\n        \"configured\": {\n          \"value\": \"Auto\",\n          \"editability\": {\n            \"isEditable\": true\n          },\n          \"level\": \"device\",\n          \"enforced\": false\n        }\n      },\n      \"valueSpace\": {\n        \"enum\": [\n          \"Auto\",\n          \"Off\"\n        ],\n        \"type\": \"string\"\n      }\n    },\n    [\"10000+ Line Response...\"]\n  }\n}\n</code></pre>"},{"location":"wx1_1451_part_2/#256-getting-xstatuses","title":"2.5.6 - Getting xStatuses","text":"Lesson: Getting an xStatus Value <p>Click on the tabs to see how Terminal Syntax relates to Cloud xAPI Syntax</p> Terminal SyntaxCloud xAPI <p><pre><code>xStatus Child Child</code></pre></p> <p><pre><code>https://webexapis.com/v1/xapi/status?deviceId={{device_Id}}&amp;name=Child.Child</code></pre></p> <ul> <li> <p>xAPI: xStatus Audio Volume</p> </li> <li> <p>Task:</p> <ul> <li> <p>Structure the xAPI Path above in the <code>URL</code> of your Postman Request</p> </li> <li> <p>Once the Postman Request has been updated, Save the request, select Send and review the Postman Terminal's repsonse and observe any changes to your device</p> </li> </ul> </li> </ul> View properly formatted URL, Body and Successful Response URLBodyResponse <p><pre><code>https://webexapis.com/v1/xapi/status?deviceId={{device_Id}}&amp;name=Audio.Volume</code></pre></p> <p>No Body Required</p> <p>``` { .json , .no-copy } {   \"deviceId\": \"{{device_Id}}\",   \"result\": {     \"Audio\": {       \"Volume\": 71     }   } }</p> Lesson: Get multiple xStatus Values under a Common Node <ul> <li> <p>xAPI: xStatus Audio</p> </li> <li> <p>Task:</p> <ul> <li> <p>Structure the xAPI Path above in the <code>URL</code> of your Postman Request</p> </li> <li> <p>Once the Postman Request has been updated, Save the request, select Send and review the Postman Terminal's repsonse and observe any changes to your device</p> </li> </ul> </li> </ul> View properly formatted URL, Body and Successful Response URLBodyResponse <p><pre><code>https://webexapis.com/v1/xapi/status?deviceId={{device_Id}}&amp;name=Audio.*</code></pre></p> <p>No Body Required</p> <pre><code>{\n  \"deviceId\": \"{{device_Id}}\",\n  \"result\": {\n    \"Audio\": {\n      \"Devices\": {\n        \"Bluetooth\": {\n          \"ActiveProfile\": \"None\"\n        },\n        \"HandsetUSB\": {\n          \"ConnectionStatus\": \"NotConnected\",\n          \"Cradle\": \"OnHook\"\n        },\n        \"HeadsetUSB\": {\n          \"ConnectionStatus\": \"NotConnected\",\n          \"Description\": \"\",\n          \"Manufacturer\": \"\"\n        }\n      },\n      [\"500+ Line Response...\"].\n    }\n  }\n}\n</code></pre>"},{"location":"wx1_1451_part_2/#257-subscribing-to-xconfigurations-xstatuses-and-xevents","title":"2.5.7 - Subscribing to xConfigurations, xStatuses and xEvents","text":"<p>Subscribing to Cloud xAPI requires us to setup a Workspace Integration</p> <p>A Workspace Integration is a service you spin up that provides a Webhook, which you take and configure it your Webex Control hub instance.</p> <p>This is not covered by this lab</p> <p>   Learn More about Workspace Integrations  </p>"},{"location":"wx1_1451_part_2/#258-section-25-cleanup","title":"2.5.8 - Section 2.5 Cleanup","text":"<p>Important</p> <ul> <li>Press the <code>Subscription Assistant Button</code> on your Touch Interface</li> <li>Under the Section Cleanup Page, select the Run Section Cleanup? button</li> <li>Select Yes, Run the Cleanup Script</li> </ul> <p> Section Cleanup Confirmation </p> <p>This will reverse the changes we've made to the endpoint, and leave us ready for the next section</p> You can run the cleanup via the terminal as well <p>Copy the contents below into your terminal window and run them all at once</p> Type into terminal and press Enter<pre><code>xConfig Audio DefaultVolume: 50\nxCommand UserInterface Extensions Panel Remove PanelId: wx1_lab_multilineCommand\nxCommand Video Selfview Set Mode: Off FullscreenMode: Off\nxCommand Video Input SetMainVideoSource ConnectorId: 1\nxCommand Audio Volume SetToDefault Device: Internal\nxCommand HTTPFeedBack Deregister FeedbackSlot: 1 FeedbackSlot: 2 FeedbackSlot: 3 FeedbackSlot: 4\n</code></pre>"},{"location":"wx1_1451_part_2/#section-26-accessing-the-xapi-via-the-macro-editor","title":"Section 2.6: Accessing the xAPI via the Macro Editor","text":"<p>Abstract</p> <p>The Macro Editor is a <code>Web Based IDE</code> that's built into each Cisco Codec running ce9.2.X or higher (excluding the Sx10) that allows for the development of solutions using the Device xAPI and ES6 Javascript. In a sense, the Macro Editor is like a virtual room control processor built right into the product.</p> <p>It's capable of running 10 active macros at any given time and allows for storage of up to 2mb of text across all files (Sounds small, but it's more than you think ).</p> <p>You may have as many inactive macros as you can contain with the 2mb limit, which can be useful for storing information, organizing and modularizing work.</p> <ul> <li>For example, some developers in the community have implemented function libraries formatted as a macro, such as <ul> <li>Gui-Do: A suite of functions that enables dynamic UI generation with the use of JSON Object</li> <li>Audio Zone Manager: Or AZM is a suite of function that enables the mapping of audio microphones inputs to other resources for audio based automation in space.</li> </ul> </li> </ul> <p>Important</p> <p>Note</p> <p>This section is meant to teach your the structure of the xAPI when working the Macro Editor. </p> <p>Though written in Javascript, this is not a javascript tutorial. There are links to relevant topics throughout the section in case you're stuck on any particular topic</p> <p>Lab: Build Room Documentation Macro  will leverage the Macro Editor and the UI Extensions of your codec to develop a solution using the xAPI</p> <p>Syntax covered here is not only relevant for the Macro Editor but also the <code>jsxapi</code> Node.Js module which is not covered in this Lab</p> <p>Section Requirements</p> <p>Download the MacroPak below, these Macros will be used throughout section 2.6</p> <ul> <li> <p> Click the icon below to Download the MacroPak </p> <p> MacroPak </p> </li> </ul>"},{"location":"wx1_1451_part_2/#261-enabling-macros","title":"2.6.1 - Enabling Macros","text":"<ul> <li>Login to your Codec's Web UI</li> <li>Navigate to Settings&gt;Macro Editor<ul> <li>The Macro Editor is disabled by Default, press enable</li> </ul> </li> </ul> Tip <p>Enabling through the WebUI as we had above can be don via the xAPI as well.</p> <p>Running xConfiguration Macros Mode: On does the same thing.</p> <p>You can even run xConfigurations in bulk across your portfolio using Webex Control Hub or Ce-Deploy, both are covered in, regards to Macro Customization.</p>"},{"location":"wx1_1451_part_2/#262-navigating-the-macro-editor-and-installing-the-macropak","title":"2.6.2 - Navigating the Macro Editor and installing the MacroPak","text":"Vidcast: Macro Editor IDE Review Vidcast: Installing the MacroPack"},{"location":"wx1_1451_part_2/#263-executing-xcommands","title":"2.6.3 - Executing xCommands","text":"Lesson: Execute an xCommand <p>All device xAPIs are referenced by the imported <code>xapi</code> object. By default, a new Macro will contain</p> xAPI Import<pre><code>import xapi from 'xapi';\n</code></pre> <p>       Learn more about Imports </p> <p>Unlike other ES6 Javascript environments, you only have access to base Javascript functions and techniques as well as the device's xAPI</p> <ul> <li>You're NOT able to import external libraries into this environment.</li> </ul> <p>All xAPI can be accessed by first referencing the <code>xapi</code> object following by the same command path using dot notation</p> <p>Click on the tabs to see how Terminal Syntax relates to Macro Syntax</p> Terminal SyntaxMacro Syntax <pre><code>xCommand Time DateTime Get\n\nOK\n*r DateTimeGetResult (status=OK): \n*r DateTimeGetResult Day: 24\n*r DateTimeGetResult Hour: 0\n*r DateTimeGetResult Minute: 47\n*r DateTimeGetResult Month: 9\n*r DateTimeGetResult Second: 1\n*r DateTimeGetResult Year: 2024\n** end\n</code></pre> <pre><code>import xapi from 'xapi';\n\nxapi.Command.Time.DateTime.Get().then(time =&gt; console.log(time))\n\n/* Log Output\n{\n  \"Day\": \"24\",\n  \"Hour\": \"0\",\n  \"Minute\": \"47\",\n  \"Month\": \"9\",\n  \"Second\": \"44\",\n  \"Year\": \"2024\",\n  \"status\": \"OK\"\n}\n*/\n</code></pre>  Why is <code>.then(time =&gt; console.log(time))</code> trailing the command? <p>Well that's the nature of this environment. In a terminal session, the command is immediately followed by a response</p> <p>But in working with the xAPI in a Macro or <code>jsxapi</code> NodeJs environment, the response is certainly there, but we need to capture in an object and then log it to the console.</p> <p>Most, if not all, functions from the <code>xapi</code> object are Javascript Promises. When executed, they'll either resolve or reject (OK or Error) and you can handle them as you see fit in your automation.</p> <p>       Learn more about Promises </p> To get a bit more technical <p>In the Example above, we first call the <code>xCommand Time DateTime Get</code> command. JS Promises can leverage the <code>.then()</code> method, which allows us to take that value of a successful outcome and store it into another object, in this case <code>time</code>, and when <code>time</code> is populated with a value, we can immediately run a function <code>=&gt;</code> of this value to run additional processes. Here, we pass it into the in-built JS function; <code>console.log</code>, to log it into the Macro's log output.</p> <p>If your function is rejected, then the <code>.catch()</code> method  can handle those outcomes in the same way <code>.then()</code> works on resolutions.</p> <p>Tip</p> <p>Parameters for Macro Syntax are setup as a JSON Object and must be passed into a function as a parameter</p> <p>   Learn more about JSON </p> <p>At a high level, functions defined in the <code>xapi</code> can have 1 or 2 function parameters pass. One being the parameters for the xAPI call writing in a JSON Object [Represented by <code>myChildParams</code> below], the other for multiline content (if available) [Represented by <code>myMultiLineContent</code> below]</p> <p>It's important to note that not all <code>xapi</code> functions have multiline input, but it's good to know where it's placed should there be any</p> Parameter Example <pre><code>import xapi from 'xapi';\n\nconst myChildParams = { Parameter: 'One', Parameter: 2, Parameter: '...' };\nconst myMultiLineContent= `...`;\n\nxapi.Parent.Child(myChildParams, myMultiLineContent);\n</code></pre> <p>       Learn more about Functions </p> <ul> <li> <p>xAPI: xCommand Video Selfview Set</p> </li> <li> <p>Task: </p> <ul> <li>Activate the xCommands_Lesson-1_MacroPak_2-6-3 macro</li> <li>Structure the xAPI Path above using Macro Syntax and apply the following parameters<ul> <li>Mode: On</li> <li>FullScreenMode: On</li> <li>OnMonitorRole: First</li> </ul> </li> </ul> </li> <li> <p>Save your Macro and monitor the Macro Console as well as the Device to see if you had a successful response</p> </li> <li> <p>When Complete, deactivate the xCommands_Lesson-1_MacroPak_2-6-3 macro</p> </li> </ul> View Successful Macro Syntax Simple ExecutionPromises &gt; <code>.then()</code> MethodPromises &gt; Async Await <pre><code>import xapi from 'xapi';\n\nxapi.Command.Video.Selfview.Set({ Mode: \"On\", FullScreenMode: \"On\", OnMonitorRole: \"First\" });\n</code></pre> <pre><code>import xapi from 'xapi';\n\nxapi.Config.Video.Selfview.Set({ Mode: \"On\", FullScreenMode: \"On\", OnMonitorRole: \"Off\" }).then(resolution =&gt; {\n\n  // Log the xAPI resolution\n  console.log('Config.Video.Selfview.Set Resolution', resolution);\n\n  /* Run Additional Function Here*/\n\n}).catch(error =&gt; {\n\n  // Log the xAPI rejection\n  console.error('Config.Video.Selfview.Set Error', error);\n\n  /* Run Additional Function Here*/\n\n});\n</code></pre> <p>       Learn more about Promises </p> <pre><code>import xapi from 'xapi';\n\nconst setSelfview = async function(parameters =&gt; {\n  try {\n    const runxAPI = await xapi.Config.Video.Selfview.Set(parameters);\n\n    // Log the Resolution captured in a runxAPI object\n    console.log(runxAPI);\n\n    /* Run Additional Function Here*/\n\n  } catch (error) (\n\n    // Log the Rejection captured in a error object\n    console.error(error);\n\n    /* Run Additional Function Here*/\n\n  );\n});\n\n// Run the setSelfview Function and pass in the Parameters for xCommand Video Selfview Set\nsetSelfview({ Mode: \"On\", FullScreenMode: \"On\", OnMonitorRole: \"Off\" });\n</code></pre> <p>       Learn more about Async Functions </p> Lesson: Execute an xCommand with multiple arguments with the same name <p>In cases where we need to declare multiple arguments of the same name, rather than duplicating and re-running the parameters, we instead leverage Javascript's Array capabilities</p> <p>   Learn more about Arrays </p> <p>Click on the tabs to see how Terminal Syntax relates to Macro Syntax</p> Terminal SyntaxMacro Syntax <p><pre><code>xParent Child ChildParam_X: 1, ChildParam_X: 2\n</code></pre> </p> <pre><code>import xapi from 'xapi';\n\nxapi.Parent.Child({\n  ChildChildParam_X: [1, 2] // Rather than calling ChildParam_X twice, we'll simply place both values we need into an Array\n})\n</code></pre> <ul> <li> <p>xAPI(s): </p> <ul> <li>xCommand Video Selfview Set</li> <li>xCommand Video Input SetMainVideoSource</li> </ul> </li> <li> <p>Task: </p> <ul> <li>Activate the xCommands_Lesson-2_MacroPak_2-6-3 macro</li> <li>Structure xCommand Video Input SetMainVideoSource using Macro Syntax and apply the following parameters, but assign the value <code>1</code> to ConnectorId twice</li> <li>ConnectorId: 1</li> <li>Layout: Equal</li> <li>Add this xCommand to the showAndCompose() function</li> <li> <p>Save your Macro and monitor the Macro Console as well as the Device to see if you had a successful response</p> </li> <li> <p>When Complete, deactivate the xCommands_Lesson-2_MacroPak_2-6-3 macro</p> </li> </ul> </li> </ul> View Successful Macro Syntax <pre><code>import xapi from 'xapi';\n\n/**\n * Lab Guide: https://webexcc-sa.github.io/LAB-1451/wx1_1451_part_2/#263-executing-xcommands\n * \n * Lesson 2: Execute an xCommand with multiple arguments with the same name\n */\n\nconst showAndComposeCamera = function () {\n  xapi.Command.Video.Selfview.Set({ Mode: 'On', FullscreenMode: 'On', OnMonitorRole: 'First' });\n\n  // Enter your solution below this line\n  xapi.Command.Video.Input.SetMainVideoSource({\n    ConnectorId: [1, 1],\n    Layout: 'Equal'\n  })\n  // Don't go past this line\n}\n\nshowAndComposeCamera();\n</code></pre> Challenge: Log and Handle Errors <ul> <li>Convert the <code>showAndComposeCamera()</code> function into an Async Function</li> <li>Wrap all xAPI references in a Try Catch block</li> <li>Add a console log for a Successful outcome</li> <li> <p>Add a console log for an Error</p> </li> <li> <p>Save the Macro and observe the log</p> </li> </ul> <p>   Giving Up? Check out the Challenge Answers Page  </p> Lesson: Execute an xCommand with a multiline argument <p>Click on the tabs to see how Terminal Syntax relates to Macro Syntax</p> Terminal SyntaxMacro Syntax <p><pre><code>[Command Path]\n[Multi Line Content]\n.\n</code></pre> </p> <pre><code>import xapi from 'xapi';\n\nconst myChildParams = { Parameter: 'One', Parameter: 2, Parameter: '...' };\nconst myMultiLineContent= `...`;\n\nxapi.Parent.Child(myChildParams, myMultiLineContent);\n</code></pre> <ul> <li> <p>xAPI(s): </p> <ul> <li>xCommand Video Selfview Set</li> <li>xCommand Video Input SetMainVideoSource</li> <li>xCommand UserInterface Extensions Panel Save</li> </ul> </li> <li> <p>Task: </p> <ul> <li>Activate the xCommands_Lesson-3_MacroPak_2-6-3 macro</li> <li>Assign the value <code>wx1_lab_multilineCommand</code> to the myPanelId object</li> <li>Assign the following XML payload to the myUserinterface object     <pre><code>&lt;Extensions&gt;\n  &lt;Panel&gt;\n    &lt;Order&gt;1&lt;/Order&gt;\n    &lt;PanelId&gt;wx1_lab_multilineCommand&lt;/PanelId&gt;\n    &lt;Location&gt;HomeScreen&lt;/Location&gt;\n    &lt;Icon&gt;Info&lt;/Icon&gt;\n    &lt;Color&gt;#00FFFF&lt;/Color&gt;\n    &lt;Name&gt;MultiLine Command [Section 2.6.3]&lt;/Name&gt;\n    &lt;ActivityType&gt;Custom&lt;/ActivityType&gt;\n  &lt;/Panel&gt;\n&lt;/Extensions&gt;\n</code></pre></li> <li>Structure xCommand UserInterface Extensions Panel Save using Macro Syntax and apply the following parameters<ul> <li>PanelId [Use the myPanelId object for this field]</li> <li>body [Use the myUserinterfaceXML object for this field] (This is a MultiLine Argument)</li> </ul> </li> <li>Add this xCommand to the buildUserInterface() function</li> <li> <p>Save your Macro and monitor the Macro Console as well as the Device to see if you had a successful response</p> </li> <li> <p>When Complete, deactivate the xCommands_Lesson-3_MacroPak_2-6-3 macro</p> </li> </ul> </li> </ul> View Successful Macro Syntax and Log output <pre><code>import xapi from 'xapi';\n\n/**\n * Lab Guide: https://webexcc-sa.github.io/LAB-1451/wx1_1451_part_2/#263-executing-xcommands\n * \n * Lesson 3: Execute an xCommand with a multiline argument\n */\n\n// Assign values to these Objects\nconst myPanelId = 'wx1_lab_multilineCommand';\n\nconst myUserinterfaceXML = `&lt;Extensions&gt;\n      &lt;Panel&gt;\n        &lt;Order&gt;1&lt;/Order&gt;\n        &lt;PanelId&gt;wx1_lab_multilineCommand&lt;/PanelId&gt;\n        &lt;Location&gt;HomeScreen&lt;/Location&gt;\n        &lt;Icon&gt;Info&lt;/Icon&gt;\n        &lt;Color&gt;#00FFFF&lt;/Color&gt;\n        &lt;Name&gt;MultiLine Command [Section 2.6.3]&lt;/Name&gt;\n        &lt;ActivityType&gt;Custom&lt;/ActivityType&gt;\n      &lt;/Panel&gt;\n    &lt;/Extensions&gt;`\n\n\nconst buildUserInterface = async function (){\n  try {\n    // Enter your solution below this line\n\n    const saveUI = await xapi.Command.UserInterface.Extensions.Panel.Save({ PanelId: myPanelId }, myUserinterfaceXML)\n\n    // Don't go past this line\n    console.log(`Panel [${myPanelId}] saved to the codec`)\n  } catch (e){\n    console.error(e)\n  }\n}\n\n\nasync function cleanupLesson2(){\n  await xapi.Command.Video.Selfview.Set({Mode: 'Off'});\n  await xapi.Command.Video.Input.SetMainVideoSource({ConnectorId: 1, Layout: 'Equal'});\n}\n\nasync function init(){\n  await cleanupLesson2()\n\n  await buildUserInterface();\n}\n\ninit();\n</code></pre>  Having issues with saving Strings to Objects in your macro? <p>There are 3 ways to define string literals</p> <p> Key Name Example Extra Properties <code>'</code> Single Quote <code>const myString = \"It's a sunny day.\"</code> Can encapsulate a string with single quotes <code>'</code> inside <code>\"</code> Double Quote <code>const myOtherString = 'They said, \"Hello!\"';</code> Can encapsulate a string with double quotes <code>\"</code> inside <code>`</code> Backtick Quote <code>const myFinalString = <code>They didn't say \"World\"</code></code> Can encapsulate double and single quotes, allows for multiline strings, allows for string interpolation </p> <p>   Learn more about Strings </p> Lesson: Execute an xCommand which generates data and responds <p>When collecting data from an xCommand in the Macro Editor, you either need to use the <code>.then()</code> method and log that value to the console or use an Async function to capture the value of that xCommand into a object, then log that object</p> <ul> <li> <p>xAPI: xCommand UserInterface Extensions List</p> </li> <li> <p>Task:</p> <ul> <li>Activate the xCommands_Lesson-4_MacroPak_2-6-3 macro</li> <li> <p>Structure xCommand UserInterface Extensions List using Macro Syntax and do 1 of the following</p> <ul> <li> <p>Use <code>.then()</code> to capture the value of xCommand UserInterface Extensions List then log that value to the console</p> <p>Or <li> <p>declare an async function called <code>checkExtensions</code>, place xCommand UserInterface Extensions List written in Macro Syntax</p> <ul> <li>Wrap that in a Try Catch statement</li> <li>Assign the value of the xAPI to an object</li> <li>Then log the value of that object to the console</li> </ul> </li> <li> <p>Save your Macro and monitor the Macro Console as well as the Device to see if you had a successful response</p> </li> <li> <p>When Complete, deactivate the xCommands_Lesson-4_MacroPak_2-6-3 macro</p> </li> <p>          Learn more about Promises          Learn more about Async Functions </p> View Successful Macro Syntax and Log output Using <code>.then()</code>Using <code>Async Await</code> <pre><code>import xapi from 'xapi';\n\n/**\n * Lab Guide: https://webexcc-sa.github.io/LAB-1451/wx1_1451_part_2/#263-executing-xcommands\n * \n * Lesson 4: Execute an xCommand which generates data and responds\n */\n\nxapi.Command.UserInterface.Extensions.List().then(ext =&gt; {\n  console.log(ext);\n}).catch(error =&gt; {\n  console.error(error);\n});\n</code></pre> <pre><code>import xapi from 'xapi';\n\n/**\n * Lab Guide: https://webexcc-sa.github.io/LAB-1451/wx1_1451_part_2/#263-executing-xcommands\n * \n * Lesson 4: Execute an xCommand which generates data and responds\n */\n\nconst checkExtensions = async function () {\n\n  try {\n    const getExtensions = await xapi.Command.UserInterface.Extensions.List();\n    console.log(getExtensions);\n  } catch (error) {\n    console.error(error);\n  };\n};\n\ncheckExtensions();\n</code></pre>"},{"location":"wx1_1451_part_2/#264-setting-getting-and-subscribing-to-xconfigurations","title":"2.6.4 Setting, Getting and Subscribing to xConfigurations","text":"<p>Abstract</p> <p>Getting xConfiguration values, and later on xStatus Values, use the nearly same techniques for xCommands that generate data and respond.</p> <p>However, when Getting an xConfiguration or an xStatus, you'll need to add the <code>.get()</code> method at the end of the xAPI call.</p> <p>Subsequently, when Setting an xConfiguration, you'll need to add the <code>.set()</code> method at the end of the xAPI call.</p> <p>Compare Macro Command vs Config syntax</p> xCommandsxConfigurations GetxConfigurations Set <p>xapi.Command.ChildPath (childParameter, childMultiLine)</p> <p>xapi.Config.ChildPath .get()</p> <p>xapi.Config.ChildPath .get('ChildValue')</p> <p>We'll continue the remainder of the examples with only Async Await syntax, as a best practice, but if you're familiar with <code>.then()</code>, <code>.catch()</code> and <code>.finally()</code> syntax and prefer writing like that, feel free to do so</p> Lesson: Get an xConfiguration Value <ul> <li> <p>xAPI: xConfig Audio DefaultVolume</p> </li> <li> <p>Task:</p> <ul> <li>Activate the xConfigs_Lesson-1_MacroPak_2-6-4 macro</li> <li>Modify the <code>getConfigValue()</code> function by replacing the existing value of <code>targetConfig</code> with xConfig Audio DefaultVolume written in Macro Syntax</li> <li> <p>Save your Macro and monitor the Macro Console as well as the Device to see if you had a successful response</p> </li> <li> <p>When Complete, deactivate the xConfigs_Lesson-1_MacroPak_2-6-4 macro</p> </li> </ul> </li> </ul> View Successful Macro Syntax and Log output MacroLog Output <pre><code>import xapi from 'xapi';\n\n/**\n * Lab Guide: https://webexcc-sa.github.io/LAB-1451/wx1_1451_part_2/#264-setting-getting-and-subscribing-to-xconfigurations\n * \n * Lesson 1: Getting an xConfiguration Value\n */\n\n// Enter your solution below this line\n\n\nconst getConfigValue = async function () {\n  try {\n    // Modify targetConfig below\n\n    const targetConfig = await xapi.Config.Audio.DefaultVolume.get();\n\n    // Don't go past this line\n    console.log('DefaultVolume:', targetConfig)\n  } catch (e) {\n    console.error(e);\n  };\n};\n\ngetConfigValue();\n</code></pre> Timestamp Source Message HH:MM:SS [system] Runtime stopped! HH:MM:SS [system] Using XAPI transport: WebSocket HH:MM:SS [system] Starting macros... HH:MM:SS xConfigs_Lesson-1_MacroPak_2-6-4 QJS Ready HH:MM:SS xConfigs_Lesson-1_MacroPak_2-6-4 DefaultVolume: 75 Lesson: Set a new xConfiguration Value <ul> <li> <p>xAPI: xConfig Audio DefaultVolume</p> </li> <li> <p>Task:</p> <ul> <li>Activate the xConfigs_Lesson-2_MacroPak_2-6-4 macro</li> <li>Modify the <code>setConfigValue()</code> function by replacing the existing value of <code>targetConfig</code> with xConfig Audio DefaultVolume written in Macro Syntax</li> <li>Instead of hardcoding the value we want to set, place the <code>value</code> parameter into the <code>.set(value)</code> method instead<ul> <li>This will allow us to change this value easier as we call the function in different parts of our script</li> </ul> </li> <li> <p>Save your Macro and monitor the Macro Console as well as the Device to see if you had a successful response</p> </li> <li> <p>When Complete, deactivate the xConfigs_Lesson-2_MacroPak_2-6-4 macro</p> </li> </ul> </li> </ul> View Successful Macro Syntax and Log output MacroLog Output <pre><code>import xapi from 'xapi';\n\n/**\n * Lab Guide: https://webexcc-sa.github.io/LAB-1451/wx1_1451_part_2/#264-setting-getting-and-subscribing-to-xconfigurations\n * \n * Lesson 2: Set a new xConfiguration Value\n */\n\n// Enter your solution below this line\n\n\nconst setConfigValue = async function (value = 50) {\n  try {\n    // Modify targetConfig below\n\n    const targetConfig = await xapi.Config.Audio.DefaultVolume.set(value);\n\n    // Don't go past this line\n    console.debug('DefaultVolume Set');\n  } catch (e) {\n    console.error(e);\n  };\n};\n\n\nconst getConfigValue = async function () {\n  try {\n    const targetConfig = await xapi.Config.Audio.DefaultVolume.get();\n    console.log('DefaultVolume:', targetConfig);\n  } catch (e) {\n    console.error(e);\n  };\n};\n\nasync function init(){\n\n  await setConfigValue(100); // &lt;-- Change this Value [0-100] and Resave\n\n  await getConfigValue();\n}\n\ninit();\n</code></pre> Timestamp Source Message HH:MM:SS [system] Runtime stopped! HH:MM:SS [system] Using XAPI transport: WebSocket HH:MM:SS [system] Starting macros... HH:MM:SS xConfigs_Lesson-2_MacroPak_2-6-4 QJS Ready HH:MM:SS xConfigs_Lesson-2_MacroPak_2-6-4 DefaultVolume: [Some Value] Lesson: Get multiple xConfigurations under a Common Node <ul> <li> <p>xAPI: xConfig Audio</p> </li> <li> <p>Task:</p> <ul> <li>Activate the xConfigs_Lesson-3_MacroPak_2-6-4 macro</li> <li>Modify the <code>getConfigValue()</code> function by replacing the existing value of <code>targetConfig</code> with xConfig Audio written in Macro Syntax</li> <li> <p>Save your Macro and monitor the Macro Console as well as the Device to see if you had a successful response</p> </li> <li> <p>When Complete, deactivate the xConfigs_Lesson-3_MacroPak_2-6-4 macro</p> </li> </ul> </li> </ul> View Successful Macro Syntax and Log output MacroLog Output <pre><code>import xapi from 'xapi';\n\n/**\n * Lab Guide: https://webexcc-sa.github.io/LAB-1451/wx1_1451_part_2/#264-setting-getting-and-subscribing-to-xconfigurations\n * \n * Lesson 1: Getting an xConfiguration Value\n */\n\n// Enter your solution below this line\n\nconst getConfigValue = async function () {\n  try {\n    // Modify targetConfig below\n\n    const targetConfig = await xapi.Config.Audio.get();\n\n    // Don't go past this line\n    console.log('DefaultVolume:', targetConfig)\n  } catch (e) {\n    console.error(e);\n  };\n};\n\ngetConfigValue();\n</code></pre> Timestamp Source Message HH:MM:SS [system] Runtime stopped! HH:MM:SS [system] Using XAPI transport: WebSocket HH:MM:SS [system] Starting macros... HH:MM:SS xConfigs_Lesson-3_MacroPak_2-6-4 QJS Ready HH:MM:SS xConfigs_Lesson-3_MacroPak_2-6-4 <code>{\"DefaultVolume\":\"100\",\"Ethernet\":{\"Encryption\":\"Required\",\"SAPDiscovery\":{\"Address\":\"239.255.255.255\",\"Mode\":\"Off\"}},\"Input\":{\"Ethernet\":[{\"Channel\":[{\"Gain\":\"45\",\"Mode\":\"On\",\"Pan\":\"Mono\",\"Zone\":\"1\",\"id\":\"1\"},{\"Gain\":\"45\",\"Mode\":\"On\",\"Pan\":\"Mono\",\"Zone\":\"1\",\"id\":\"2\"},{\"Gain\":\"45\",\"Mode\":\"On\",\"Pan\":\"Mono\",\"Zone\":\"1\",\"id\":\"3\"},{\"Gain\":\"45\",\"Mode\":\"On\",\"Pan\":\"Mono\",\"Zone\":\"1\",\"id\":\"4\"},{\"Gain\":\"45\",\"Mode\":\"On\",\"Pan\":\"Mono\",\"Zone\":\"1\",\"id\":\"5\"},{\"Gain\":\"45\",\"Mode\":\"On\",\"Pan\":\"Mono\",\"Zone\":\"1\",\"id\":\"6\"},{\"... And the list goes on\"}],\"EchoControl\":{\"Mode\":\"On\",\"NoiseReduction\":\"On\"},\"Equalizer\":{\"ID\":\"1\",\"Mode\":\"Off\"},\"Mode\":\"On\",\"id\":\"1\"}]}}{...\"And the List Goes On\"}</code> Lesson: Subscribe and Unsubscribe to an xConfiguration <p>Info</p> <p>Subscriptions in the Macro Editor introduce another method we can append to the end of the path called <code>.on()</code></p> <p><code>.on()</code> allows us to subscribe to any changes in xConfigurations, xStatuses and xEvents until the script has either stopped or until the xAPI path is unsubscribed too</p> <p><code>.on()</code> expect an object, similar to using <code>.then()</code> for you to place the incoming data and run function off of it</p> <p>Click on the tabs to see how Terminal Syntax relates to Macro Syntax</p> Terminal SyntaxMacro Syntax <pre><code>xFeedback Register Configuration/Child/Child\n** end\n\nOK\n*c xConfiguration Child Child Value: 85\n** end\n*c xConfiguration Child Child Value: 44\n** end\n*c xConfiguration Child Child Value: 36\n** end\n</code></pre> <pre><code>import xapi from 'xapi';\n\nxapi.Configuration.Child.Child.on(ChildValue =&gt; {\n  console.log('New ChildValue:', ChildValue);\n});\n\n/* Log Output\nNew ChildValue: 85\nNew ChildValue: 44\nNew ChildValue: 36\n*/\n</code></pre> <ul> <li> <p>xAPI: xConfiguration Audio DefaultVolume</p> </li> <li> <p>Task:</p> <ul> <li>Activate the xConfigs_Lesson-4_MacroPak_2-6-4 macro</li> <li>Modify the <code>subscribeToDefaultVolume</code> object by replacing it's value with xConfig Audio written in Macro Syntax using the <code>.on()</code> method<ul> <li>In order to unsubscribe, we need to assign our xAPI subscription to an object, so we can later call it, which will end it's subscription</li> <li>For example, after you assign the subscribeToDefaultVolume properly, running subscribeToDefaultVolume() will stop your active subscription</li> </ul> </li> <li> <p>Save your Macro and monitor the Macro Console as well as the Device to see if you had a successful response</p> <ul> <li>NOTE: This macro will automatically unsubscribe for you. Review those steps, to get a better understand as to how we unsubscribe.</li> </ul> </li> <li> <p>When Complete, deactivate the xConfigs_Lesson-4_MacroPak_2-6-4 macro</p> </li> </ul> </li> </ul> View Successful Macro Syntax and Log output MacroLog Output <pre><code>import xapi from 'xapi';\n\n/**\n * Lab Guide: https://webexcc-sa.github.io/LAB-1451/wx1_1451_part_2/#264-setting-getting-and-subscribing-to-xconfigurations\n * \n * Lesson 4: Subscribe and Unsubscribe to an xConfiguration\n*/\n\nconst delay_in_seconds = 10;\n\n// Edit this Object to include your xConfiguration Subscription\nconst subscribeToDefaultVolume = xapi.Config.Audio.DefaultVolume.on(event =&gt; {\n  console.log('DefaultVolume Set to:', event)\n})\n\n// Do not edit past this line, but feel free to review what's going on :)\n\n// Here, we use JS Timeouts to set an action to run after X seconds. Timeouts use milliseconds, hence why we multiply by 1000\nsetTimeout(() =&gt; {\n\n  subscribeToDefaultVolume(); //&lt;-- By calling the Object we assigned our Subscription too as a function(), we will unsubscribe from it\n\n  console.warn(\"DefaultVolume Subscription stopped!\");\n\n}, delay_in_seconds * 1000)\n\n\n// Here, we're randomly assigning a value between 1 and 100 to the Default Volume, so we can see that configuration on our Subscription\nfunction setRandomDefaultVolume() {\n  const randomValue = Math.floor(Math.random() * 100) + 1;\n\n  xapi.Config.Audio.DefaultVolume.set(randomValue);\n}\n\n\n// This countdown is used to help you visualize when the process will complete it's course\n// We use console.warn to have this countdown print in another color in the Macro Console\nfunction countdown(startNumber) {\n  let currentNumber = startNumber;\n\n  console.warn(`DefaultVolume Subscription stopping in [${currentNumber}] seconds`);\n\n  const interval = setInterval(() =&gt; {\n    currentNumber--;\n    if (currentNumber &gt; 0) {\n      console.warn(`DefaultVolume Subscription stopping in [${currentNumber}] seconds`);\n    }\n\n    if (currentNumber &lt; 1) {\n      clearInterval(interval);\n    }\n  }, 1000);\n}\n\nfunction init() {\n  setInterval(() =&gt; {\n    setRandomDefaultVolume();\n  }, 500)\n\n  countdown(delay_in_seconds);\n}\n\ninit();\n</code></pre> Time Source Message HH:MM:SS [system] Runtime stopped! HH:MM:SS [system] Using XAPI transport: WebSocket HH:MM:SS [system] Starting macros... HH:MM:SS xConfigs_Lesson-4_MacroPak_2-6-4 DefaultVolume Subscription stopping in [5] seconds HH:MM:SS xConfigs_Lesson-4_MacroPak_2-6-4 QJS Ready HH:MM:SS xConfigs_Lesson-4_MacroPak_2-6-4 DefaultVolume Set to: 70 HH:MM:SS xConfigs_Lesson-4_MacroPak_2-6-4 DefaultVolume Subscription stopping in [4] seconds HH:MM:SS xConfigs_Lesson-4_MacroPak_2-6-4 DefaultVolume Set to: 48 HH:MM:SS xConfigs_Lesson-4_MacroPak_2-6-4 DefaultVolume Set to: 13 HH:MM:SS xConfigs_Lesson-4_MacroPak_2-6-4 DefaultVolume Subscription stopping in [3] seconds HH:MM:SS xConfigs_Lesson-4_MacroPak_2-6-4 DefaultVolume Set to: 92 HH:MM:SS xConfigs_Lesson-4_MacroPak_2-6-4 DefaultVolume Set to: 52 HH:MM:SS xConfigs_Lesson-4_MacroPak_2-6-4 DefaultVolume Subscription stopping in [2] seconds HH:MM:SS xConfigs_Lesson-4_MacroPak_2-6-4 DefaultVolume Set to: 46 HH:MM:SS xConfigs_Lesson-4_MacroPak_2-6-4 DefaultVolume Set to: 69 HH:MM:SS xConfigs_Lesson-4_MacroPak_2-6-4 DefaultVolume Subscription stopping in [1] seconds HH:MM:SS xConfigs_Lesson-4_MacroPak_2-6-4 DefaultVolume Set to: 21 HH:MM:SS xConfigs_Lesson-4_MacroPak_2-6-4 DefaultVolume Set to: 57 HH:MM:SS xConfigs_Lesson-4_MacroPak_2-6-4 DefaultVolume Subscription stopped! Lesson: Subscribe and Unsubscribe to Multiple xConfigurations under a Common Node <p>Info</p> <p>Just like we can subscribe to 1 point of interest in an xConfig branch, we can subscribe to a Higher Common Node as well</p> <p>We'll do so for the Airplay Config section of you codec</p> <ul> <li> <p>xAPI: xConfiguration Video Input Airplay</p> </li> <li> <p>Task:</p> <ul> <li>Activate the xConfigs_Lesson-5_MacroPak_2-6-4 macro</li> <li>Modify the <code>subscribeToAirplay</code> object by replacing it's value with xConfiguration Video Input Airplay written in Macro Syntax using the <code>.on()</code> method<ul> <li>In order to unsubscribe, we need to assign our xAPI subscription to an object, so we can later call it, which will end it's subscription</li> <li>For example, after you assign the subscribeToAirplay properly, running subscribeToAirplay() will stop your active subscription</li> </ul> </li> <li> <p>Save your Macro and monitor the Macro Console as well as the Device to see if you had a successful response</p> <ul> <li>NOTE: This macro will automatically unsubscribe for you. Review those steps, to get a better understand as to how we unsubscribe.</li> </ul> </li> <li> <p>When Complete, deactivate the xConfigs_Lesson-5_MacroPak_2-6-4 macro</p> </li> </ul> </li> </ul> View Successful Macro Syntax and Log output MacroLog Output <pre><code>import xapi from 'xapi';\n\n/**\n * Lab Guide: https://webexcc-sa.github.io/LAB-1451/wx1_1451_part_2/#264-setting-getting-and-subscribing-to-xconfigurations\n * \n * Lesson 5: Subscribe and Unsubscribe to Multiple xConfigurations under a Common Node\n */\n\nconst delay_in_seconds = 5;\n\n// Edit this Object to include your xConfiguration Subscription\nconst subscribeToAirplay = xapi.Config.Video.Input.Airplay.on(event =&gt; {\n  console.log('Airplay Changes:', event)\n})\n\n// Do not edit past this line, but feel free to review what's going on :)\n\n// Here, we use JS Timeouts to set an action to run after X seconds. Timeouts use milliseconds, hence why we multiply by 1000\nsetTimeout(() =&gt; {\n\n  subscribeToAirplay(); //&lt;-- By calling the Object we assigned our Subscription too as a function(), we will unsubscribe from it\n\n  console.warn(\"Airplay Subscription stopped!\");\n\n}, delay_in_seconds * 1000)\n\n\n// Here, we're randomly assigning a values to the Airplay config, so we can see that configuration on our Subscription\nfunction setRandomAirplayConfigs() {\n\n  function randomNumber() {\n    return Math.floor(Math.random() * 10);\n  }\n\n  const randomPass = `${randomNumber()}${randomNumber()}${randomNumber()}${randomNumber()}`\n\n  xapi.Config.Video.Input.AirPlay.Mode.set(Math.random() &lt; 0.5 ? \"On\" : \"Off\");\n\n  xapi.Config.Video.Input.AirPlay.Beacon.set(Math.random() &lt; 0.5 ? \"Auto\" : \"Off\");\n\n  xapi.Config.Video.Input.AirPlay.Password.set(randomPass);\n}\n\n\n// This countdown is used to help you visualize when the process will complete it's course\n// We use console.warn to have this countdown print in another color in the Macro Console\nfunction countdown(startNumber) {\n  let currentNumber = startNumber;\n\n  console.warn(`Airplay Subscription stopping in [${currentNumber}] seconds`);\n\n  const interval = setInterval(() =&gt; {\n    currentNumber--;\n    if (currentNumber &gt; 0) {\n      console.warn(`Airplay Subscription stopping in [${currentNumber}] seconds`);\n    }\n\n    if (currentNumber &lt; 1) {\n      clearInterval(interval);\n    }\n  }, 1000);\n}\n\nfunction init() {\n  setInterval(() =&gt; {\n    setRandomAirplayConfigs();\n  }, 500)\n\n  countdown(delay_in_seconds);\n}\n\ninit();\n</code></pre> Time Source Message HH:MM:SS [system] Runtime stopped! HH:MM:SS [system] Using XAPI transport: WebSocket HH:MM:SS [system] Starting macros... HH:MM:SS xConfigs_Lesson-5_MacroPak_2-6-4 Airplay Subscription stopping in [5] seconds HH:MM:SS xConfigs_Lesson-5_MacroPak_2-6-4 QJS Ready HH:MM:SS xConfigs_Lesson-5_MacroPak_2-6-4 Airplay Changes: {\"Mode\":\"On\"} HH:MM:SS xConfigs_Lesson-5_MacroPak_2-6-4 Airplay Changes: {\"Beacon\":\"Off\"} HH:MM:SS xConfigs_Lesson-5_MacroPak_2-6-4 Airplay Changes: {\"Password\":\"***\"} HH:MM:SS xConfigs_Lesson-5_MacroPak_2-6-4 Airplay Subscription stopping in [4] seconds HH:MM:SS xConfigs_Lesson-5_MacroPak_2-6-4 Airplay Changes: {\"Mode\":\"Off\"} HH:MM:SS xConfigs_Lesson-5_MacroPak_2-6-4 Airplay Changes: {\"Password\":\"***\"} HH:MM:SS xConfigs_Lesson-5_MacroPak_2-6-4 Airplay Changes: {\"Mode\":\"On\"} HH:MM:SS xConfigs_Lesson-5_MacroPak_2-6-4 Airplay Changes: {\"Password\":\"***\"} HH:MM:SS xConfigs_Lesson-5_MacroPak_2-6-4 Airplay Subscription stopping in [3] seconds HH:MM:SS xConfigs_Lesson-5_MacroPak_2-6-4 Airplay Changes: {\"Beacon\":\"Auto\"} HH:MM:SS xConfigs_Lesson-5_MacroPak_2-6-4 Airplay Changes: {\"Password\":\"***\"} HH:MM:SS xConfigs_Lesson-5_MacroPak_2-6-4 Airplay Changes: {\"Password\":\"***\"} HH:MM:SS xConfigs_Lesson-5_MacroPak_2-6-4 Airplay Subscription stopping in [2] seconds HH:MM:SS xConfigs_Lesson-5_MacroPak_2-6-4 Airplay Changes: {\"Mode\":\"Off\"} HH:MM:SS xConfigs_Lesson-5_MacroPak_2-6-4 Airplay Changes: {\"Beacon\":\"Off\"} HH:MM:SS xConfigs_Lesson-5_MacroPak_2-6-4 Airplay Changes: {\"Password\":\"***\"} HH:MM:SS xConfigs_Lesson-5_MacroPak_2-6-4 Airplay Changes: {\"Beacon\":\"Auto\"} HH:MM:SS xConfigs_Lesson-5_MacroPak_2-6-4 Airplay Changes: {\"Password\":\"***\"} HH:MM:SS xConfigs_Lesson-5_MacroPak_2-6-4 Airplay Subscription stopping in [1] seconds HH:MM:SS xConfigs_Lesson-5_MacroPak_2-6-4 Airplay Changes: {\"Mode\":\"On\"} HH:MM:SS xConfigs_Lesson-5_MacroPak_2-6-4 Airplay Changes: {\"Password\":\"***\"} HH:MM:SS xConfigs_Lesson-5_MacroPak_2-6-4 Airplay Changes: {\"Mode\":\"Off\"} HH:MM:SS xConfigs_Lesson-5_MacroPak_2-6-4 Airplay Changes: {\"Password\":\"***\"} HH:MM:SS xConfigs_Lesson-5_MacroPak_2-6-4 Airplay Subscription stopped! Challenge: Can you spot the Error? <p>In both the <code>xConfigs_Lesson-4_MacroPak_2-6-4</code> and <code>xConfigs_Lesson-5_MacroPak_2-6-4</code> macros, there is an error</p> <p>It's not an error in the syntax or format, but an error in the automation</p> <p>What do these macros continue to do if they are left active on a Codec that could be problematic?</p> <p>       Giving Up? Check out the Challenge Answers Page  </p>"},{"location":"wx1_1451_part_2/#265-getting-and-subscribing-to-xstatuses","title":"2.6.5 Getting and Subscribing to xStatuses","text":"Lesson: Get an xStatus Value <ul> <li> <p>xAPI: xStatus Audio Volume</p> </li> <li> <p>Task:</p> <ul> <li>Activate the xStatuses_Lesson-1_MacroPak_2-6-4 macro</li> <li>Modify the <code>getStatusValue()</code> function by replacing the existing value of <code>targetStatus</code> with xStatus Audio Volume written in Macro Syntax</li> <li> <p>Save your Macro and monitor the Macro Console as well as the Device to see if you had a successful response</p> </li> <li> <p>When Complete, deactivate the xStatuses_Lesson-1_MacroPak_2-6-4 macro</p> </li> </ul> </li> </ul> View Successful Macro Syntax and Log output MacroLog Output <pre><code>import xapi from 'xapi';\n\n/**\n * Lab Guide: https://webexcc-sa.github.io/LAB-1451/wx1_1451_part_2/#265-getting-and-subscribing-to-xstatuses\n * \n * Lesson 1: Getting an xStatus Value\n */\n\n// Enter your solution below this line\n\nconst getStatusValue = async function () {\n  try {\n    // Modify targetStatus below\n\n    const targetStatus = await xapi.Status.Audio.Volume.get();\n\n    // Don't go past this line\n    console.log('Volume:', targetStatus)\n  } catch (e) {\n    console.error(e);\n  };\n};\n\ngetStatusValue();\n</code></pre> Timestamp Source Message HH:MM:SS [system] Runtime stopped! HH:MM:SS [system] Using XAPI transport: WebSocket HH:MM:SS [system] Starting macros... HH:MM:SS xStatuses_Lesson-1_MacroPak_2-6-4 QJS Ready HH:MM:SS xStatuses_Lesson-1_MacroPak_2-6-4 Volume: 50 Lesson: Get multiple xStatuses under a Common Node <ul> <li> <p>xAPI: xStatus Audio</p> </li> <li> <p>Task:</p> <ul> <li>Activate the xStatuses_Lesson-2_MacroPak_2-6-4 macro</li> <li>Modify the <code>getStatusValue()</code> function by replacing the existing value of <code>targetStatus</code> with xStatus Audio written in Macro Syntax</li> <li> <p>Save your Macro and monitor the Macro Console as well as the Device to see if you had a successful response</p> </li> <li> <p>When Complete, deactivate the xStatuses_Lesson-2_MacroPak_2-6-4 macro</p> </li> </ul> </li> </ul> View Successful Macro Syntax and Log output MacroLog Output <pre><code>import xapi from 'xapi';\n\n/**\n * Lab Guide: https://webexcc-sa.github.io/LAB-1451/wx1_1451_part_2/#265-getting-and-subscribing-to-xstatuses\n * \n * Lesson 2: Getting an xStatus Value\n */\n\n// Enter your solution below this line\n\nconst getStatusValue = async function () {\n  try {\n    // Modify targetStatus below\n\n    const targetStatus = await xapi.Status.Audio.get();\n\n    // Don't go past this line\n    console.log(targetStatus)\n  } catch (e) {\n    console.error(e);\n  };\n};\n\ngetStatusValue();\n</code></pre> Timestamp Source Message HH:MM:SS [system] Runtime stopped! HH:MM:SS [system] Using XAPI transport: WebSocket HH:MM:SS [system] Starting macros... HH:MM:SS xStatuses_Lesson-2_MacroPak_2-6-4 QJS Ready HH:MM:SS xStatuses_Lesson-2_MacroPak_2-6-4 <code>{ \"Devices\": { \"Bluetooth\": { \"ActiveProfile\": \"None\" }, \"HandsetUSB\": { \"ConnectionStatus\": \"NotConnected\", \"Cradle\": \"OnHook\" }, \"HeadsetUSB\": { \"ConnectionStatus\": \"NotConnected\", \"Description\": \"\", \"Manufacturer\": \"\" } }, \"Input\": { \"Connectors\": { \"HDMI\": [ { \"Mute\": \"On\", \"id\": \"1\" } ], \"Microphone\": [ { \"ConnectionStatus\": \"Connected\", \"id\": \"1\" }, { \"ConnectionStatus\": \"NotConnected\", \"id\": \"2\" }, { \"ConnectionStatus\": \"NotConnected\", \"id\": \"3\" } ], \"USBC\": [ { \"Mute\": \"On\", \"id\": \"1\" } ] } } }{...\"And the List Goes On\"}</code> Lesson: Subscribe and Unsubscribe to an xStatus <ul> <li> <p>xAPI: xStatus Audio Volume</p> </li> <li> <p>Task:</p> <ul> <li>Activate the xStatuses_Lesson-3_MacroPak_2-6-5 macro</li> <li>Modify the <code>subscribeToVolume</code> object by replacing it's value with xStatus Audio Volume written in Macro Syntax using the <code>.on()</code> method<ul> <li>In order to unsubscribe, we need to assign our xAPI subscription to an object, so we can later call it, which will end it's subscription</li> <li>For example, after you assign the subscribeToVolume properly, running subscribeToVolume() will stop your active subscription</li> </ul> </li> <li> <p>Save your Macro, raise and lower the volume on your Codec and monitor the Macro Console to see if you had a successful response</p> <ul> <li>NOTE: This macro will automatically unsubscribe for you. Review those steps, to get a better understand as to how we unsubscribe.</li> </ul> </li> <li> <p>When Complete, deactivate the xStatuses_Lesson-3_MacroPak_2-6-5 macro</p> </li> </ul> </li> </ul> View Successful Macro Syntax and Log output MacroLog Output <pre><code>import xapi from 'xapi';\n\n/**\n * Lab Guide: https://webexcc-sa.github.io/LAB-1451/wx1_1451_part_2/#265-getting-and-subscribing-to-xstatuses\n * \n * Lesson 3: Subscribe and Unsubscribe to an xStatus\n*/\n\nconst delay_in_seconds = 10;\n\n// Edit this Object to include your xStatus Subscription\nconst subscribeToVolume = xapi.Status.Audio.Volume.on(vol =&gt; {\n  console.log('Volume:', vol)\n});\n\n// Do not edit past this line, but feel free to review what's going on :)\n\n// Here, we use JS Timeouts to set an action to run after X seconds. Timeouts use milliseconds, hence why we multiply by 1000\nsetTimeout(() =&gt; {\n\n  subscribeToVolume(); //&lt;-- By calling the Object we assigned our Subscription too as a function(), we will unsubscribe from it\n\n  console.warn(\"Volume Subscription stopped!\");\n\n}, delay_in_seconds * 1000)\n\n\n// This countdown is used to help you visualize when the process will complete it's course\n// We use console.warn to have this countdown print in another color in the Macro Console\nfunction countdown(startNumber) {\n  let currentNumber = startNumber;\n\n  console.warn(`Volume Subscription stopping in [${currentNumber}] seconds`);\n\n  const interval = setInterval(() =&gt; {\n    currentNumber--;\n    if (currentNumber &gt; 0) {\n      console.warn(`Volume Subscription stopping in [${currentNumber}] seconds`);\n    }\n\n    if (currentNumber &lt; 1) {\n      clearInterval(interval);\n    }\n  }, 1000);\n}\n\nfunction init() {\n  countdown(delay_in_seconds);\n}\n\ninit();\n</code></pre> Time Source Message HH:MM:SS [system] Using XAPI transport: WebSocket HH:MM:SS [system] Starting macros... HH:MM:SS xStatuses_Lesson-3_MacroPak_2-6-5 Volume Subscription stopping in [10] seconds HH:MM:SS xStatuses_Lesson-3_MacroPak_2-6-5 QJS Ready HH:MM:SS xStatuses_Lesson-3_MacroPak_2-6-5 Volume Subscription stopping in [9] seconds HH:MM:SS xStatuses_Lesson-3_MacroPak_2-6-5 Volume Subscription stopping in [8] seconds HH:MM:SS xStatuses_Lesson-3_MacroPak_2-6-5 Volume Subscription stopping in [7] seconds HH:MM:SS xStatuses_Lesson-3_MacroPak_2-6-5 Volume: 80 HH:MM:SS xStatuses_Lesson-3_MacroPak_2-6-5 Volume: 85 HH:MM:SS xStatuses_Lesson-3_MacroPak_2-6-5 Volume Subscription stopping in [6] seconds HH:MM:SS xStatuses_Lesson-3_MacroPak_2-6-5 Volume: 90 HH:MM:SS xStatuses_Lesson-3_MacroPak_2-6-5 Volume Subscription stopping in [5] seconds HH:MM:SS xStatuses_Lesson-3_MacroPak_2-6-5 Volume: 85 HH:MM:SS xStatuses_Lesson-3_MacroPak_2-6-5 Volume Subscription stopping in [4] seconds HH:MM:SS xStatuses_Lesson-3_MacroPak_2-6-5 Volume: 80 HH:MM:SS xStatuses_Lesson-3_MacroPak_2-6-5 Volume Subscription stopping in [3] seconds HH:MM:SS xStatuses_Lesson-3_MacroPak_2-6-5 Volume: 75 HH:MM:SS xStatuses_Lesson-3_MacroPak_2-6-5 Volume: 70 HH:MM:SS xStatuses_Lesson-3_MacroPak_2-6-5 Volume Subscription stopping in [2] seconds HH:MM:SS xStatuses_Lesson-3_MacroPak_2-6-5 Volume: 65 HH:MM:SS xStatuses_Lesson-3_MacroPak_2-6-5 Volume Subscription stopping in [1] seconds HH:MM:SS xStatuses_Lesson-3_MacroPak_2-6-5 Volume: 60 HH:MM:SS xStatuses_Lesson-3_MacroPak_2-6-5 Volume Subscription stopped! Lesson: Subscribe and Unsubscribe to Multiple xStatuses under a Common Node <ul> <li> <p>xAPI: xStatus Cameras Camera[N] Position</p> </li> <li> <p>Task:</p> <ul> <li>Activate the xStatuses_Lesson-4_MacroPak_2-6-5 macro</li> <li>Modify the <code>subscribeToCameraPositions</code> object by replacing it's value with xStatus Cameras Camera[N] Position written in Macro Syntax using the <code>.on()</code> method<ul> <li>In order to unsubscribe, we need to assign our xAPI subscription to an object, so we can later call it, which will end it's subscription</li> <li>For example, after you assign the subscribeToCameraPositions properly, running subscribeToCameraPositions() will stop your active subscription</li> </ul> </li> <li> <ul> <li>Access the Codec's Control Panel on it's touch interface</li> <li>Select Cameras</li> <li>Select Manual</li> <li>Then use the Control Wheel, Zoom In (+) and and Zoom out (-) buttons and observe your Macro Log output</li> </ul> <p>Save your Macro, and perform the following steps</p> <ul> <li>NOTE: This macro will automatically unsubscribe for you. Review those steps, to get a better understand as to how we unsubscribe.</li> </ul> </li> <li> <p>When Complete, deactivate the xStatuses_Lesson-4_MacroPak_2-6-5 macro</p> </li> </ul> </li> </ul> Accessing the Camera Menu <p> </p> View Successful Macro Syntax and Log output MacroLog Output <pre><code>import xapi from 'xapi';\n\n/**\n * Lab Guide: https://webexcc-sa.github.io/LAB-1451/wx1_1451_part_2/#265-getting-and-subscribing-to-xstatuses\n * \n * Lesson 4: Subscribe and Unsubscribe to Multiple xStatuses under a Common Node\n*/\n\nconst delay_in_seconds = 10;\n\n// Edit this Object to include your xStatus Subscription\nconst subscribeToCameraPositions = xapi.Status.Cameras.Camera.Position.on(event =&gt; {\n  console.log(event)\n});\n\n// Do not edit past this line, but feel free to review what's going on :)\n\n// Here, we use JS Timeouts to set an action to run after X seconds. Timeouts use milliseconds, hence why we multiply by 1000\nsetTimeout(() =&gt; {\n\n  subscribeToCameraPositions(); //&lt;-- By calling the Object we assigned our Subscription too as a function(), we will unsubscribe from it\n\n  console.warn(\"CameraPositions Subscription stopped!\");\n\n}, delay_in_seconds * 1000)\n\n\n// This countdown is used to help you visualize when the process will complete it's course\n// We use console.warn to have this countdown print in another color in the Macro Console\nfunction countdown(startNumber) {\n  let currentNumber = startNumber;\n\n  console.warn(`CameraPositions Subscription stopping in [${currentNumber}] seconds`);\n\n  const interval = setInterval(() =&gt; {\n    currentNumber--;\n    if (currentNumber &gt; 0) {\n      console.warn(`CameraPositions Subscription stopping in [${currentNumber}] seconds`);\n    }\n\n    if (currentNumber &lt; 1) {\n      clearInterval(interval);\n    }\n  }, 1000);\n}\n\nfunction init() {\n  countdown(delay_in_seconds);\n}\n\ninit();\n</code></pre> Time Source Message HH:MM:SS [system] Runtime stopped! HH:MM:SS [system] Using XAPI transport: WebSocket HH:MM:SS [system] Starting macros... HH:MM:SS xStatuses_Lesson-4_MacroPak_2-6-5 CameraPositions Subscription stopping in [10] seconds HH:MM:SS xStatuses_Lesson-4_MacroPak_2-6-5 QJS Ready HH:MM:SS xStatuses_Lesson-4_MacroPak_2-6-5 {\"Zoom\":\"4295\"} HH:MM:SS xStatuses_Lesson-4_MacroPak_2-6-5 CameraPositions Subscription stopping in [9] seconds HH:MM:SS xStatuses_Lesson-4_MacroPak_2-6-5 {\"Zoom\":\"5662\"} HH:MM:SS xStatuses_Lesson-4_MacroPak_2-6-5 CameraPositions Subscription stopping in [8] seconds HH:MM:SS xStatuses_Lesson-4_MacroPak_2-6-5 {\"Pan\":\"-65\"} HH:MM:SS xStatuses_Lesson-4_MacroPak_2-6-5 CameraPositions Subscription stopping in [7] seconds HH:MM:SS xStatuses_Lesson-4_MacroPak_2-6-5 {\"Pan\":\"-64\",\"Tilt\":\"123\"} HH:MM:SS xStatuses_Lesson-4_MacroPak_2-6-5 CameraPositions Subscription stopping in [6] seconds HH:MM:SS xStatuses_Lesson-4_MacroPak_2-6-5 {\"Pan\":\"-61\",\"Tilt\":\"-20\"} HH:MM:SS xStatuses_Lesson-4_MacroPak_2-6-5 {\"Pan\":\"-24\",\"Tilt\":\"-19\"} HH:MM:SS xStatuses_Lesson-4_MacroPak_2-6-5 CameraPositions Subscription stopping in [5] seconds HH:MM:SS xStatuses_Lesson-4_MacroPak_2-6-5 {\"Tilt\":\"47\"} HH:MM:SS xStatuses_Lesson-4_MacroPak_2-6-5 CameraPositions Subscription stopping in [4] seconds HH:MM:SS xStatuses_Lesson-4_MacroPak_2-6-5 {\"Zoom\":\"4384\"} HH:MM:SS xStatuses_Lesson-4_MacroPak_2-6-5 CameraPositions Subscription stopping in [3] seconds HH:MM:SS xStatuses_Lesson-4_MacroPak_2-6-5 {\"Tilt\":\"-14\"} HH:MM:SS xStatuses_Lesson-4_MacroPak_2-6-5 CameraPositions Subscription stopping in [2] seconds HH:MM:SS xStatuses_Lesson-4_MacroPak_2-6-5 {\"Pan\":\"14\"} HH:MM:SS xStatuses_Lesson-4_MacroPak_2-6-5 CameraPositions Subscription stopping in [1] seconds HH:MM:SS xStatuses_Lesson-4_MacroPak_2-6-5 CameraPositions Subscription stopped!"},{"location":"wx1_1451_part_2/#266-subscribing-to-xevents","title":"2.6.6 Subscribing to xEvents","text":"Lesson: Subscribe and Unsubscribe to an xEvent <ul> <li> <p>xAPI: xEvent UserInterface Extensions Widget Action</p> </li> <li> <p>Task:</p> <ul> <li>Activate the xEvents_Lesson-1_MacroPak_2-6-6 macro</li> <li>Modify the <code>subscribeToWidgetActions</code> object by replacing it's value with xEvent UserInterface Widget Action written in Macro Syntax using the <code>.on()</code> method<ul> <li>In order to unsubscribe, we need to assign our xAPI subscription to an object, so we can later call it, which will end it's subscription</li> <li>For example, after you assign the subscribeToWidgetActions properly, running subscribeToWidgetActions() will stop your active subscription</li> </ul> </li> <li> <p>Save your Macro, open the MultiLine Command [Section 2.6.6] Panel on your Codec's touch interface, press one or more of the buttons and observe the Macro Log Output</p> <ul> <li>NOTE: This macro will automatically unsubscribe for you. Review those steps, to get a better understand as to how we unsubscribe.</li> </ul> </li> <li> <p>When Complete, deactivate the xEvents_Lesson-1_MacroPak_2-6-6 macro</p> </li> </ul> </li> </ul> Open the MultiLine Command [Section 2.6.6] Panel <p> </p> View Successful Macro Syntax and Log output MacroLog Output <pre><code>import xapi from 'xapi';\n\n/**\n * Lab Guide: https://webexcc-sa.github.io/LAB-1451/wx1_1451_part_2/#266-subscribing-to-xevents\n * \n * Lesson 1: Subscribe and Unsubscribe to an xEvent\n*/\n\nconst delay_in_seconds = 10;\n\n// Edit this Object to include your xEvent Subscription\nconst subscribeToWidgetActions = xapi.Event.UserInterface.Extensions.Widget.Action.on(event =&gt; {\n  console.log(event)\n});\n\n// Do not edit past this line, but feel free to review what's going on :)\n\n// Here, we use JS Timeouts to set an action to run after X seconds. Timeouts use milliseconds, hence why we multiply by 1000\nsetTimeout(() =&gt; {\n\n  subscribeToWidgetActions(); //&lt;-- By calling the Object we assigned our Subscription too as a function(), we will unsubscribe from it\n\n  console.warn(\"WidgetActions Subscription stopped!\");\n\n}, delay_in_seconds * 1000)\n\n\n// This countdown is used to help you visualize when the process will complete it's course\n// We use console.warn to have this countdown print in another color in the Macro Console\nfunction countdown(startNumber) {\n  let currentNumber = startNumber;\n\n  console.warn(`WidgetActions Subscription stopping in [${currentNumber}] seconds`);\n\n  const interval = setInterval(() =&gt; {\n    currentNumber--;\n    if (currentNumber &gt; 0) {\n      console.warn(`WidgetActions Subscription stopping in [${currentNumber}] seconds`);\n    }\n\n    if (currentNumber &lt; 1) {\n      clearInterval(interval);\n    }\n  }, 1000);\n}\n\nconst myPanelId = 'wx1_lab_multilineCommand';\n\nconst myUserinterfaceXML = `&lt;Extensions&gt;\n  &lt;Panel&gt;\n    &lt;Order&gt;1&lt;/Order&gt;\n    &lt;PanelId&gt;wx1_lab_multilineCommand&lt;/PanelId&gt;\n    &lt;Location&gt;HomeScreen&lt;/Location&gt;\n    &lt;Icon&gt;Info&lt;/Icon&gt;\n    &lt;Color&gt;#FC5143&lt;/Color&gt;\n    &lt;Name&gt;MultiLine Command [Section 2.6.6]&lt;/Name&gt;\n    &lt;ActivityType&gt;Custom&lt;/ActivityType&gt;\n    &lt;Page&gt;\n      &lt;Name&gt;Page&lt;/Name&gt;\n      &lt;Row&gt;\n        &lt;Name&gt;Buttons&lt;/Name&gt;\n        &lt;Widget&gt;\n          &lt;WidgetId&gt;wx1_GroupButton&lt;/WidgetId&gt;\n          &lt;Type&gt;GroupButton&lt;/Type&gt;\n          &lt;Options&gt;size=4&lt;/Options&gt;\n          &lt;ValueSpace&gt;\n            &lt;Value&gt;\n              &lt;Key&gt;GroupButton_A&lt;/Key&gt;\n              &lt;Name&gt;A&lt;/Name&gt;\n            &lt;/Value&gt;\n            &lt;Value&gt;\n              &lt;Key&gt;GroupButton_B&lt;/Key&gt;\n              &lt;Name&gt;B&lt;/Name&gt;\n            &lt;/Value&gt;\n            &lt;Value&gt;\n              &lt;Key&gt;GroupButton_C&lt;/Key&gt;\n              &lt;Name&gt;C&lt;/Name&gt;\n            &lt;/Value&gt;\n          &lt;/ValueSpace&gt;\n        &lt;/Widget&gt;\n        &lt;Widget&gt;\n          &lt;WidgetId&gt;wx1_TextButton&lt;/WidgetId&gt;\n          &lt;Name&gt;Text&lt;/Name&gt;\n          &lt;Type&gt;Button&lt;/Type&gt;\n          &lt;Options&gt;size=1&lt;/Options&gt;\n        &lt;/Widget&gt;\n        &lt;Widget&gt;\n          &lt;WidgetId&gt;wx1_IconButton&lt;/WidgetId&gt;\n          &lt;Type&gt;Button&lt;/Type&gt;\n          &lt;Options&gt;size=1;icon=green&lt;/Options&gt;\n        &lt;/Widget&gt;\n        &lt;Widget&gt;\n          &lt;WidgetId&gt;wx1_SpinnerButton&lt;/WidgetId&gt;\n          &lt;Type&gt;Spinner&lt;/Type&gt;\n          &lt;Options&gt;size=2&lt;/Options&gt;\n        &lt;/Widget&gt;\n      &lt;/Row&gt;\n      &lt;Row&gt;\n        &lt;Name&gt;Control Wheel&lt;/Name&gt;\n        &lt;Widget&gt;\n          &lt;WidgetId&gt;wx1_ControlWheel&lt;/WidgetId&gt;\n          &lt;Type&gt;DirectionalPad&lt;/Type&gt;\n          &lt;Options&gt;size=4&lt;/Options&gt;\n        &lt;/Widget&gt;\n      &lt;/Row&gt;\n      &lt;Row&gt;\n        &lt;Name&gt;Toggle and Slider&lt;/Name&gt;\n        &lt;Widget&gt;\n          &lt;WidgetId&gt;wx1_Toggle&lt;/WidgetId&gt;\n          &lt;Type&gt;ToggleButton&lt;/Type&gt;\n          &lt;Options&gt;size=1&lt;/Options&gt;\n        &lt;/Widget&gt;\n        &lt;Widget&gt;\n          &lt;WidgetId&gt;wx1_Slider&lt;/WidgetId&gt;\n          &lt;Type&gt;Slider&lt;/Type&gt;\n          &lt;Options&gt;size=3&lt;/Options&gt;\n        &lt;/Widget&gt;\n      &lt;/Row&gt;\n      &lt;Options/&gt;\n    &lt;/Page&gt;\n  &lt;/Panel&gt;\n&lt;/Extensions&gt;`\n\n\nconst buildUserInterface = async function () {\n  try {\n    const saveUI = await xapi.Command.UserInterface.Extensions.Panel.Save({ PanelId: myPanelId }, myUserinterfaceXML)\n    console.log(`Panel [${myPanelId}] saved to the codec`)\n  } catch (e) {\n    console.error(e)\n  }\n}\n\nfunction init() {\n  countdown(delay_in_seconds);\n\n  buildUserInterface()\n}\n\ninit();\n</code></pre> Time Source Message HH:MM:SS [system] Runtime stopped! HH:MM:SS [system] Using XAPI transport: WebSocket HH:MM:SS [system] Starting macros... HH:MM:SS xEvents_Lesson-1_MacroPak_2-6-6 QJS Ready HH:MM:SS xEvents_Lesson-1_MacroPak_2-6-6 WidgetActions Subscription stopping in [10] seconds HH:MM:SS xEvents_Lesson-1_MacroPak_2-6-6 {\"Type\":\"pressed\",\"Value\":\"GroupButton_A\",\"WidgetId\":\"wx1_GroupButton\",\"id\":\"1\"} HH:MM:SS xEvents_Lesson-1_MacroPak_2-6-6 {\"Type\":\"released\",\"Value\":\"GroupButton_A\",\"WidgetId\":\"wx1_GroupButton\",\"id\":\"1\"} HH:MM:SS xEvents_Lesson-1_MacroPak_2-6-6 {\"Type\":\"pressed\",\"Value\":\"GroupButton_B\",\"WidgetId\":\"wx1_GroupButton\",\"id\":\"1\"} HH:MM:SS xEvents_Lesson-1_MacroPak_2-6-6 WidgetActions Subscription stopping in [9] seconds HH:MM:SS xEvents_Lesson-1_MacroPak_2-6-6 Panel [wx1_lab_multilineCommand] saved to the codec HH:MM:SS xEvents_Lesson-1_MacroPak_2-6-6 {\"Type\":\"released\",\"Value\":\"GroupButton_B\",\"WidgetId\":\"wx1_GroupButton\",\"id\":\"1\"} HH:MM:SS xEvents_Lesson-1_MacroPak_2-6-6 {\"Type\":\"pressed\",\"Value\":\"GroupButton_C\",\"WidgetId\":\"wx1_GroupButton\",\"id\":\"1\"} HH:MM:SS xEvents_Lesson-1_MacroPak_2-6-6 {\"Type\":\"released\",\"Value\":\"GroupButton_C\",\"WidgetId\":\"wx1_GroupButton\",\"id\":\"1\"} HH:MM:SS xEvents_Lesson-1_MacroPak_2-6-6 WidgetActions Subscription stopping in [8] seconds HH:MM:SS xEvents_Lesson-1_MacroPak_2-6-6 {\"Type\":\"pressed\",\"Value\":\"\",\"WidgetId\":\"wx1_TextButton\",\"id\":\"1\"} HH:MM:SS xEvents_Lesson-1_MacroPak_2-6-6 {\"Type\":\"released\",\"Value\":\"\",\"WidgetId\":\"wx1_TextButton\",\"id\":\"1\"} HH:MM:SS xEvents_Lesson-1_MacroPak_2-6-6 {\"Type\":\"clicked\",\"Value\":\"\",\"WidgetId\":\"wx1_TextButton\",\"id\":\"1\"} HH:MM:SS xEvents_Lesson-1_MacroPak_2-6-6 {\"Type\":\"pressed\",\"Value\":\"\",\"WidgetId\":\"wx1_IconButton\",\"id\":\"1\"} HH:MM:SS xEvents_Lesson-1_MacroPak_2-6-6 WidgetActions Subscription stopping in [7] seconds HH:MM:SS xEvents_Lesson-1_MacroPak_2-6-6 {\"Type\":\"released\",\"Value\":\"\",\"WidgetId\":\"wx1_IconButton\",\"id\":\"1\"} HH:MM:SS xEvents_Lesson-1_MacroPak_2-6-6 {\"Type\":\"clicked\",\"Value\":\"\",\"WidgetId\":\"wx1_IconButton\",\"id\":\"1\"} HH:MM:SS xEvents_Lesson-1_MacroPak_2-6-6 {\"Type\":\"pressed\",\"Value\":\"decrement\",\"WidgetId\":\"wx1_SpinnerButton\",\"id\":\"1\"} HH:MM:SS xEvents_Lesson-1_MacroPak_2-6-6 WidgetActions Subscription stopping in [6] seconds HH:MM:SS xEvents_Lesson-1_MacroPak_2-6-6 {\"Type\":\"released\",\"Value\":\"decrement\",\"WidgetId\":\"wx1_SpinnerButton\",\"id\":\"1\"} HH:MM:SS xEvents_Lesson-1_MacroPak_2-6-6 {\"Type\":\"clicked\",\"Value\":\"decrement\",\"WidgetId\":\"wx1_SpinnerButton\",\"id\":\"1\"} HH:MM:SS xEvents_Lesson-1_MacroPak_2-6-6 WidgetActions Subscription stopping in [5] seconds HH:MM:SS xEvents_Lesson-1_MacroPak_2-6-6 {\"Type\":\"pressed\",\"Value\":\"increment\",\"WidgetId\":\"wx1_SpinnerButton\",\"id\":\"1\"} HH:MM:SS xEvents_Lesson-1_MacroPak_2-6-6 {\"Type\":\"released\",\"Value\":\"increment\",\"WidgetId\":\"wx1_SpinnerButton\",\"id\":\"1\"} HH:MM:SS xEvents_Lesson-1_MacroPak_2-6-6 {\"Type\":\"clicked\",\"Value\":\"increment\",\"WidgetId\":\"wx1_SpinnerButton\",\"id\":\"1\"} HH:MM:SS xEvents_Lesson-1_MacroPak_2-6-6 WidgetActions Subscription stopping in [4] seconds HH:MM:SS xEvents_Lesson-1_MacroPak_2-6-6 {\"Type\":\"pressed\",\"Value\":\"up\",\"WidgetId\":\"wx1_ControlWheel\",\"id\":\"1\"} HH:MM:SS xEvents_Lesson-1_MacroPak_2-6-6 {\"Type\":\"released\",\"Value\":\"up\",\"WidgetId\":\"wx1_ControlWheel\",\"id\":\"1\"} HH:MM:SS xEvents_Lesson-1_MacroPak_2-6-6 {\"Type\":\"clicked\",\"Value\":\"up\",\"WidgetId\":\"wx1_ControlWheel\",\"id\":\"1\"} HH:MM:SS xEvents_Lesson-1_MacroPak_2-6-6 {\"Type\":\"pressed\",\"Value\":\"left\",\"WidgetId\":\"wx1_ControlWheel\",\"id\":\"1\"} HH:MM:SS xEvents_Lesson-1_MacroPak_2-6-6 WidgetActions Subscription stopping in [3] seconds HH:MM:SS xEvents_Lesson-1_MacroPak_2-6-6 {\"Type\":\"released\",\"Value\":\"left\",\"WidgetId\":\"wx1_ControlWheel\",\"id\":\"1\"} HH:MM:SS xEvents_Lesson-1_MacroPak_2-6-6 {\"Type\":\"clicked\",\"Value\":\"left\",\"WidgetId\":\"wx1_ControlWheel\",\"id\":\"1\"} HH:MM:SS xEvents_Lesson-1_MacroPak_2-6-6 WidgetActions Subscription stopping in [2] seconds HH:MM:SS xEvents_Lesson-1_MacroPak_2-6-6 {\"Type\":\"pressed\",\"Value\":\"center\",\"WidgetId\":\"wx1_ControlWheel\",\"id\":\"1\"} HH:MM:SS xEvents_Lesson-1_MacroPak_2-6-6 {\"Type\":\"released\",\"Value\":\"center\",\"WidgetId\":\"wx1_ControlWheel\",\"id\":\"1\"} HH:MM:SS xEvents_Lesson-1_MacroPak_2-6-6 {\"Type\":\"clicked\",\"Value\":\"center\",\"WidgetId\":\"wx1_ControlWheel\",\"id\":\"1\"} HH:MM:SS xEvents_Lesson-1_MacroPak_2-6-6 WidgetActions Subscription stopping in [1] seconds HH:MM:SS xEvents_Lesson-1_MacroPak_2-6-6 {\"Type\":\"changed\",\"Value\":\"off\",\"WidgetId\":\"wx1_Toggle\",\"id\":\"1\"} HH:MM:SS xEvents_Lesson-1_MacroPak_2-6-6 WidgetActions Subscription stopped! Lesson: Subscribe and Unsubscribe to Multiple xEvents under a Common Node <ul> <li> <p>xAPI: xEvent UserInterface Extensions</p> </li> <li> <p>Task:</p> <ul> <li>Activate the xEvents_Lesson-1_MacroPak_2-6-6 macro</li> <li>Modify the <code>subscribeToAllExtensions</code> object by replacing it's value with xEvent UserInterface written in Macro Syntax using the <code>.on()</code> method<ul> <li>In order to unsubscribe, we need to assign our xAPI subscription to an object, so we can later call it, which will end it's subscription</li> <li>For example, after you assign the subscribeToAllExtensions properly, running subscribeToAllExtensions() will stop your active subscription</li> </ul> </li> <li> <p>Save your Macro, open the MultiLine Command [Section 2.6.6] Panel on your Codec's touch interface, press one or more of the buttons and observe the Macro Log Output</p> <ul> <li>NOTE: This macro will automatically unsubscribe for you. Review those steps, to get a better understand as to how we unsubscribe.</li> </ul> </li> <li> <p>When Complete, deactivate the xEvents_Lesson-1_MacroPak_2-6-6 macro</p> </li> </ul> </li> </ul> Open the MultiLine Command [Section 2.6.6] Panel <p> </p> View Successful Macro Syntax and Log output MacroLog Output <pre><code>import xapi from 'xapi';\n\n/**\n * Lab Guide: https://webexcc-sa.github.io/LAB-1451/wx1_1451_part_2/#266-subscribing-to-xevents\n * \n * Lesson 2: Subscribe and Unsubscribe to Multiple xEvents under a Common Node\n*/\n\nconst delay_in_seconds = 10;\n\n// Edit this Object to include your xEvent Subscription\nconst subscribeToAllExtensions = xapi.Event.UserInterface.Extensions.on(event =&gt; {\n  console.log(event)\n});\n\n// Do not edit past this line, but feel free to review what's going on :)\n\n// Here, we use JS Timeouts to set an action to run after X seconds. Timeouts use milliseconds, hence why we multiply by 1000\nsetTimeout(() =&gt; {\n\n  subscribeToAllExtensions(); //&lt;-- By calling the Object we assigned our Subscription too as a function(), we will unsubscribe from it\n\n  console.warn(\"AllExtensions Subscription stopped!\");\n\n}, delay_in_seconds * 1000)\n\n\n// This countdown is used to help you visualize when the process will complete it's course\n// We use console.warn to have this countdown print in another color in the Macro Console\nfunction countdown(startNumber) {\n  let currentNumber = startNumber;\n\n  console.warn(`AllExtensions Subscription stopping in [${currentNumber}] seconds`);\n\n  const interval = setInterval(() =&gt; {\n    currentNumber--;\n    if (currentNumber &gt; 0) {\n      console.warn(`AllExtensions Subscription stopping in [${currentNumber}] seconds`);\n    }\n\n    if (currentNumber &lt; 1) {\n      clearInterval(interval);\n    }\n  }, 1000);\n}\n\nconst myPanelId = 'wx1_lab_multilineCommand';\n\nconst myUserinterfaceXML = `&lt;Extensions&gt;\n  &lt;Panel&gt;\n    &lt;Order&gt;1&lt;/Order&gt;\n    &lt;PanelId&gt;wx1_lab_multilineCommand&lt;/PanelId&gt;\n    &lt;Location&gt;HomeScreen&lt;/Location&gt;\n    &lt;Icon&gt;Info&lt;/Icon&gt;\n    &lt;Color&gt;#FF6F20&lt;/Color&gt;\n    &lt;Name&gt;MultiLine Command [Section 2.6.6]&lt;/Name&gt;\n    &lt;ActivityType&gt;Custom&lt;/ActivityType&gt;\n    &lt;Page&gt;\n      &lt;Name&gt;Page&lt;/Name&gt;\n      &lt;Row&gt;\n        &lt;Name&gt;Buttons&lt;/Name&gt;\n        &lt;Widget&gt;\n          &lt;WidgetId&gt;wx1_GroupButton&lt;/WidgetId&gt;\n          &lt;Type&gt;GroupButton&lt;/Type&gt;\n          &lt;Options&gt;size=4&lt;/Options&gt;\n          &lt;ValueSpace&gt;\n            &lt;Value&gt;\n              &lt;Key&gt;GroupButton_A&lt;/Key&gt;\n              &lt;Name&gt;A&lt;/Name&gt;\n            &lt;/Value&gt;\n            &lt;Value&gt;\n              &lt;Key&gt;GroupButton_B&lt;/Key&gt;\n              &lt;Name&gt;B&lt;/Name&gt;\n            &lt;/Value&gt;\n            &lt;Value&gt;\n              &lt;Key&gt;GroupButton_C&lt;/Key&gt;\n              &lt;Name&gt;C&lt;/Name&gt;\n            &lt;/Value&gt;\n          &lt;/ValueSpace&gt;\n        &lt;/Widget&gt;\n        &lt;Widget&gt;\n          &lt;WidgetId&gt;wx1_TextButton&lt;/WidgetId&gt;\n          &lt;Name&gt;Text&lt;/Name&gt;\n          &lt;Type&gt;Button&lt;/Type&gt;\n          &lt;Options&gt;size=1&lt;/Options&gt;\n        &lt;/Widget&gt;\n        &lt;Widget&gt;\n          &lt;WidgetId&gt;wx1_IconButton&lt;/WidgetId&gt;\n          &lt;Type&gt;Button&lt;/Type&gt;\n          &lt;Options&gt;size=1;icon=green&lt;/Options&gt;\n        &lt;/Widget&gt;\n        &lt;Widget&gt;\n          &lt;WidgetId&gt;wx1_SpinnerButton&lt;/WidgetId&gt;\n          &lt;Type&gt;Spinner&lt;/Type&gt;\n          &lt;Options&gt;size=2&lt;/Options&gt;\n        &lt;/Widget&gt;\n      &lt;/Row&gt;\n      &lt;Row&gt;\n        &lt;Name&gt;Control Wheel&lt;/Name&gt;\n        &lt;Widget&gt;\n          &lt;WidgetId&gt;wx1_ControlWheel&lt;/WidgetId&gt;\n          &lt;Type&gt;DirectionalPad&lt;/Type&gt;\n          &lt;Options&gt;size=4&lt;/Options&gt;\n        &lt;/Widget&gt;\n      &lt;/Row&gt;\n      &lt;Row&gt;\n        &lt;Name&gt;Toggle and Slider&lt;/Name&gt;\n        &lt;Widget&gt;\n          &lt;WidgetId&gt;wx1_Toggle&lt;/WidgetId&gt;\n          &lt;Type&gt;ToggleButton&lt;/Type&gt;\n          &lt;Options&gt;size=1&lt;/Options&gt;\n        &lt;/Widget&gt;\n        &lt;Widget&gt;\n          &lt;WidgetId&gt;wx1_Slider&lt;/WidgetId&gt;\n          &lt;Type&gt;Slider&lt;/Type&gt;\n          &lt;Options&gt;size=3&lt;/Options&gt;\n        &lt;/Widget&gt;\n      &lt;/Row&gt;\n      &lt;Options/&gt;\n    &lt;/Page&gt;\n  &lt;/Panel&gt;\n&lt;/Extensions&gt;`\n\n\nconst buildUserInterface = async function () {\n  try {\n    const saveUI = await xapi.Command.UserInterface.Extensions.Panel.Save({ PanelId: myPanelId }, myUserinterfaceXML)\n    console.log(`Panel [${myPanelId}] saved to the codec`)\n  } catch (e) {\n    console.error(e)\n  }\n}\n\nfunction init() {\n  countdown(delay_in_seconds);\n\n  buildUserInterface()\n}\n\ninit();\n</code></pre> Time Source Message HH:MM:SS [system] Runtime stopped! HH:MM:SS [system] Using XAPI transport: WebSocket HH:MM:SS [system] Starting macros... HH:MM:SS xEvents_Lesson-2_MacroPak_2-6-6 AllExtensions Subscription stopping in [10] seconds HH:MM:SS xEvents_Lesson-2_MacroPak_2-6-6 QJS Ready HH:MM:SS xEvents_Lesson-2_MacroPak_2-6-6 Panel [wx1_lab_multilineCommand] saved to the codec HH:MM:SS xEvents_Lesson-2_MacroPak_2-6-6 {\"Widget\":{\"LayoutUpdated\":{\"id\":\"1\"},\"id\":\"1\"},\"id\":\"1\"} HH:MM:SS xEvents_Lesson-2_MacroPak_2-6-6 {\"Panel\":{\"Clicked\":{\"PanelId\":\"wx1_lab_multilineCommand\",\"id\":\"1\"},\"id\":\"1\"},\"id\":\"1\"} HH:MM:SS xEvents_Lesson-2_MacroPak_2-6-6 AllExtensions Subscription stopping in [9] seconds HH:MM:SS xEvents_Lesson-2_MacroPak_2-6-6 AllExtensions Subscription stopping in [8] seconds HH:MM:SS xEvents_Lesson-2_MacroPak_2-6-6 {\"Event\":{\"Pressed\":{\"Signal\":\"wx1_GroupButton:GroupButton_A\",\"id\":\"1\"},\"id\":\"1\"},\"id\":\"1\"} HH:MM:SS xEvents_Lesson-2_MacroPak_2-6-6 {\"Widget\":{\"Action\":{\"Type\":\"pressed\",\"Value\":\"GroupButton_A\",\"WidgetId\":\"wx1_GroupButton\",\"id\":\"1\"},\"id\":\"1\"},\"id\":\"1\"} HH:MM:SS xEvents_Lesson-2_MacroPak_2-6-6 {\"Event\":{\"Released\":{\"Signal\":\"wx1_GroupButton:GroupButton_A\",\"id\":\"1\"},\"id\":\"1\"},\"id\":\"1\"} HH:MM:SS xEvents_Lesson-2_MacroPak_2-6-6 {\"Widget\":{\"Action\":{\"Type\":\"released\",\"Value\":\"GroupButton_A\",\"WidgetId\":\"wx1_GroupButton\",\"id\":\"1\"},\"id\":\"1\"},\"id\":\"1\"} HH:MM:SS xEvents_Lesson-2_MacroPak_2-6-6 AllExtensions Subscription stopping in [7] seconds HH:MM:SS xEvents_Lesson-2_MacroPak_2-6-6 {\"Event\":{\"Pressed\":{\"Signal\":\"wx1_IconButton\",\"id\":\"1\"},\"id\":\"1\"},\"id\":\"1\"} HH:MM:SS xEvents_Lesson-2_MacroPak_2-6-6 {\"Widget\":{\"Action\":{\"Type\":\"pressed\",\"Value\":\"\",\"WidgetId\":\"wx1_IconButton\",\"id\":\"1\"},\"id\":\"1\"},\"id\":\"1\"} HH:MM:SS xEvents_Lesson-2_MacroPak_2-6-6 {\"Event\":{\"Released\":{\"Signal\":\"wx1_IconButton\",\"id\":\"1\"},\"id\":\"1\"},\"id\":\"1\"} HH:MM:SS xEvents_Lesson-2_MacroPak_2-6-6 {\"Widget\":{\"Action\":{\"Type\":\"released\",\"Value\":\"\",\"WidgetId\":\"wx1_IconButton\",\"id\":\"1\"},\"id\":\"1\"},\"id\":\"1\"} HH:MM:SS xEvents_Lesson-2_MacroPak_2-6-6 {\"Event\":{\"Clicked\":{\"Signal\":\"wx1_IconButton\",\"id\":\"1\"},\"id\":\"1\"},\"id\":\"1\"} HH:MM:SS xEvents_Lesson-2_MacroPak_2-6-6 {\"Widget\":{\"Action\":{\"Type\":\"clicked\",\"Value\":\"\",\"WidgetId\":\"wx1_IconButton\",\"id\":\"1\"},\"id\":\"1\"},\"id\":\"1\"} HH:MM:SS xEvents_Lesson-2_MacroPak_2-6-6 AllExtensions Subscription stopping in [6] seconds HH:MM:SS xEvents_Lesson-2_MacroPak_2-6-6 {\"Event\":{\"Pressed\":{\"Signal\":\"wx1_ControlWheel:center\",\"id\":\"1\"},\"id\":\"1\"},\"id\":\"1\"} HH:MM:SS xEvents_Lesson-2_MacroPak_2-6-6 {\"Widget\":{\"Action\":{\"Type\":\"pressed\",\"Value\":\"center\",\"WidgetId\":\"wx1_ControlWheel\",\"id\":\"1\"},\"id\":\"1\"},\"id\":\"1\"} HH:MM:SS xEvents_Lesson-2_MacroPak_2-6-6 {\"Event\":{\"Released\":{\"Signal\":\"wx1_ControlWheel:center\",\"id\":\"1\"},\"id\":\"1\"},\"id\":\"1\"} HH:MM:SS xEvents_Lesson-2_MacroPak_2-6-6 {\"Widget\":{\"Action\":{\"Type\":\"released\",\"Value\":\"center\",\"WidgetId\":\"wx1_ControlWheel\",\"id\":\"1\"},\"id\":\"1\"},\"id\":\"1\"} HH:MM:SS xEvents_Lesson-2_MacroPak_2-6-6 {\"Event\":{\"Clicked\":{\"Signal\":\"wx1_ControlWheel:center\",\"id\":\"1\"},\"id\":\"1\"},\"id\":\"1\"} HH:MM:SS xEvents_Lesson-2_MacroPak_2-6-6 {\"Widget\":{\"Action\":{\"Type\":\"clicked\",\"Value\":\"center\",\"WidgetId\":\"wx1_ControlWheel\",\"id\":\"1\"},\"id\":\"1\"},\"id\":\"1\"} HH:MM:SS xEvents_Lesson-2_MacroPak_2-6-6 AllExtensions Subscription stopping in [5] seconds HH:MM:SS xEvents_Lesson-2_MacroPak_2-6-6 AllExtensions Subscription stopping in [4] seconds HH:MM:SS xEvents_Lesson-2_MacroPak_2-6-6 {\"Event\":{\"Pressed\":{\"Signal\":\"wx1_Slider:188\",\"id\":\"1\"},\"id\":\"1\"},\"id\":\"1\"} HH:MM:SS xEvents_Lesson-2_MacroPak_2-6-6 {\"Widget\":{\"Action\":{\"Type\":\"pressed\",\"Value\":\"188\",\"WidgetId\":\"wx1_Slider\",\"id\":\"1\"},\"id\":\"1\"},\"id\":\"1\"} HH:MM:SS xEvents_Lesson-2_MacroPak_2-6-6 {\"Event\":{\"Changed\":{\"Signal\":\"wx1_Slider:98\",\"id\":\"1\"},\"id\":\"1\"},\"id\":\"1\"} HH:MM:SS xEvents_Lesson-2_MacroPak_2-6-6 {\"Widget\":{\"Action\":{\"Type\":\"changed\",\"Value\":\"98\",\"WidgetId\":\"wx1_Slider\",\"id\":\"1\"},\"id\":\"1\"},\"id\":\"1\"} HH:MM:SS xEvents_Lesson-2_MacroPak_2-6-6 {\"Event\":{\"Changed\":{\"Signal\":\"wx1_Slider:98\",\"id\":\"1\"},\"id\":\"1\"},\"id\":\"1\"} HH:MM:SS xEvents_Lesson-2_MacroPak_2-6-6 {\"Widget\":{\"Action\":{\"Type\":\"changed\",\"Value\":\"98\",\"WidgetId\":\"wx1_Slider\",\"id\":\"1\"},\"id\":\"1\"},\"id\":\"1\"} HH:MM:SS xEvents_Lesson-2_MacroPak_2-6-6 {\"Event\":{\"Released\":{\"Signal\":\"wx1_Slider:98\",\"id\":\"1\"},\"id\":\"1\"},\"id\":\"1\"} HH:MM:SS xEvents_Lesson-2_MacroPak_2-6-6 {\"Widget\":{\"Action\":{\"Type\":\"released\",\"Value\":\"98\",\"WidgetId\":\"wx1_Slider\",\"id\":\"1\"},\"id\":\"1\"},\"id\":\"1\"} HH:MM:SS xEvents_Lesson-2_MacroPak_2-6-6 AllExtensions Subscription stopping in [3] seconds HH:MM:SS xEvents_Lesson-2_MacroPak_2-6-6 {\"Event\":{\"Changed\":{\"Signal\":\"wx1_Toggle:on\",\"id\":\"1\"},\"id\":\"1\"},\"id\":\"1\"} HH:MM:SS xEvents_Lesson-2_MacroPak_2-6-6 {\"Widget\":{\"Action\":{\"Type\":\"changed\",\"Value\":\"on\",\"WidgetId\":\"wx1_Toggle\",\"id\":\"1\"},\"id\":\"1\"},\"id\":\"1\"} HH:MM:SS xEvents_Lesson-2_MacroPak_2-6-6 AllExtensions Subscription stopping in [2] seconds HH:MM:SS xEvents_Lesson-2_MacroPak_2-6-6 {\"Event\":{\"Pressed\":{\"Signal\":\"wx1_SpinnerButton:decrement\",\"id\":\"1\"},\"id\":\"1\"},\"id\":\"1\"} HH:MM:SS xEvents_Lesson-2_MacroPak_2-6-6 {\"Widget\":{\"Action\":{\"Type\":\"pressed\",\"Value\":\"decrement\",\"WidgetId\":\"wx1_SpinnerButton\",\"id\":\"1\"},\"id\":\"1\"},\"id\":\"1\"} HH:MM:SS xEvents_Lesson-2_MacroPak_2-6-6 AllExtensions Subscription stopping in [1] seconds HH:MM:SS xEvents_Lesson-2_MacroPak_2-6-6 {\"Event\":{\"Released\":{\"Signal\":\"wx1_SpinnerButton:decrement\",\"id\":\"1\"},\"id\":\"1\"},\"id\":\"1\"} HH:MM:SS xEvents_Lesson-2_MacroPak_2-6-6 {\"Widget\":{\"Action\":{\"Type\":\"released\",\"Value\":\"decrement\",\"WidgetId\":\"wx1_SpinnerButton\",\"id\":\"1\"},\"id\":\"1\"},\"id\":\"1\"} HH:MM:SS xEvents_Lesson-2_MacroPak_2-6-6 {\"Event\":{\"Clicked\":{\"Signal\":\"wx1_SpinnerButton:decrement\",\"id\":\"1\"},\"id\":\"1\"},\"id\":\"1\"} HH:MM:SS xEvents_Lesson-2_MacroPak_2-6-6 {\"Widget\":{\"Action\":{\"Type\":\"clicked\",\"Value\":\"decrement\",\"WidgetId\":\"wx1_SpinnerButton\",\"id\":\"1\"},\"id\":\"1\"},\"id\":\"1\"} HH:MM:SS xEvents_Lesson-2_MacroPak_2-6-6 AllExtensions Subscription stopped!"},{"location":"wx1_1451_part_3/","title":"Build Room Documentation Macro","text":""},{"location":"wx1_1451_part_3/#section-31-outlining-our-customization","title":"Section 3.1: Outlining our Customization","text":"<p>Abstract</p> <p>When Jumping into your customization, it's good to understand a few things prior to diving in. </p> <p>You should should consider the following</p> <p>KEEP THINGS SIMPLE </p> <ul> <li>There are some pretty robust solutions out there. It can be easy to over-engineer a solution, especially as your skill set starts to flourish.</li> <li>Wherever possible, keep things simple<ul> <li>But sometimes too simple can be a bottleneck, do what's best to provide a robust solution, while also not getting too far into the weeds.</li> </ul> </li> </ul> <p>Understanding your Hardware</p> <ul> <li>What are the hardware and software differences between codecs?<ul> <li>Should I hard code Video Output 3 or should I dynamically discover those inputs</li> </ul> </li> <li>How many peripherals are connected?<ul> <li>This could change from room to room. Knowing how to adapt this in your solution dynamically will reduce complications when deploying at scale</li> </ul> </li> <li>Are there differences in how the xAPI is executed between devices?<ul> <li>There certainly is, but it's not impossible to handle and make you solution robust and rugged</li> </ul> </li> <li>What external services are available to me to optimize or enhance this experience?<ul> <li>APIs are wonderful, and everywhere. Explore them and find out what's possible when they start to work together</li> </ul> </li> </ul> <p>Understanding your Stakeholders</p> <ul> <li>Who will interact with my customization?<ul> <li>IT Folks, C-Suite, Engineers, Admins, Etc</li> </ul> </li> <li>Are you working with the person procuring or using the solution?<ul> <li>Procurement and the end use may be one in the same, but at times they are disconnected. If possible, engage with those who ultimately use your customization to get a better understanding of their need.</li> </ul> </li> <li>How do these individuals do work?<ul> <li>Is this a seminar space, a conference room, an open collaboration space, a classroom, a lab?</li> <li>Optimizing your solution to fit those needs are key to success</li> </ul> </li> <li>What are their expectations of the solution?<ul> <li>Is the vision of the end user in line with your vision of the solution. Keeping an open dialogue with your customer as to what's possible will help keep your goals in line</li> </ul> </li> <li>What can you anticipate that wasn't considered in the original ask?<ul> <li>Some asks are too simple. Putting in the extra 2 cents to really flesh out a professional solution, even for a small ask, can yield a better solution in the end.</li> </ul> </li> </ul> <p>Tackle your solution from outside the box</p> <ul> <li>Best to design for scale, wherever possible<ul> <li>How can I make my solution on all hardware and software iterations?</li> </ul> </li> <li>Make you solution flexible<ul> <li>If your code can solve for multiple room flows, build in tools to let you quickly adapt your code</li> </ul> </li> <li>Think of your colleagues and future self<ul> <li>Some day you or a colleague may be called upon to troubleshoot a solution, make sure you leave breadcrumbs or documentation to help yourself years from now.</li> </ul> </li> </ul> <p>Today's solution outline</p> <p>In this lab of this lab, we'll build a Macro that will allow folks to either View a Document or Scan a QR code to take the document with them on your device</p> <p>We'll review how to:</p> <ul> <li>Build a UserInterface</li> <li>Map those UserInterface elements to actions driven by an accompanying macro</li> <li>Integrate a 3rd party QR code service, leveraging APIs external to the Codec</li> <li>Organize our code and make it scalable</li> <li>Automate the generation of out UserInterface</li> </ul>"},{"location":"wx1_1451_part_3/#section-32-building-the-userinterface-ui","title":"Section 3.2: Building the UserInterface (UI)","text":""},{"location":"wx1_1451_part_3/#321-navigating-the-ui-extensions-editor","title":"3.2.1 - Navigating the UI Extensions Editor","text":"<p>Access the UI Extensions Editor</p> Device LoginDevice HomeUI Extensions EditorAdding a PanelAdding WidgetsEdit Text ElementsAdd/Delete Rows and Pages <ul> <li>Open a Browser and enter your Codec's IP as a URL and hit enter</li> <li>Login with your Username and Password</li> </ul> <p> Device Login Page </p> <ul> <li>Select the UI Extensions Editor on the Left-Hand Navigation Bar</li> </ul> <p> Device Home Page </p> <p> UI Extensions Editor </p> <p>Always Assign Unique PanelIds</p> <p>You may not be the only developer. Assigning PanelIds unique to your solution helps limit conflicts with other solutions.</p> <p>How to Add a Panel</p> <p> Adding a new Panel </p> <p>Info</p> <ul> <li>Panels<ul> <li>Creates a Panel with pages and rows within, containing widgets</li> </ul> </li> <li>Action Buttons<ul> <li>Creates a panel</li> </ul> </li> <li>Web Widgets<ul> <li>Creates a Web Widget on your OSD</li> </ul> </li> <li>Web Apps<ul> <li>Creates a Panel, that when <code>clicked</code>, opens a URL to a target Web Page</li> </ul> </li> </ul> <p>Always Assign Unique WidgetIds</p> <p>You may not be the only developer. Assigning WidgetIds unique to your solution helps limit conflicts with other solutions.</p> <p>How to Add Widgets</p> <p> Adding bew Widgets </p> <p>Tip</p> <p>Some text elements have limited space, but you won't see an error</p> <p>Make sure the Text Renders correctly on your device after you apply it</p> <p>Gif</p> <p> Editing Text Elements </p> <p>Info</p> <ul> <li>Double clicking on any text element allows you to edit the filed</li> <li>Change the Text as you need it, then press enter</li> </ul> <p>Tip</p> <p>Keep in mind more is not always better. Try to keep things simple</p> <p>Gif</p> <p> Adding a new Panel </p> <p>Info</p> <ul> <li>You can add as many rows and pages as your solution needs</li> </ul>"},{"location":"wx1_1451_part_3/#322-creating-our-customizations-interface","title":"3.2.2 - Creating our Customization's Interface","text":"Lesson: Create a New Panel Button <p>Save Extension Button</p> <p> </p> <ul> <li> <p>Task: </p> <ul> <li>Create a new Panel</li> <li>Assign this panel's id as: <pre><code>wx1_QrDocs</code></pre></li> <li>Assign this panel's name as: <pre><code>Room Docs</code></pre></li> <li>Assign this panel's location as: <code>HomeScreenAndCallControls</code></li> <li>Pick any icon you wish</li> <li>Pick any Panel Color you wish</li> <li>Save your Extension<ul> <li>You should be able to see your Panel on the Codec's Touch Interface</li> </ul> </li> </ul> </li> </ul> View Successful UI Execution OSDOpened PanelUI Properties <p> </p> <p> </p> <p> </p> Challenge: Rename the Page to Room Docs <ul> <li>Rename the Page Name from <code>Page</code> to: <pre><code>Room Docs</code></pre></li> <li>Assign the PageId as: <pre><code>wx1_QrDocs~RoomDocs</code></pre></li> </ul> Lesson: Add Solution Widgets <p>Save Extension Button</p> <p> </p> <ul> <li> <p>Task: </p> <ul> <li>Rename Row 1 to: <pre><code>Lab 1451</code></pre><ul> <li>Add 2 Buttons to this row<ul> <li>Set the following properties for the left button<ul> <li>Rename Button Text <code>Button</code> to: <pre><code>Open Site</code></pre></li> <li>Assign WidgetId: <pre><code>wx1_QrDocs~OpenSite~https://webexcc-sa.github.io/LAB-1451/wx1_1451_part_3/</code></pre></li> <li>Set the Widget Width to 2</li> </ul> </li> <li>Set the following properties for the Right button<ul> <li>Rename Button Text <code>Button</code> to: <pre><code>Open QrCode \ud83d\udd33</code></pre></li> <li>Assign WidgetId: <pre><code>wx1_QrDocs~OpenQrCode~https://webexcc-sa.github.io/LAB-1451/wx1_1451_part_3/</code></pre></li> <li>Set the Widget Width to 2</li> </ul> </li> </ul> </li> </ul> </li> <li>Add a second row, with the name: <pre><code>Reimagine Workspaces</code></pre><ul> <li>Add 2 Buttons to this row<ul> <li>Set the following properties for the left button<ul> <li>Rename Button Text <code>Button</code> to: <pre><code>Open Site</code></pre></li> <li>Assign WidgetId: <pre><code>wx1_QrDocs~OpenSite~https://www.webex.com/us/en/workspaces.html</code></pre></li> <li>Set the Widget Width to 2</li> </ul> </li> <li>Set the following properties for the Right button<ul> <li>Rename Button Text <code>Button</code> to: <pre><code>Open QrCode \ud83d\udd33</code></pre></li> <li>Assign WidgetId: <pre><code>wx1_QrDocs~OpenQrCode~https://www.webex.com/us/en/workspaces.html</code></pre></li> <li>Set the Widget Width to 2</li> </ul> </li> </ul> </li> </ul> </li> <li>Save your Extension<ul> <li>You should be able to see your Panel on the Codec's Touch Interface</li> </ul> </li> </ul> </li> </ul> View Successful UI Execution <p> </p> Add your Organization's HomePage  <p>You may have noticed the WidgetIds have a URL as apart of the ID</p> <p>We'll be using this in the Macro we write later, to open this page</p> <p>Here is how we're structuring WidgetIds for this lab</p> <p>Example</p> <ul> <li> <p>WidgetId Structure: appName~Action~URL</p> <ul> <li>appName: <code>wx1_QrDocs</code> -&gt; Let's us associate this interface with our Macro Script and helps make the WidgetId more unique</li> <li>action: <code>OpenSite</code> or <code>OpenQrCode</code> -&gt; This will tell use how we want to open our URL</li> <li>URL: This is the URL we want to open, or build a QR Code for</li> <li>String Separator: <code>~</code> -&gt; Using a unique character, such as this tilde, can help use split up and access this information later in the Macro</li> </ul> </li> </ul> Is this WidgetId format mandatory? <p>Widget Ids are strings. This is just one of many examples of how you can structure your widgets. It's not required to structure them like this, with the exception of this lab. </p> <p>So long as they are unique in your customization, you should be good to go</p> <ul> <li>Task: <ul> <li>Create a 3rd Row</li> <li>Add in an Open Site button and an Open QrCode \ud83d\udd33 with your Organizations Home Page as the Url</li> <li>Be sure to assign <code>wx1_QrDocs</code> as the appName and the correct action to the button they represent</li> </ul> </li> </ul> Hint <p>OpenSite: <pre><code>wx1_QrDocs~OpenSite~YOUR_ORG_HOMEPAGE</code></pre> OpenQrCode: <pre><code>wx1_QrDocs~OpenQrCode~YOUR_ORG_HOMEPAGE</code></pre></p>"},{"location":"wx1_1451_part_3/#section-33-adding-function-to-the-ui-with-macros","title":"Section 3.3: Adding Function to the UI with Macros","text":"<p>Abstract</p> <p>Now that we have our UserInterface in place, we can start to build our solution</p> <p>We'll be using the Macro Editor for this solution, but know that you can do these very same tasks from any other avenue we explored in Part 2 of this lab</p> <p>The benefit of Macros, is that they come with every Cisco Codec running Ce9.2 or newer (with the exception of the Sx10). So no need to procure hardware or spin up a service to start building a solution </p> <p>Note</p> <p>It's recommended you have run through sections 2.2 and 2.6 as a Minimum before proceeding</p>"},{"location":"wx1_1451_part_3/#331-navigating-the-macro-editor-and-creating-our-new-macro","title":"3.3.1 - Navigating the Macro Editor and Creating our new Macro","text":"<p>If you missed Section 2.6 in part 2 of this lab, please watch this Vidcast</p> Vidcast: Macro Editor IDE Review <p> </p> <p>Create a new Macro</p> <ul> <li>Select Create new macro in the Macro Editor</li> <li>Name this macro Room Docs</li> <li>Save and Activate+ the Room Docs Macro</li> </ul> Compare your Setup Device LoginDevice HomeMacro EditorCreate, Save and Activate a Macro <p>if NOT already logged into the endpoint, follow these steps</p> <ul> <li>Open a Browser and enter your Codec's IP as a URL and hit enter</li> <li>Login with your Username and Password</li> </ul> <p> Device Login Page </p> <p>If in the UI Extensions Editor</p> <ul> <li>Click on the Device Name in the Top Left hand corner of the UI Extensions Editor to get back to the Device Home Page</li> </ul> <p> Device Home Page </p> <p> The Macro Editor </p> <p>Create, Save and Activate a Macro</p> <p> Create, Save and Activate a Macro </p>"},{"location":"wx1_1451_part_3/#section-332-accessing-ui-events-and-logging","title":"Section 3.3.2: Accessing UI Events and Logging","text":"Lesson: Subscribing to Widget Actions <ul> <li> <p>xAPI: xEvent UserInterface Widget Action</p> </li> <li> <p>Task:</p> <ul> <li> <p>Let's start by subscribing to the xAPI Path above using Macro Syntax</p> </li> <li> <p>Take the Callback information generated by this event, and log it to the Macro Console using <code>console.log()</code></p> </li> <li> <p>Once complete, Save and Activate the macro (if inactive)</p> </li> <li> <p>Start pressing the Open Site and Open QrCode \ud83d\udd33 buttons contained within your <code>Room Docs</code> panel</p> </li> <li>Monitor the Macro Console Output</li> </ul> </li> </ul> Compare your Macro <p>Note</p> <p>It's ok if your macro's structure doesn't match 1:1 with the examples below</p> <p>As long as they information we access is the same, then format is up to the developers preference</p> <pre><code>import xapi from 'xapi';\n\nxapi.Event.UserInterface.Extensions.Widget.Action.on(({WidgetId, Type, Value}) =&gt; {\n  console.log({WidgetId, Type, Value})\n})\n</code></pre> Compare your Macro Console Time Macro WidgetId Type Value HH:MM:SS Room Docs wx1_QrDocs~OpenQrCode~https://webexcc-sa.github.io/LAB-1451/wx1_1451_part_3/ pressed <code></code> HH:MM:SS Room Docs wx1_QrDocs~OpenQrCode~https://webexcc-sa.github.io/LAB-1451/wx1_1451_part_3/ released <code></code> HH:MM:SS Room Docs wx1_QrDocs~OpenQrCode~https://webexcc-sa.github.io/LAB-1451/wx1_1451_part_3/ <code>clicked</code> <code></code> HH:MM:SS Room Docs wx1_QrDocs~OpenQrCode~https://webexcc-sa.github.io/LAB-1451/wx1_1451_part_3/ pressed <code></code> HH:MM:SS Room Docs wx1_QrDocs~OpenQrCode~https://webexcc-sa.github.io/LAB-1451/wx1_1451_part_3/ released <code></code> HH:MM:SS Room Docs wx1_QrDocs~OpenQrCode~https://webexcc-sa.github.io/LAB-1451/wx1_1451_part_3/ <code>clicked</code> <code></code> HH:MM:SS Room Docs wx1_QrDocs~OpenSite~https://www.webex.com/us/en/workspaces.html pressed <code></code> HH:MM:SS Room Docs wx1_QrDocs~OpenSite~https://www.webex.com/us/en/workspaces.html released <code></code> HH:MM:SS Room Docs wx1_QrDocs~OpenSite~https://www.webex.com/us/en/workspaces.html <code>clicked</code> <code></code> HH:MM:SS Room Docs wx1_QrDocs~OpenQrCode~https://www.webex.com/us/en/workspaces.html pressed <code></code> HH:MM:SS Room Docs wx1_QrDocs~OpenQrCode~https://www.webex.com/us/en/workspaces.html released <code></code> HH:MM:SS Room Docs wx1_QrDocs~OpenQrCode~https://www.webex.com/us/en/workspaces.html <code>clicked</code> <code></code> Why does each Widget click have 3 events fire? <p>Good Catch ! Many widgets offer 1-3 events that will fire based on the conditions of the action</p> <p>This is important to know, as you may only want an action to happen once, not upwards of 3 times, when building your automation</p> <p>We can use techniques in ES6 JS to filter out what we're interested in for these scenarios</p> <p>For reference, here's a list of Widgets and their event payloads</p> <p>Click on each table below to review each Widget</p> ToggleSliderButtonGroupButtonIcon ButtonSpinnerTextBoxDirectional PadSpacer <p>Gif</p> <p> Toggle Action </p> Key Value WidgetId <code>Assigned by the Developer on Widget Instantiation</code> Type <code>changed</code> Value <code>on</code> or <code>off</code> <p>Gif</p> <p> Slider Action </p> Key Value WidgetId <code>Assigned by the Developer on Widget Instantiation</code> Type <code>pressed</code>, <code>released</code>, or <code>changed</code> Value <code>Integer between 0 and 255</code> <p>Gif</p> <p> Button Action </p> Key Value WidgetId <code>Assigned by the Developer on Widget Instantiation</code> Type <code>pressed</code>, <code>released</code>, or <code>clicked</code> Value N/A <p>Gif</p> <p> Group Button Action </p> Key Value WidgetId <code>Assigned by the Developer on Widget Instantiation</code> Type <code>pressed</code>, <code>released</code> Value <code>Assigned by the Developer on Widget Instantiation</code> <p>Gif</p> <p> Icon Button Icons </p> Key Value WidgetId <code>Assigned by the Developer on Widget Instantiation</code> Type <code>pressed</code>, <code>released</code>, or <code>clicked</code> Value N/A <p>Gif</p> <p> Spinner Icons </p> Key Value WidgetId <code>Assigned by the Developer on Widget Instantiation</code> Type <code>pressed</code>, <code>released</code>, or <code>clicked</code> Value <code>increment</code> or <code>decrement</code> <p>Does not fire events</p> <p>Gif</p> <p> Directional Pad Action </p> Key Value WidgetId <code>Assigned by the Developer on Widget Instantiation</code> Type <code>pressed</code>, <code>released</code>, or <code>clicked</code> Value <code>up</code>, <code>down</code>, <code>left</code>, <code>right</code>, <code>center</code> <p>Does not fire events</p> Lesson: Refine and Filter our Widget information <p>Info</p> <p>As you saw in the previous example Widgets can produce 1-3 events to fire whenever you interact with them</p> <p>It's best to filter this down to the specific even in question</p> <p>In macros, we can use the tools offered to us by ES6 JS to complete this task</p> <ul> <li> <p>xAPI: xEvent UserInterface Widget Action</p> </li> <li> <p>Task: </p> <ul> <li>Replace your original console.log with console.debug<ul> <li>This will hide this log in the debug group, we can use this later to check our work</li> </ul> </li> <li>Use an <code>if</code> ES6 JS statement to filter our WidgetId Event and confirm the widget belongs to our customization<ul> <li>This can be done using ES6 JS's <code>.includes('wx1_QrDocs')</code> prototype</li> </ul> </li> <li>Use an <code>if</code> ES6 JS statement to filter our Type event and check to see if it matches released<ul> <li>This can be done using ES6 JS's Equality <code>==</code> or Strict Equality <code>===</code> operators</li> <li>We won't be using pressed or clicked</li> </ul> </li> <li>Use the <code>.split('~')</code> ES6 JS prototype to split out our app, action and url and assign them to objects using our tilde as the string separator</li> <li>Use a <code>switch</code> ES6 JS statement to handle <code>OpenSite</code> and <code>OpenQrCode</code> actions respectively<ul> <li>Place console.log(action, url) below the <code>OpenSite</code> case and console.warn(action, url) below the <code>OpenQrCode</code> case</li> </ul> </li> </ul> <p>Click the Tabs Below to see how each Task above is implemented</p> Verify WidgetID with <code>if</code> and <code>includes</code>&gt;Compare Type using <code>if</code> and <code>==</code>&gt;Assign app, action and URL using <code>split</code> &gt;Use <code>switch</code> to handle actions <pre><code>import xapi from 'xapi';\n\nxapi.Event.UserInterface.Extensions.Widget.Action.on(({ WidgetId, Type, Value }) =&gt; {\n  console.debug({ WidgetId, Type, Value }); // &lt;-- Changed to Debug\n  if (WidgetId.includes(`wx1_QrDocs`)) {    // &lt;-- Asks if WidgetIn includes wx1_QrDocs\n\n  };\n});\n</code></pre> Why Use <code>includes()</code>? <p>We structured all of our WidgetIds with the same prefix wx1_QrDocs</p> <p>This helps make our Widget References Unique, but also helps us ignore any widgets that don't include wx1_QrDocs</p> <p>If a solution were to have the same widgetId, then that 1 widget could have solutions fire from 2 different integration sources. In some cases, that's fine or even necessary, but it's best practice to make your widgets as unique to your solution as possible and for your solution to ignore any other chatter on the Codec</p> <p>        Learn more about the <code>.includes()</code> prototype         Learn more about <code>if</code> statements  </p> <pre><code>import xapi from 'xapi';\n\nxapi.Event.UserInterface.Extensions.Widget.Action.on(({ WidgetId, Type, Value }) =&gt; {\n  console.debug({ WidgetId, Type, Value });\n  if (WidgetId.includes(`wx1_QrDocs`)) {\n    if (Type == 'released') { // &lt;-- Asked if the Type is equal to released\n\n    };\n  };\n});\n</code></pre> <p>        Learn more about <code>if</code> statements         Learn more about <code>Operators</code> </p> <pre><code>import xapi from 'xapi';\n\nxapi.Event.UserInterface.Extensions.Widget.Action.on(({ WidgetId, Type, Value }) =&gt; {\n  console.debug({ WidgetId, Type, Value });\n  if (WidgetId.includes(`wx1_QrDocs`)) {\n    if (Type == 'released') {\n      const [app, action, url] = WidgetId.split(`~`); // &lt;-- Extract our App, Action and Url and assigned them to the object they represent\n    };\n  };\n});\n</code></pre> Why <code>.split()</code> our widget? <p>This gives use new objects to work with. The benefit of how we implemented our WidgetId structure[app~action~url] allows us to make our code a bit more flexible</p> <p>Now, if you wanted to add more sites, all you would need to do is add more buttons to the UI Extension following the WidgetId structure we set, and your Macro Code doesn't need to be modified to allow it to work</p> <p>        Learn more about the <code>.split()</code> prototype         Learn more about the <code>Destructuring</code> assignments         Learn more about <code>Arrays</code> </p> <pre><code>import xapi from 'xapi';\n\nxapi.Event.UserInterface.Extensions.Widget.Action.on(({ WidgetId, Type, Value }) =&gt; {\n  console.debug({ WidgetId, Type, Value });\n  if (WidgetId.includes(`wx1_QrDocs`)) {\n    if (Type == 'released') {\n      const [app, action, url] = WidgetId.split(`~`);\n\n      switch (action) {   // &lt;-- Switch what code we run when:\n        case 'OpenSite':  // &lt;-- The OpenSite action comes in\n          console.log(action, url);\n          break;\n        case 'OpenQrCode':// &lt;-- The OpenQrCode action comes in\n          console.warn(action, url);\n          break;\n        default:          // &lt;-- The When an Unknown action comes in\n          console.error(`Unknown Action Fired: [${action}]`)\n          break;\n      };\n    };\n  };\n});\n</code></pre> Why not use <code>if</code> statement instead of <code>switch</code> <p>If statements could work, but as you use more and more if statements, the code becomes a bit harder to read</p> <p>Using switches, if we wanted to define another action, it would be as simple as adding another case and adding codec below it to define how that case runs</p> <p>Both do the same job, some implementations are easier on the eyes than others</p> <p>        Learn more about <code>switch...case</code> </p> <ul> <li> <p>Once complete, Save and Activate the macro (if inactive)</p> </li> <li> <p>Start pressing the Open Site and Open QrCode \ud83d\udd33 buttons contained within your <code>Room Docs</code> panel</p> </li> <li>Monitor the Macro Console Output</li> </ul> </li> </ul> Compare your Macro <pre><code>import xapi from 'xapi';\n\nxapi.Event.UserInterface.Extensions.Widget.Action.on(({ WidgetId, Type, Value }) =&gt; {\n  console.debug({ WidgetId, Type, Value });\n  if (WidgetId.includes(`wx1_QrDocs`)) {\n    if (Type == 'released') {\n      const [app, action, url] = WidgetId.split(`~`);\n\n      switch (action) {\n        case 'OpenSite':\n          console.log(action, url);\n          break;\n        case 'OpenQrCode':\n          console.warn(action, url);\n          break;\n        default:\n          console.error(`Unknown Action Fired: [${action}]`)\n          break;\n      };\n    };\n  };\n});\n</code></pre> Compare your Macro Console Time Macro Logs HH:MM:SS Room Docs QJS Ready HH:MM:SS Room Docs OpenQrCode https://webexcc-sa.github.io/LAB-1451/wx1_1451_part_3/ HH:MM:SS Room Docs OpenSite https://www.webex.com/us/en/workspaces.html HH:MM:SS Room Docs OpenSite https://webexcc-sa.github.io/LAB-1451/wx1_1451_part_3/ HH:MM:SS Room Docs OpenQrCode https://www.webex.com/us/en/workspaces.html"},{"location":"wx1_1451_part_3/#section-333-adding-function-to-our-widgets","title":"Section 3.3.3: Adding function to our Widgets","text":"<p>Info</p> <p>Now that we can access the data from our widgets as we expect, we can start to implement the function of opening a Web Page on out touch interface</p> Lesson: Defining our <code>OpenSite</code> function <p>Important</p> <p>We'll be using the WebView Display API</p> <p>If you're working on a Desk or Board Series Endpoint use the parameter Target:\u00a0OSD in the following lessons</p> <p>If you're working on a Room Series Endpoint with a Room Navigator attached use the parameter Target:\u00a0Controller in the following lessons</p> <p>Note</p> <ul> <li>Room Series with 3rd Party Touch can use OSD as a Target value</li> <li>Room Series with Touch 10 CAN NOT use the Controller Target Value<ul> <li>If you have no touch display or room Navigator, you will need to build a WebView Close Panel</li> <li>This is not covered in this lab</li> </ul> </li> </ul> <ul> <li> <p>xAPI: xCommand UserInterface WebView Display</p> </li> <li> <p>Task: </p> <ul> <li>Declare a new async function called openSite with the following function parameters<ul> <li>url</li> <li>target = 'OSD'<ul> <li>Note: change OSD to Controller if a Room Navigator touch panel is available</li> </ul> </li> </ul> </li> <li>Within this function:<ul> <li>Structure the xAPI reference above using Macro Syntax with the following parameters and values<ul> <li>Url: <code>url</code></li> <li>Target: <code>target</code></li> </ul> </li> <li>Log a Successful response from your xAPI call</li> <li>Catch and log an error from your xAPI call</li> </ul> </li> <li>Replace <code>console.log(action, url);</code> under the OpenSite case within your WidgetActions event with this new openSite() function call and pass in the <code>url</code> object into your function</li> </ul> View <code>openSite(url, target)</code> function <pre><code>async function openSite(url, target = 'OSD') {\n  try {\n    const openPage = await xapi.Command.UserInterface.WebView.Display({\n      Url: url,\n      Target: target\n    })\n    console.log(`Site Webview Opened for: [${url}]`, openPage);\n  } catch (e) {\n    const err = {\n      Context: `Failed to open Site WebView to: [${url}]`,\n      ...e\n    };\n    console.error(err);\n  }\n}\n</code></pre> <p>        Learn more about <code>Async Functions</code>        Learn more about <code>try..catch</code> statements  </p> <ul> <li> <p>Once complete, Save and Activate the macro (if inactive)</p> </li> <li> <p>Start pressing the Open Site and Open QrCode \ud83d\udd33 buttons contained within your <code>Room Docs</code> panel</p> </li> <li>Monitor the Device OSD and Macro Console Output</li> </ul> </li> </ul> View OSD Output Lab 1451Reimagine Workspaces <p> Lab 1451 WebView </p> <p> Reimagine Workspaces WebView </p> Compare your Macro <pre><code>import xapi from 'xapi';\n\nasync function openSite(url, target = 'OSD') { //&lt;-- Declare and define your openSite function\n  try {\n    const openPage = await xapi.Command.UserInterface.WebView.Display({\n      Url: url,\n      Target: target\n    })\n    console.log(`Site Webview Opened for: [${url}]`, openPage);  //&lt;-- Log a Successful Response\n  } catch (e) {\n    const err = {\n      Context: `Failed to open Site WebView to: [${url}]`,\n      ...e\n    };\n    console.error(err); //&lt;-- Catch and log an Error\n  }\n}\n\nxapi.Event.UserInterface.Extensions.Widget.Action.on(({ WidgetId, Type, Value }) =&gt; {\n  console.debug({ WidgetId, Type, Value });\n  if (WidgetId.includes(`wx1_QrDocs`)) {\n    if (Type == 'released') {\n      const [app, action, url] = WidgetId.split(`~`);\n                        // \u2191 url object\n      switch (action) {\n        case 'OpenSite':\n          openSite(url); //&lt;-- Run the openSite() function and pass in the url object\n          break;\n        case 'OpenQrCode':\n          console.warn(action, url); \n          break;\n        default:\n          console.error(`Unknown Action Fired: [${action}]`);\n          break;\n      };\n    };\n  };\n});\n</code></pre> Compare your Macro Console Time Macro Logs HH:MM:SS Room Docs QJS Ready HH:MM:SS Room Docs Site Webview Opened for: [https://webexcc-sa.github.io/LAB-1451/wx1_1451_part_3/] HH:MM:SS Room Docs OpenQrCode  https://webexcc-sa.github.io/LAB-1451/wx1_1451_part_3/ HH:MM:SS Room Docs Site Webview Opened for: [https://www.webex.com/us/en/workspaces.html] HH:MM:SS Room Docs OpenQrCode  https://www.webex.com/us/en/workspaces.html Lesson: Defining our <code>OpenQrCode</code> function <p>Making QR Codes is NOT a normal function of the Codec</p> <p>In this lesson, in order to generate a QR code for our customization, then we'll need to leverage a 3rd party QR API Service</p> <p>This is how you can introduce more functionality to your device by leveraging the World of APIs</p> <p>Always Keep Security Top of Mind!</p> <p>It's easy to fall outside your organization's security policy especially when building new solutions.</p> <p>Make sure you work with your, or your Customer's, Information Security teams before implementing a new solution that requires Integration Authentication of any kind or reaches out on the internet.</p> <p>The security implications of a solution can force you building your solution using a different integration method, or even stop a project all together.</p> <p>        Checkout Webex's  Security Technical References  </p> <ul> <li> <p>xAPI: xCommand UserInterface WebView Display</p> </li> <li> <p>Task: </p> <ul> <li>Declare a new async function called openQrCode with the following function parameters<ul> <li>url</li> <li>target = 'OSD'<ul> <li>Note: change OSD to Controller if a Room Navigator touch panel is available</li> </ul> </li> </ul> </li> <li>Within this function:<ul> <li>Use ES6 JS's <code>encodeURI()</code> function to modify the URL in and assign it to a new object called <code>encodedUrl</code><ul> <li>This is because we'll be wrapping our target URL within a URL from our QR Code Service</li> </ul> </li> <li>Add your <code>encodedUrl</code> object to the data Url Parameter in the URL and assign it to a new object called <code>qrURL</code><ul> <li><pre><code>https://api.qrserver.com/v1/create-qr-code/?data=encodedUrl</code></pre></li> </ul> </li> <li>Structure the xAPI reference above using Macro Syntax with the following parameters and values<ul> <li>Url: <code>formattedURL</code></li> <li>Target: <code>target</code></li> </ul> </li> <li>Log a Successful response from your xAPI call</li> <li>Catch and log an error from your xAPI call</li> </ul> </li> <li>Replace <code>console.warn(action, url);</code> under the OpenQrCode case within your WidgetActions event with this new openQrCode() function call and pass in the <code>url</code> object into your function</li> </ul> View <code>openQrCode(url, target)</code> function <pre><code>async function openQrCode(url, target = 'OSD') { //&lt;-- Declare and define your openQrCode function\n  const encodedUrl = encodeURI(url);             //&lt;-- Encode the URL that was provided\n  const qrURL = `https://api.qrserver.com/v1/create-qr-code/?data=` + encodedUrl;\n  try {\n    const openPage = await xapi.Command.UserInterface.WebView.Display({\n      Url: qrURL,\n      Target: target\n    })\n    console.log(`QR Webview Opened for: [${url}]`, openPage, qrURL); //&lt;-- Log a Successful Response\n  } catch (e) {\n    const err = {\n      Context: `Failed to open QR WebView to: [${url}]`,\n      QrUrl: qrURL,\n      ...e\n    };\n    console.error(err); //&lt;-- Catch and log an Error\n  }\n}\n</code></pre> <p>        Learn more about <code>Async Functions</code>        Learn more about <code>try..catch</code> statements  </p> <ul> <li> <p>Once complete, Save and Activate the macro (if inactive)</p> </li> <li> <p>Start pressing the Open Site and Open QrCode \ud83d\udd33 buttons contained within your <code>Room Docs</code> panel</p> </li> <li>Monitor the Device OSD and Macro Console Output</li> </ul> </li> </ul> View OSD Output Lab 1451Reimagine Workspaces <p> Lab 1451 WebView </p> <p> Reimagine Workspaces WebView </p> Compare your Macro <pre><code>import xapi from 'xapi';\n\nasync function openSite(url, target = 'OSD') {\n  try {\n    const openPage = await xapi.Command.UserInterface.WebView.Display({\n      Url: url,\n      Target: target\n    })\n    console.log(`Site Webview Opened for: [${url}]`, openPage);\n  } catch (e) {\n    const err = {\n      Context: `Failed to open Site WebView to: [${url}]`,\n      ...e\n    };\n    throw new Error(err);\n  }\n}\n\nasync function openQrCode(url, target = 'OSD') { //&lt;-- Declare and define your openQrCode function\n  const encodedUrl = encodeURI(url);             //&lt;-- Encode the URL that was provided\n  const qrURL = `https://api.qrserver.com/v1/create-qr-code/?data=` + encodedUrl;\n  try {\n    const openPage = await xapi.Command.UserInterface.WebView.Display({\n      Url: qrURL,\n      Target: target\n    })\n    console.log(`QR Webview Opened for: [${url}]`, openPage, qrURL); //&lt;-- Log a Successful Response\n  } catch (e) {\n    const err = {\n      Context: `Failed to open QR WebView to: [${url}]`,\n      QrUrl: qrURL,\n      ...e\n    };\n    console.error(err); //&lt;-- Catch and log an Error\n  }\n}\n\nxapi.Event.UserInterface.Extensions.Widget.Action.on(({ WidgetId, Type, Value }) =&gt; {\n  console.debug({ WidgetId, Type, Value });\n  if (WidgetId.includes(`wx1_QrDocs`)) {\n    if (Type == 'released') {\n      const [app, action, url] = WidgetId.split(`~`);\n                        // \u2191 url object\n      switch (action) {\n        case 'OpenSite':\n          openSite(url);\n          break;\n        case 'OpenQrCode':\n          openQrCode(url); //&lt;-- Run the openQrCode() function and pass in the url object\n          break;\n        default:\n          console.error(`Unknown Action Fired: [${action}]`);\n          break;\n      };\n    };\n  };\n});\n</code></pre> Compare your Macro Console Time Macro Logs HH:MM:SS Room Docs QJS Ready HH:MM:SS Room Docs Site Webview Opened for: [https://webexcc-sa.github.io/LAB-1451/wx1_1451_part_3/] HH:MM:SS Room Docs QR Webview Opened for: [https://webexcc-sa.github.io/LAB-1451/wx1_1451_part_3/] HH:MM:SS Room Docs Site Webview Opened for: [https://www.webex.com/us/en/workspaces.html] HH:MM:SS Room Docs QR Webview Opened for: [https://www.webex.com/us/en/workspaces.html]"},{"location":"wx1_1451_part_3/#section-34-optimizing-our-solution","title":"Section 3.4: Optimizing our Solution\ud83e\udd73 You made a UI and a Macro \ud83c\udf89","text":"<p>Abstract</p> <p></p> <p>But we can do a few more things to make this a really rugged solution that enabled simpler deployment and allows us to scale a bit better</p> <p>And we can do this in several ways</p>"},{"location":"wx1_1451_part_3/#section-341-imports-exports-and-a-config-object","title":"Section 3.4.1: Imports, Exports and a Config Object","text":"<p>Create a new Macro</p> <ul> <li>Select Create new macro in the Macro Editor</li> <li>Name this macro Room Docs Configuration</li> <li>Save and keep the Room Docs Configuration Macro Inactive</li> </ul> Review how to Create and Save a Macro <p> Create, Save and Activate a Macro </p> Lesson: Establish a Config Object and Export <ul> <li> <p>xAPI: N/A</p> </li> <li> <p>Task:</p> <ul> <li> <p>Select the Room Docs Configuration Macro and perform the next few tasks in this Macro</p> </li> <li> <p>Remove <code>import xapi from 'xapi';</code> from the Room Docs Configuration Macro</p> </li> <li> <p>Copy the <code>config</code> object outlined below and paste this into the Room Docs Configuration Macro</p> </li> </ul> Copy this `config` Object<pre><code>const config = {\n  manifestVisibility: 'merge', // localOnly, remoteOnly, merge\n  remoteSiteManifest: '',\n  localSiteManifest: [\n    {\n      Name: 'Lab 1451',\n      Url: 'https://webexcc-sa.github.io/LAB-1451/wx1_1451_part_3/',\n      QrEnabled: false\n    },\n    {\n      Name: 'Reimagine Workspaces',\n      Url: 'https://www.webex.com/us/en/workspaces.html',\n      QrEnabled: true\n    }\n  ]\n};\n</code></pre> <ul> <li>Below the <code>config</code> object in the Room Docs Configuration Macro add the following</li> </ul> <pre><code>export { config };\n</code></pre> <ul> <li>Once complete, Save, keep this macro Inactive</li> </ul> Compare your <code>Room Docs Configuration</code> Macro <pre><code>const config = {\n  manifestVisibility: 'merge', // localOnly, remoteOnly, merge\n  remoteSiteManifest: '',\n  localSiteManifest: [\n    {\n      Name: 'Lab 1451',\n      Url: '',\n      QrEnabled: false\n    },\n    {\n      Name: 'Reimagine Workspaces',\n      Url: '',\n      QrEnabled: true\n    }\n  ]\n};\n\nexport { config };\n</code></pre> </li> </ul> Lesson: Import your Config Object <ul> <li> <p>xAPI: N/A</p> </li> <li> <p>Task:</p> <ul> <li> <p>Select the Room Docs Macro and perform the next few tasks in this Macro</p> </li> <li> <p>Below <code>import xapi from 'xapi';</code> add the following</p> </li> </ul> <pre><code>import { config } from './Room Docs Configuration';\n</code></pre> <ul> <li>add a new line and add</li> </ul> <pre><code>console.log('Config:', config);\n</code></pre> <ul> <li> <p>Once complete, Save and Activate the Room Docs Macro (if inactive)</p> </li> <li> <p>Monitor your log output, you should see our config object print to the console from the Room Docs Configuration Macro</p> </li> </ul> </li> </ul> Compare your <code>Room Docs</code> Macro <pre><code>import xapi from 'xapi';\nimport { config } from './Room Docs Configuration'; // &lt;-- Imports should always be on the top level\n\nconsole.log('Config:', config); // &lt;-- Log the config object here\n\nasync function openSite(url, target = 'OSD') {\n  try {\n    const openPage = await xapi.Command.UserInterface.WebView.Display({\n      Url: url,\n      Target: target\n    })\n    console.log(`Site Webview Opened for: [${url}]`, openPage);\n  } catch (e) {\n    const err = {\n      Context: `Failed to open Site WebView to: [${url}]`,\n      ...e\n    };\n    throw new Error(err);\n  }\n}\n\nasync function openQrCode(url, target = 'OSD') {\n  const encodedUrl = encodeURI(url);\n  const qrURL = `https://api.qrserver.com/v1/create-qr-code/?data=` + encodedUrl;\n  try {\n    const openPage = await xapi.Command.UserInterface.WebView.Display({\n      Url: qrURL,\n      Target: target\n    })\n    console.log(`QR Webview Opened for: [${url}]`, openPage, qrURL);\n  } catch (e) {\n    const err = {\n      Context: `Failed to open QR WebView to: [${url}]`,\n      QrUrl: qrURL,\n      ...e\n    };\n    console.error(err);\n  }\n}\n\nxapi.Event.UserInterface.Extensions.Widget.Action.on(({ WidgetId, Type, Value }) =&gt; {\n  console.debug({ WidgetId, Type, Value });\n  if (WidgetId.includes(`wx1_QrDocs`)) {\n    if (Type == 'released') {\n      const [app, action, url] = WidgetId.split(`~`);\n\n      switch (action) {\n        case 'OpenSite':\n          openSite(url);\n          break;\n        case 'OpenQrCode':\n          openQrCode(url);\n          break;\n        default:\n          console.error(`Unknown Action Fired: [${action}]`);\n          break;\n      };\n    };\n  };\n});\n</code></pre> Compare your Macro Console Time App Logs HH:MM:SS Room Docs QJS Ready HH:MM:SS Room Docs Config: {\"manifestVisibility\":\"localOnly\",\"remoteSiteManifest\":\"\",\"localSiteManifest\":[{\"Name\":\"Lab 1451\",\"Url\":\"\",\"QrEnabled\":false},{\"Name\":\"Reimagine Workspaces\",\"Url\":\"\",\"QrEnabled\":true}]}"},{"location":"wx1_1451_part_3/#section-342-automating-the-userinterface","title":"Section 3.4.2: Automating the UserInterface","text":"<p>Abstract</p> <p>Now that we have a config object established, we can iterate over this object and build the UserInterface dynamically. We can use a combination of the Device xAPI and some string manipulation techniques to form a new XML payload which we can load in as soon as the script starts</p> Lesson: Download our current UserInterface XML <p>Click on the Tabs Below to learn how to download the UI XML</p> Device HomeUI Extensions EditorDownload OptionsDownload Operation <ul> <li>Select the UI Extensions Editor on the Left-Hand Navigation Bar</li> </ul> <p> Device Home Page </p> <ul> <li>The Options to download the UI Extension Panel is in the Extensions ToolBar</li> </ul> <p> UI Extensions Editor </p> <ul> <li>Select the Room Docs Panel</li> <li>Select the Editor Menu (\"Pancake\" icon) in the Extensions Toolbar</li> <li>Select Export current panel to file</li> </ul> <p> UI Extensions ToolBar Expanded </p> <ul> <li>UI Extensions Downloads come with the name roomcontrolconfig\u00a0-\u00a00000-00-00T00:00:00.000.xml</li> <li>The Most Recent Timestamp is the one you just downloaded</li> </ul> <p> UI Extensions Download Operation </p> <ul> <li> <p>xAPI: N/A</p> </li> <li> <p>Task: </p> <ul> <li> <p>Open the roomcontrolconfig\u00a0-\u00a00000-00-00T00:00:00.000.xml file</p> <ul> <li>Use Notepad for Windows</li> <li>Use TextEdit for MAC</li> </ul> </li> <li> <p>Review the contents of your UI Extension's XML</p> </li> <li>We'll be taking parts of this XML in the next lesson, and re-structuring it based on our <code>config</code> object</li> </ul> </li> </ul> Lesson: Add a <code>buildUI()</code> function to the Room Docs Macro <ul> <li> <p>xAPI: xCommand UserInterface Extensions Panel Save</p> </li> <li> <p>Task:</p> <ul> <li> <p>Declare a new async function called buildUI with no parameters</p> </li> <li> <p>Within this function:</p> <ul> <li>Declare a <code>rows</code> object with a value of <code>''</code> (Yes, no value assigned)</li> <li>Use ES6 JS's forEach prototype to loop through the <code>config.localSiteManifest</code> Array     <pre><code>let rows = '';\n\nconfig.localSiteManifest.forEach(site =&gt; {\n  console.log(`Appending [${site.Name}] Site to UI`);\n  rows = rows + `&lt;Row&gt;\n                  &lt;Name&gt;${site.Name}&lt;/Name&gt;\n                  &lt;Widget&gt;\n                    &lt;WidgetId&gt;wx1_QrDocs~OpenSite~${site.Url}&lt;/WidgetId&gt;\n                    &lt;Name&gt;Open Site&lt;/Name&gt;\n                    &lt;Type&gt;Button&lt;/Type&gt;\n                    &lt;Options&gt;size=${site.QrEnabled ? 2 : 4}&lt;/Options&gt;\n                  &lt;/Widget&gt;\n                  ${site.QrEnabled ? `&lt;Widget&gt;\n                    &lt;WidgetId&gt;wx1_QrDocs~OpenQrCode~${site.Url}&lt;/WidgetId&gt;\n                    &lt;Name&gt;Open QrCode \ud83d\udd33&lt;/Name&gt;\n                    &lt;Type&gt;Button&lt;/Type&gt;\n                    &lt;Options&gt;size=2&lt;/Options&gt;\n                  &lt;/Widget&gt;`: ''}\n                &lt;/Row&gt;`\n})\n</code></pre></li> </ul> Ok, what's going above??? <p>It's alot to unpack, I know, but it's just too cool to NOT show you </p> <p>In the roomcontrolconfig\u00a0-\u00a00000-00-00T00:00:00.000.xml file we found one of our rows of sites</p> <p>We took a Row, which is surrounded by <code>&lt;Row&gt;[More Row Content]&lt;/Row&gt;</code> tags that matched out Site information</p> <p>We then declared a new <code>rows</code> object and looped through it using the <code>forEach()</code> ES6 JS prototype</p> <p>In this loop, we accessed the properties of each site, that was configured in the <code>config</code> object under the <code>localSiteManifest</code> Array and places the Name and URL into the correct locations within the XML structure. We do this by referencing the <code>config</code> and making use of ES6 JS's Template Literal feature to place the data as well as leveraging ES6 JS's Conditional Operator to check if the QrEnabled value is set to true</p> <p>Each time the <code>forEach()</code> prototype loops, it takes the <code>rows</code> object and concatenates another row of information and will do so for each site defined in the <code>localSiteManifest</code> Array</p> <p>        Learn more about the <code>.forEach()</code> prototype         Learn more about <code>Arrays</code>        Learn more about <code>Template Literals</code>        Learn more about <code>Conditional Operators</code>        Learn more about <code>Concatenation</code> using the <code>+</code> operator  </p> <ul> <li>In your roomcontrolconfig\u00a0-\u00a00000-00-00T00:00:00.000.xml do the following</li> </ul> Remove Version Tag and ContentRemove PanelIdReplace All Site RowsView Fully Edited XML <ul> <li>This allows the Codec to assign an XML version and avoid conflicts</li> </ul> Remove ME<pre><code>&lt;Version&gt;1.11&lt;/Version&gt; \n</code></pre> <ul> <li>The PanelId is provided as apart of the Panel Save command, so having a mismatch could be problematic</li> <li>Removing this tag prevents the chance of a mismatch and allows the Codec to assign the PanelId based on the command execution</li> </ul> Remove ME<pre><code>&lt;PanelId&gt;wx1_QrDocs&lt;/PanelId&gt;\n</code></pre> <ul> <li>replace All site rows with <code>${rows}</code>, which is out object where we instantiated our new row information based on our <code>config</code> object</li> </ul> Replace ME with ${rows}<pre><code>&lt;Row&gt;\n  &lt;Name&gt;Lab 1451&lt;/Name&gt;\n  &lt;Widget&gt;\n    &lt;WidgetId&gt;wx1_QrDocs~OpenSite~https://webexcc-sa.github.io/LAB-1451/wx1_1451_part_3/&lt;/WidgetId&gt;\n    &lt;Name&gt;Open Site&lt;/Name&gt;\n    &lt;Type&gt;Button&lt;/Type&gt;\n    &lt;Options&gt;size=2&lt;/Options&gt;\n  &lt;/Widget&gt;\n  &lt;Widget&gt;\n    &lt;WidgetId&gt;wx1_QrDocs~OpenQrCode~https://webexcc-sa.github.io/LAB-1451/wx1_1451_part_3/&lt;/WidgetId&gt;\n    &lt;Name&gt;Open QrCode \ud83d\udd33&lt;/Name&gt;\n    &lt;Type&gt;Button&lt;/Type&gt;\n    &lt;Options&gt;size=2&lt;/Options&gt;\n  &lt;/Widget&gt;\n&lt;/Row&gt;\n&lt;Row&gt;\n  &lt;Name&gt;Reimagine Workspaces&lt;/Name&gt;\n  &lt;Widget&gt;\n    &lt;WidgetId&gt;wx1_QrDocs~OpenSite~https://www.webex.com/us/en/workspaces.html&lt;/WidgetId&gt;\n    &lt;Name&gt;Open Site&lt;/Name&gt;\n    &lt;Type&gt;Button&lt;/Type&gt;\n    &lt;Options&gt;size=2&lt;/Options&gt;\n  &lt;/Widget&gt;\n  &lt;Widget&gt;\n    &lt;WidgetId&gt;wx1_QrDocs~OpenQrCode~https://www.webex.com/us/en/workspaces.html&lt;/WidgetId&gt;\n    &lt;Name&gt;Open QrCode \ud83d\udd33&lt;/Name&gt;\n    &lt;Type&gt;Button&lt;/Type&gt;\n    &lt;Options&gt;size=2&lt;/Options&gt;\n  &lt;/Widget&gt;\n&lt;/Row&gt;\n</code></pre> Should look something like...<pre><code>&lt;Extensions&gt;\n  &lt;Panel&gt;\n    &lt;Order&gt;1&lt;/Order&gt;\n    &lt;Origin&gt;local&lt;/Origin&gt;\n    &lt;Location&gt;HomeScreenAndCallControls&lt;/Location&gt;\n    &lt;Icon&gt;Language&lt;/Icon&gt;\n    &lt;Color&gt;#875AE0&lt;/Color&gt;\n    &lt;Name&gt;Room Docs&lt;/Name&gt;\n    &lt;ActivityType&gt;Custom&lt;/ActivityType&gt;\n    &lt;Page&gt;\n      &lt;Name&gt;Room Docs&lt;/Name&gt;\n      ${rows}\n      &lt;PageId&gt;wx1_QrDocs~RoomDocs&lt;/PageId&gt;\n      &lt;Options/&gt;\n    &lt;/Page&gt;\n  &lt;/Panel&gt;\n&lt;/Extensions&gt;\n</code></pre> <ul> <li> <p>Declare a new object called <code>xml</code> and assign it the value of your edited xml</p> </li> <li> <p>Structure the xAPI reference above using Macro Syntax with the following parameters and values</p> <ul> <li>PanelId: wx1_QrDocs</li> <li>body: <code>xml</code></li> </ul> </li> <li> <p>Place this xAPI call in a <code>try...catch</code> block and handle it's response and error appropriately</p> </li> <li> <p>Then run this function after it has been defined</p> </li> <li> <p>Once complete, Save and Activate the Room Docs Macro (if inactive)</p> </li> </ul> </li> </ul> </li> </ul> View <code>buildUI()</code> function <pre><code>async function buildUI() {\n  let rows = '';\n\n  config.localSiteManifest.forEach(site =&gt; {\n    console.log(`Appending [${site.Name}] Site to UI`);\n    rows = rows + `&lt;Row&gt;\n                    &lt;Name&gt;${site.Name}&lt;/Name&gt;\n                    &lt;Widget&gt;\n                      &lt;WidgetId&gt;wx1_QrDocs~OpenSite~${site.Url}&lt;/WidgetId&gt;\n                      &lt;Name&gt;Open Site&lt;/Name&gt;\n                      &lt;Type&gt;Button&lt;/Type&gt;\n                      &lt;Options&gt;size=${site.QrEnabled ? 2 : 4}&lt;/Options&gt;\n                    &lt;/Widget&gt;\n                    ${site.QrEnabled ? `&lt;Widget&gt;\n                      &lt;WidgetId&gt;wx1_QrDocs~OpenQrCode~${site.Url}&lt;/WidgetId&gt;\n                      &lt;Name&gt;Open QrCode \ud83d\udd33&lt;/Name&gt;\n                      &lt;Type&gt;Button&lt;/Type&gt;\n                      &lt;Options&gt;size=2&lt;/Options&gt;\n                    &lt;/Widget&gt;`: ''}\n                  &lt;/Row&gt;`;\n  });\n\n  const xml = `&lt;Extensions&gt;\n                &lt;Panel&gt;\n                  &lt;Order&gt;1&lt;/Order&gt;\n                  &lt;Origin&gt;local&lt;/Origin&gt;\n                  &lt;Location&gt;HomeScreenAndCallControls&lt;/Location&gt;\n                  &lt;Icon&gt;Language&lt;/Icon&gt;\n                  &lt;Color&gt;#875AE0&lt;/Color&gt;\n                  &lt;Name&gt;Room Docs&lt;/Name&gt;\n                  &lt;ActivityType&gt;Custom&lt;/ActivityType&gt;\n                  &lt;Page&gt;\n                    &lt;Name&gt;Room Docs&lt;/Name&gt;\n                    ${rows}\n                    &lt;PageId&gt;wx1_QrDocs~RoomDocs&lt;/PageId&gt;\n                    &lt;Options/&gt;\n                  &lt;/Page&gt;\n                &lt;/Panel&gt;\n              &lt;/Extensions&gt;`;\n\n  try {\n    const build = await xapi.Command.UserInterface.Extensions.Panel.Save({\n      PanelId: 'wx1_QrDocs'\n    }, xml);\n    console.log('UserInterface Built!', build);\n  } catch (e) {\n    const err = {\n      Context: `Failed to Build UserInterface`,\n      ...e\n    };\n    console.error(err);\n  };\n};\n</code></pre> Compare your <code>Room Docs</code> Macro <pre><code>import xapi from 'xapi';\nimport { config } from './Room Docs Configuration';\n\nconsole.log('Config:', config);\n\nasync function openSite(url, target = 'OSD') {\n  try {\n    const openPage = await xapi.Command.UserInterface.WebView.Display({\n      Url: url,\n      Target: target\n    })\n    console.log(`Site Webview Opened for: [${url}]`, openPage);\n  } catch (e) {\n    const err = {\n      Context: `Failed to open Site WebView to: [${url}]`,\n      ...e\n    };\n    throw new Error(err);\n  }\n}\n\nasync function openQrCode(url, target = 'OSD') {\n  const encodedUrl = encodeURI(url);\n  const qrURL = `https://api.qrserver.com/v1/create-qr-code/?data=` + encodedUrl;\n  try {\n    const openPage = await xapi.Command.UserInterface.WebView.Display({\n      Url: qrURL,\n      Target: target\n    })\n    console.log(`QR Webview Opened for: [${url}]`, openPage, qrURL);\n  } catch (e) {\n    const err = {\n      Context: `Failed to open QR WebView to: [${url}]`,\n      QrUrl: qrURL,\n      ...e\n    };\n    console.error(err);\n  }\n}\n\nasync function buildUI() { // &lt;-- Declare and Define your buildUI() function\n  let rows = '';  // &lt;-- declare your rows object\n\n  config.localSiteManifest.forEach(site =&gt; { // &lt;-- use forEach() to loop through the localSiteManifest Array\n    console.log(`Appending [${site.Name}] Site to UI`);\n\n    // Re-assign the value of rows with the current value of rows, plus the XML for a new row\n    //  passing in the data for each item listed in the localSiteManifest Array\n    rows = rows + `&lt;Row&gt; \n                    &lt;Name&gt;${site.Name}&lt;/Name&gt;\n                    &lt;Widget&gt;\n                      &lt;WidgetId&gt;wx1_QrDocs~OpenSite~${site.Url}&lt;/WidgetId&gt;\n                      &lt;Name&gt;Open Site&lt;/Name&gt;\n                      &lt;Type&gt;Button&lt;/Type&gt;\n                      &lt;Options&gt;size=${site.QrEnabled ? 2 : 4}&lt;/Options&gt;\n                    &lt;/Widget&gt;\n                    ${site.QrEnabled ? `&lt;Widget&gt;\n                      &lt;WidgetId&gt;wx1_QrDocs~OpenQrCode~${site.Url}&lt;/WidgetId&gt;\n                      &lt;Name&gt;Open QrCode \ud83d\udd33&lt;/Name&gt;\n                      &lt;Type&gt;Button&lt;/Type&gt;\n                      &lt;Options&gt;size=2&lt;/Options&gt;\n                    &lt;/Widget&gt;`: ''}\n                  &lt;/Row&gt;`;\n  });\n\n  // Declare and assign the rest of the XML for your panel, and pass in the rows data\n  const xml = `&lt;Extensions&gt;\n                &lt;Panel&gt;\n                  &lt;Order&gt;1&lt;/Order&gt;\n                  &lt;Origin&gt;local&lt;/Origin&gt;\n                  &lt;Location&gt;HomeScreenAndCallControls&lt;/Location&gt;\n                  &lt;Icon&gt;Language&lt;/Icon&gt;\n                  &lt;Color&gt;#875AE0&lt;/Color&gt;\n                  &lt;Name&gt;Room Docs&lt;/Name&gt;\n                  &lt;ActivityType&gt;Custom&lt;/ActivityType&gt;\n                  &lt;Page&gt;\n                    &lt;Name&gt;Room Docs&lt;/Name&gt;\n                    ${rows /* Contains all the rows from the forEach() loop*/}\n                    &lt;PageId&gt;wx1_QrDocs~RoomDocs&lt;/PageId&gt;\n                    &lt;Options/&gt;\n                  &lt;/Page&gt;\n                &lt;/Panel&gt;\n              &lt;/Extensions&gt;`;\n\n  try {\n    const build = await xapi.Command.UserInterface.Extensions.Panel.Save({ // structure xCommand UserInterface Extensions Panel Save\n      PanelId: 'wx1_QrDocs'\n    }, xml);\n    console.log('UserInterface Built!', build); // Log it's repsonse\n  } catch (e) {\n    const err = {\n      Context: `Failed to Build UserInterface`,\n      ...e\n    };\n    console.error(err); // Catch and log it's error\n  };\n};\n\nbuildUI();  //&lt;-- Run the buildUI() function\n\nxapi.Event.UserInterface.Extensions.Widget.Action.on(({ WidgetId, Type, Value }) =&gt; {\n  console.debug({ WidgetId, Type, Value });\n  if (WidgetId.includes(`wx1_QrDocs`)) {\n    if (Type == 'released') {\n      const [app, action, url] = WidgetId.split(`~`);\n\n      switch (action) {\n        case 'OpenSite':\n          openSite(url);\n          break;\n        case 'OpenQrCode':\n          openQrCode(url);\n          break;\n        default:\n          console.error(`Unknown Action Fired: [${action}]`);\n          break;\n      };\n    };\n  };\n});\n</code></pre> Compare your Macro Console Time App Logs HH:MM:SS Room Docs QJS Ready HH:MM:SS Room Docs Config: {\"manifestVisibility\":\"localOnly\",\"remoteSiteManifest\":\"\",\"localSiteManifest\":[{\"Name\":\"Lab 1451\",\"Url\":\"https://webexcc-sa.github.io/LAB-1451/wx1_1451_part_3/\",\"QrEnabled\":true},{\"Name\":\"Reimagine Workspaces\",\"Url\":\"https://www.webex.com/us/en/workspaces.html\",\"QrEnabled\":true},{\"Name\":\"Cisco\",\"Url\":\"https://www.cisco.com\",\"QrEnabled\":true}]} HH:MM:SS Room Docs Appending [Lab 1451] Site to UI HH:MM:SS Room Docs Appending [Reimagine Workspaces] Site to UI HH:MM:SS Room Docs Appending [Cisco] Site to UI HH:MM:SS Room Docs UserInterface Built! HH:MM:SS Room Docs Site Webview Opened for: [https://webexcc-sa.github.io/LAB-1451/wx1_1451_part_3/] HH:MM:SS Room Docs QR Webview Opened for: [https://webexcc-sa.github.io/LAB-1451/wx1_1451_part_3/] {\"status\":\"OK\"} https://api.qrserver.com/v1/create-qr-code/?data=https://webexcc-sa.github.io/LAB-1451/wx1_1451_part_3/ HH:MM:SS Room Docs Site Webview Opened for: [https://www.webex.com/us/en/workspaces.html] HH:MM:SS Room Docs QR Webview Opened for: [https://www.webex.com/us/en/workspaces.html] {\"status\":\"OK\"} https://api.qrserver.com/v1/create-qr-code/?data=https://www.webex.com/us/en/workspaces.html Lesson: Add a new Site to the Config <p>Note</p> <p>To check our work, let's expand our <code>localSiteManifest</code> to include 2 new sites</p> <ul> <li> <p>xAPI: N/A</p> </li> <li> <p>Task: </p> <ul> <li>Select the Room Docs Configuration Macro and perform the next few tasks in this Macro</li> <li> <p>Under the <code>localSiteManifest</code> Array add the following 2 sites and additional Properties following the same JSON format as the other sites</p> <ul> <li>Site 1<ul> <li>Name: Cisco</li> <li>Url: https://www.cisco.com</li> <li>QrEnabled: false</li> </ul> </li> <li>Set 2 [Add Your Organizations Home Page]<ul> <li>Name: Your Org Name</li> <li>Url: Your Org Site</li> <li>QrEnabled: true</li> </ul> </li> </ul> </li> <li> <p>Once complete, Save and Activate the Room Docs Macro (if inactive)</p> </li> <li> <p>Start pressing the Open Site and Open QrCode \ud83d\udd33 buttons contained within your <code>Room Docs</code> panel</p> </li> <li>Monitor the Device OSD and Macro Console Output</li> </ul> </li> </ul> Compare your <code>Room Docs</code> Panel UI <p> Local Panel UI </p> Compare your Room Docs Configuration Macro <pre><code>const config = {\n  manifestVisibility: 'merge', // localOnly, remoteOnly, merge\n  remoteSiteManifest: 'https://raw.githubusercontent.com/WebexCC-SA/LAB-1451/refs/heads/main/docs/assets/downloadable_resources/3-4-3_remoteManifest.json',\n  localSiteManifest: [\n    {\n      Name: 'Lab 1451',\n      Url: 'https://webexcc-sa.github.io/LAB-1451/wx1_1451_part_3/',\n      QrEnabled: true\n    },\n    {\n      Name: 'Reimagine Workspaces',\n      Url: 'https://www.webex.com/us/en/workspaces.html',\n      QrEnabled: true\n    },\n    {\n      Name: 'Cisco',                // &lt;-- Cisco Homepage Added\n      Url: 'https://www.cisco.com',\n      QrEnabled: true\n    },\n    // Your Org Details Below Here\n  ]\n};\n\nexport { config };\n</code></pre>"},{"location":"wx1_1451_part_3/#section-343-centralize-your-doc-urls","title":"Section 3.4.3: Centralize your Doc URLs","text":"<p>Abstract</p> <p>Now that we have an interface that can build itself with small changes to a config file, let's make this a bit easier for ourselves to manage</p> <p>We can leverage the Codec's HTTPClient xAPIs to reach out to a single endpoint that's hosting all of our document references and pull it down into the Codec before running the buildUI() function</p> <p>Note</p> <p>This lab is hosting a file called <code>3-4-3_remoteManifest.json</code> on GitHub which contains 6 additional sites pre-configured in the same format as the local sites configured on the endpoint</p> <p>   Review the Remote Manifest File  </p> Lesson: Add a Remote Site URL to your <code>config</code> object <ul> <li> <p>xAPI: N/A</p> </li> <li> <p>Task:</p> <ul> <li>Select the Room Docs Configuration macro</li> <li>Edit the <code>remoteSiteManifest</code> object and assign the following url as a string<ul> <li>https://raw.githubusercontent.com/WebexCC-SA/LAB-1451/refs/heads/main/docs/assets/downloadable_resources/3-4-3_remoteManifest.json</li> </ul> </li> <li>Once complete, Save, keep this macro Inactive</li> </ul> </li> </ul> Compare your Room Docs Configuration Macro <pre><code>const config = {\n  manifestVisibility: 'merge', // localOnly, remoteOnly, merge\n  remoteSiteManifest: 'https://raw.githubusercontent.com/WebexCC-SA/LAB-1451/refs/heads/main/docs/assets/downloadable_resources/3-4-3_remoteManifest.json',\n  localSiteManifest: [\n    {\n      Name: 'Lab 1451',\n      Url: 'https://webexcc-sa.github.io/LAB-1451/wx1_1451_part_3/',\n      QrEnabled: true\n    },\n    {\n      Name: 'Reimagine Workspaces',\n      Url: 'https://www.webex.com/us/en/workspaces.html',\n      QrEnabled: true\n    },\n    {\n      Name: 'Cisco',\n      Url: 'https://www.cisco.com',\n      QrEnabled: true\n    }\n  ]\n};\n\nexport { config };\n</code></pre> Lesson: Declare a <code>getRemoteSiteManifest()</code> function <p>Note</p> <p>Here, we're we'll be making an HTTP Get call using the HTTPClient xAPI stack to reach our pull information from a site external to the codec</p> Always Keep Security Top of Mind! <p>It's easy to fall outside your organization's security policy especially when building new solutions.</p> <p>Make sure you work with your, or your Customer's, Information Security teams before implementing a new solution that requires Integration Authentication of any kind or reaches out on the internet.</p> <p>The security implications of a solution can force you building your solution using a different integration method, or even stop a project all together.</p> <p>        Checkout Webex's  Security Technical References  </p> <ul> <li> <p>xAPI: xCommand HTTPClient Get</p> </li> <li> <p>Task:</p> <ul> <li> <p>Select the Room Docs macro</p> </li> <li> <p>Declare a new async function called getRemoteSiteManifest with no parameters</p> </li> <li> <p>Within this function:</p> <ul> <li>Declare a <code>request</code> object with a value of <code>''</code> (Yes, no value assigned)</li> <li>Declare a <code>remoteData</code> object with a value of <code>[]</code> (Yes, no value assigned)            </li> <li>Within a <code>try...catch</code> block, structure the xAPI path above in Macro Syntax with the following parameters and assign this to the <code>request</code> object</li> <li>Use the JSON.parse() method on the <code>request.Body</code> (the response captured in the <code>request</code> object) and assign this to the <code>remoteData</code> object<ul> <li>JSON.parse() allows us to later handler the data from the external site as if it were a JSON object, not a string</li> </ul> </li> <li>Use console.debug to log the <code>remoteData</code> object</li> <li>Return the <code>remoteData</code> object</li> <li>Catch and log any errors</li> </ul> <p>Click the Tabs below to see each step outlined above</p> Declare Function and ObjectsAssign Request with xAPIParse Response and ReturnCatch and Log Errors (Full Func) <pre><code>async function getRemoteSiteManifest() {\n  let request = ''; // &lt;-- Declare request object\n  let remoteData = []; // &lt;-- Declare remoteData object\n\n}\n</code></pre> <pre><code>async function getRemoteSiteManifest() {\n  let request = '';\n  let remoteData = [];\n\n  try { // &lt;-- Setup try...catch block\n    request = await xapi.Command.HttpClient.Get({ // &lt;-- Assign xCommand HTTPClient Get\n      Url: config.remoteSiteManifest // &lt;-- Assign remoteManifest URL from the config\n    })\n\n  } catch (e) {\n\n  }\n}\n</code></pre> <pre><code>async function getRemoteSiteManifest() {\n  let request = '';\n  let remoteData = [];\n\n  try {\n    request = await xapi.Command.HttpClient.Get({\n      Url: config.remoteSiteManifest\n    })\n    remoteData = JSON.parse(request.Body); // &lt;-- Use JSON.parse to process the request.Body\n    console.debug(`Remote Site Manifest Found`, remoteData); // &lt;-- log the response to the debug console\n    return remoteData // &lt;-- return the remote site data\n  } catch (e) {\n\n  }\n}\n</code></pre> <pre><code>async function getRemoteSiteManifest() {\n  let request = '';\n  let remoteData = [];\n\n  try {\n    request = await xapi.Command.HttpClient.Get({\n      Url: config.remoteSiteManifest\n    })\n    remoteData = JSON.parse(request.Body);\n    console.debug(`Remote Site Manifest Found`, remoteData);\n    return remoteData\n  } catch (e) { // &lt;-- Handle the possible Error\n    const err = {\n      Context: 'Failed to Get remote site manifest', // &lt;-- Leave yourself clues to troubleshoot\n      ...e\n    }\n    console.error(err); // &lt;-- Log the error\n  }\n}\n</code></pre> <ul> <li>Once complete, Save and Activate the Room Docs Macro (if inactive)</li> </ul> </li> </ul> </li> </ul> Lesson: Integrate the <code>getRemoteSiteManifest()</code> function into the <code>buildUI()</code> function <ul> <li> <p>xAPI(s):</p> <ul> <li>xCommand HTTPClient Get</li> <li>xCommand UserInterface Extensions Panel Save</li> </ul> </li> <li> <p>Task:</p> <ul> <li>Select the Room Docs macro</li> <li> <ul> <li>Below the <code>let rows</code> declaration and above the <code>config.localSiteManifest.forEach(...)</code> loop, start a <code>switch</code> statement</li> <li>We'll switch based on the <code>config</code> object's manifestVisibility value. This can be 1 of 3 values and should apply the following behaviors<ul> <li>localOnly: The UI will only build sites that are found locally in the Codec's Room Docs Configuration macro</li> <li>remoteOnly: The UI will only build sites that are configured in our remoteSiteManifest Url</li> <li>merge: The UI will combine local and remote sites into the UI</li> <li>if the remoteSiteManifest Url is missing, you should ignore these values</li> </ul> </li> </ul> <p>Edit the <code>buildUI()</code> function</p> <p>Copy the Switch Statement below into your buildUI() function</p> <pre><code>switch (config.manifestVisibility) {\n  case 'remoteOnly':\n    if (config.remoteSiteManifest != '' &amp;&amp; config.remoteSiteManifest != undefined) { // &lt;-- Check to see if the ==remoteSiteManifest== Url is configured\n      config.localSiteManifest = await getRemoteSiteManifest(); // &lt;-- overwrite configured localSiteManifest with the remoteSiteManifest\n    }\n    break;\n  case 'merge':\n    if (config.remoteSiteManifest != '' &amp;&amp; config.remoteSiteManifest != undefined) { // &lt;-- Check to see if the ==remoteSiteManifest== Url is configured\n      config.localSiteManifest = [...config.localSiteManifest, ...await getRemoteSiteManifest()] // &lt;-- overwrite configured localSiteManifest with a new Array, using both the current localSiteManifest and the remoteSiteManifest\n    }\n    break;\n  case 'localOnly':\n    // No Action Required\n    break;\n  default:\n    console.warn(`Unknown manifestVisibility assignment: [${config.manifestVisibility}]`) // &lt;-- Log unknown manifestVisibility values to the console\n    break;\n}\n</code></pre> </li> <li> <p>Once complete, Save and Activate the Room Docs Macro (if inactive)</p> </li> <li>Start pressing the Open Site and Open QrCode \ud83d\udd33 buttons contained within your <code>Room Docs</code> panel</li> <li>Monitor the Macro Console Output</li> </ul> </li> </ul> Compare your <code>Room Docs</code> Panel UI <ul> <li>Remote Sites are marked with a <code>\ud83d\udd17</code> emoji for clarity</li> </ul> <p> Remote and Local Panel UI </p> Compare your <code>Room Docs</code> Macro <pre><code>import xapi from 'xapi';\nimport { config } from './Room Docs Configuration';\n\nconsole.log('Config:', config);\n\nasync function openSite(url, target = 'OSD') {\n  try {\n    const openPage = await xapi.Command.UserInterface.WebView.Display({\n      Url: url,\n      Target: target\n    })\n    console.log(`Site Webview Opened for: [${url}]`, openPage);\n  } catch (e) {\n    const err = {\n      Context: `Failed to open Site WebView to: [${url}]`,\n      ...e\n    };\n    throw new Error(err);\n  }\n}\n\nasync function openQrCode(url, target = 'OSD') {\n  const encodedUrl = encodeURI(url);\n  const qrURL = `https://api.qrserver.com/v1/create-qr-code/?data=` + encodedUrl;\n  try {\n    const openPage = await xapi.Command.UserInterface.WebView.Display({\n      Url: qrURL,\n      Target: target\n    })\n    console.log(`QR Webview Opened for: [${url}]`, openPage, qrURL);\n  } catch (e) {\n    const err = {\n      Context: `Failed to open QR WebView to: [${url}]`,\n      QrUrl: qrURL,\n      ...e\n    };\n    console.error(err);\n  }\n}\n\nasync function getRemoteSiteManifest() {\n  let request = '';\n  let remoteData = [];\n\n  try {\n    request = await xapi.Command.HttpClient.Get({\n      Url: config.remoteSiteManifest\n    })\n    remoteData = JSON.parse(request.Body);\n    console.debug(`Remote Site Manifest Found`, remoteData);\n    return remoteData\n  } catch (e) {\n    const err = {\n      Context: 'Failed to Get remote site manifest',\n      ...e\n    }\n    console.error(err);\n  }\n}\n\nasync function buildUI() {\n  let rows = '';\n\n  switch (config.manifestVisibility) {\n    case 'remoteOnly':\n      if (config.remoteSiteManifest != '' &amp;&amp; config.remoteSiteManifest != undefined) {\n        config.localSiteManifest = await getRemoteSiteManifest();\n      }\n      break;\n    case 'merge':\n      if (config.remoteSiteManifest != '' &amp;&amp; config.remoteSiteManifest != undefined) {\n        config.localSiteManifest = [...config.localSiteManifest, ...await getRemoteSiteManifest()]\n      }\n      break;\n    case 'localOnly':\n      // No Action Required\n      break;\n    default:\n      console.warn(`Unknown manifestVisibility assignment: [${config.manifestVisibility}]`)\n      break;\n  }\n\n  config.localSiteManifest.forEach(site =&gt; {\n    console.log(`Appending [${site.Name}] Site to UI`);\n\n    rows = rows + `&lt;Row&gt; \n                    &lt;Name&gt;${site.Name}&lt;/Name&gt;\n                    &lt;Widget&gt;\n                      &lt;WidgetId&gt;wx1_QrDocs~OpenSite~${site.Url}&lt;/WidgetId&gt;\n                      &lt;Name&gt;Open Site&lt;/Name&gt;\n                      &lt;Type&gt;Button&lt;/Type&gt;\n                      &lt;Options&gt;size=${site.QrEnabled ? 2 : 4}&lt;/Options&gt;\n                    &lt;/Widget&gt;\n                    ${site.QrEnabled ? `&lt;Widget&gt;\n                      &lt;WidgetId&gt;wx1_QrDocs~OpenQrCode~${site.Url}&lt;/WidgetId&gt;\n                      &lt;Name&gt;Open QrCode \ud83d\udd33&lt;/Name&gt;\n                      &lt;Type&gt;Button&lt;/Type&gt;\n                      &lt;Options&gt;size=2&lt;/Options&gt;\n                    &lt;/Widget&gt;`: ''}\n                  &lt;/Row&gt;`;\n  });\n\n  const xml = `&lt;Extensions&gt;\n                &lt;Panel&gt;\n                  &lt;Order&gt;1&lt;/Order&gt;\n                  &lt;Origin&gt;local&lt;/Origin&gt;\n                  &lt;Location&gt;HomeScreenAndCallControls&lt;/Location&gt;\n                  &lt;Icon&gt;Language&lt;/Icon&gt;\n                  &lt;Color&gt;#875AE0&lt;/Color&gt;\n                  &lt;Name&gt;Room Docs&lt;/Name&gt;\n                  &lt;ActivityType&gt;Custom&lt;/ActivityType&gt;\n                  &lt;Page&gt;\n                    &lt;Name&gt;Room Docs&lt;/Name&gt;\n                    ${rows}\n                    &lt;PageId&gt;wx1_QrDocs~RoomDocs&lt;/PageId&gt;\n                    &lt;Options/&gt;\n                  &lt;/Page&gt;\n                &lt;/Panel&gt;\n              &lt;/Extensions&gt;`;\n\n  try {\n    const build = await xapi.Command.UserInterface.Extensions.Panel.Save({\n      PanelId: 'wx1_QrDocs'\n    }, xml);\n    console.log('UserInterface Built!', build);\n  } catch (e) {\n    const err = {\n      Context: `Failed to Build UserInterface`,\n      ...e\n    };\n    console.error(err);\n  };\n};\n\nbuildUI();\n\nxapi.Event.UserInterface.Extensions.Widget.Action.on(({ WidgetId, Type, Value }) =&gt; {\n  console.debug({ WidgetId, Type, Value });\n  if (WidgetId.includes(`wx1_QrDocs`)) {\n    if (Type == 'released') {\n      const [app, action, url] = WidgetId.split(`~`);\n\n      switch (action) {\n        case 'OpenSite':\n          openSite(url);\n          break;\n        case 'OpenQrCode':\n          openQrCode(url);\n          break;\n        default:\n          console.error(`Unknown Action Fired: [${action}]`);\n          break;\n      };\n    };\n  };\n});\n</code></pre> Compare your Macro Console Time Macro Log 23:50:16 Room Docs QJS Ready 23:50:16 Room Docs Config: {\"manifestVisibility\":\"merge\",\"remoteSiteManifest\":\"https://raw.githubusercontent.com/WebexCC-SA/LAB-1451/refs/heads/main/docs/assets/downloadable_resources/3-4-3_remoteManifest.json\",\"localSiteManifest\":[{\"Name\":\"Lab 1451\",\"Url\":\"https://webexcc-sa.github.io/LAB-1451/wx1_1451_part_3/\",\"QrEnabled\":true},{\"Name\":\"Reimagine Workspaces\",\"Url\":\"https://www.webex.com/us/en/workspaces.html\",\"QrEnabled\":true},{\"Name\":\"Cisco\",\"Url\":\"https://www.cisco.com\",\"QrEnabled\":true}]} 23:50:16 Room Docs Appending [Lab 1451] Site to UI 23:50:16 Room Docs Appending [Reimagine Workspaces] Site to UI 23:50:16 Room Docs Appending [Cisco] Site to UI 23:50:16 Room Docs Appending [Room Kit EQX \ud83d\udd17] Site to UI 23:50:16 Room Docs Appending [WebexOne \ud83d\udd17] Site to UI 23:50:16 Room Docs Appending [RoomOS xAPI References \ud83d\udd17] Site to UI 23:50:16 Room Docs Appending [Crossview Room Pre Guidelines \ud83d\udd17] Site to UI 23:50:16 Room Docs Appending [Using Extra LoudSpeakers \ud83d\udd17] Site to UI 23:50:16 Room Docs Appending [Webex AI Codec \ud83d\udd17] Site to UI 23:50:16 Room Docs UserInterface Built! 23:50:31 Room Docs Site Webview Opened for: [https://webexcc-sa.github.io/LAB-1451/wx1_1451_part_3/] 23:50:50 Room Docs QR Webview Opened for: [https://www.cisco.com] {\"status\":\"OK\"} https://api.qrserver.com/v1/create-qr-code/?data=https://www.cisco.com 23:50:54 Room Docs Site Webview Opened for: [https://roomos.cisco.com/xapi] 23:51:02 Room Docs QR Webview Opened for: [https://www.cisco.com/c/dam/en/us/td/docs/telepresence/endpoint/ce97/extra-loudspeakers-local-reinforcement-guide-ce97.pdf] {\"status\":\"OK\"} https://api.qrserver.com/v1/create-qr-code/?data=https://www.cisco.com/c/dam/en/us/td/docs/telepresence/endpoint/ce97/extra-loudspeakers-local-reinforcement-guide-ce97.pdf 23:51:04 Room Docs Site Webview Opened for: [https://blog.webex.com/collaboration/hybrid-work/next-level-audio-with-webex-ai-codec/] Lesson: Adjust the <code>manifestVisibility</code> value in the <code>config</code> object <p>Info</p> <p>Last, but certainly not least, is a demonstration that shows what the <code>manifestVisibility</code> value can affect when changed</p> <ul> <li> <p>xAPI: N/A</p> </li> <li> <p>Task:</p> <ul> <li>Select the Room Docs Configuration macro</li> <li> <p>Change the value of <code>manifestVisibility</code> to 1 of the 3 values below</p> <ul> <li>localOnly</li> <li>remoteOnly</li> <li>merge</li> </ul> </li> <li> <p>Once complete, Save and Activate the Room Docs Macro (if inactive)</p> </li> <li> <p>Start pressing the Open Site and Open QrCode \ud83d\udd33 buttons contained within your <code>Room Docs</code> panel</p> </li> <li> <p>Repeat for each <code>manifestVisibility</code> Value</p> </li> </ul> <p>Click the tabs below to see the differences of each <code>manifestVisibility</code> Value</p> localOnlyremoteOnlymerge Syntax<pre><code>manifestVisibility: 'localOnly',\n</code></pre> <p> Local Panel UI </p> Syntax<pre><code>manifestVisibility: 'remoteOnly',\n</code></pre> <p> Remote Panel UI </p> Syntax<pre><code>manifestVisibility: 'merge',\n</code></pre> <p> Remote and Local Panel UI </p> </li> </ul> <p>Congratulations!</p> <p>You just made a UI Extension and a Macro add in some new function.</p> <p>This is only the beginning, there is a world of solutions waiting to be solved. Even this solution has so much potential for more</p> <p>Now, Dive into Deployment in Part 4!</p>"},{"location":"wx1_1451_part_4/","title":"Deploying your Customization","text":""},{"location":"wx1_1451_part_4/#41-46-deployment-via-control-hub","title":"4.1 - 4.6 Deployment via Control Hub","text":""},{"location":"wx1_1451_part_4/#41-setting-and-using-tags-to-filter-devices","title":"4.1 Setting and using tags to filter devices","text":"<p>Abstract</p> <p>Device Tags are one of the most underutilized features for sorting and filtering devices.  Not only are tags useful in Control Hub, but they are also extremely beneficial when working  with the Webex RESTful APIs, providing one of the most effective ways to filter devices.</p> <p>Tip</p> <p>Add as many tags in this exercise as you please. They will help you identify your pod's device in later labs. Hint a pod tag may be handy. In the real world you could add a tag for  each of the following: Country, State, City, Building, Room, Product. Using tags in the manner  gives you better control over deployments. Imagine an issue is occuring but only on Room Bars. Now you have a tag to run a command using CE-Deploy(which you will see in a later lab) that will  only affect those devices. 4.1 Lessons <p>4.1.1 Login to the lab's Control Hub with your admin credentials</p> <p>4.1.2 Select Management&gt;Devices</p> <p> </p> <p>4.1.3 Select your lab device(Room Bar or Desk Pro)</p> <p> </p> <p>4.1.4 Select Edit</p> <p> </p> <p>4.1.5 The Edit tag page will now allow you to set as many tags as you need.  For this lab we will be using the tag wbx. As an example wbx101. <p> </p> <p>4.1.6 Select Add tag</p> <p> Edit tag </p> <p>4.1.7 Add wbx and press enter <p> </p> <p>4.1.8 Select Close to close the Edit tags page.</p> <p>4.1.9 Close the edit configurations popout and return to the main devices page.</p> <p>4.1.10 In the Find by devices dialog box type Tags: then enter the device tag previously set.</p> <p> </p> <p> </p> <p>Success</p> <p>While this may seem rather insignificant with just one or two devices, if you where deploying  100's or 1000's of endpoints this just makes finding your group of endpoints a whole lot easier.  In a later lab we will use the wbx1 tag to do a deployment via the Rest API. This concludes  deployment lab one. Now on to using templates.</p>"},{"location":"wx1_1451_part_4/#42-building-and-deploying-configuration-templates-via-control-hub","title":"4.2 Building and deploying configuration templates via Control Hub","text":"<p>Abstract</p> <p>One of the easiest and most effective ways to deploy a series of configuration changes to  RoomOS devices is through configuration templates. In this lab, we will explore deploying  configurations using both device-based and organization-based templates. In this lab we are  going to create a template to set the volume of you device and enable macros for the Macro  deployment lab. </p> 4.2 Lessons <p>4.2.1 Login to control hub with your lab admin credentials</p> <p>4.2.2 Select Management&gt;Devices</p> <p> </p> <p>4.2.3 Select Templates</p> <p> </p> <p>4.2.4 Select Create template</p> <p> </p> <p>4.2.5 Name your template Wbx1LabTemplate and select Next.  For example Wbx1LabTemplate101. <p> </p> <p>4.2.6 In the Search by configuration name type volume</p> <p> </p> <p>4.2.7 Select Audio&gt;Default Volume</p> <p>4.2.8 Change the Default Volume to 60</p> <p> </p> <p>4.2.9 Once you have set Audio to 60 select \"All\" to go back to the configuration search</p> <p>4.2.10 In the Search by configuration name type Macro</p> <p> </p> <p>4.2.11 Change the Mode from Off to On and then select Next</p> <p> </p> <p>4.2.12 Review your new template and select Create</p> <p>4.2.13 Now that we have created a new template lets apply it to our device. Select Go to Devices</p> <p> </p> <p>4.2.14 Select your lab device(Room Bar or Desk Pro)</p> <p> </p> <p>4.2.15 Select Edit</p> <p> </p> <p>4.2.16 Select Configuration templates</p> <p> </p> <p>4.2.17 From the template dropdown select the Wbx1LabTemplateXXX and review your settings</p> <p> </p> <p>4.2.18 Select Next and then Apply</p> <p>4.2.19 Review the successful deployment of your configurations and select close</p> <p> </p> <p>Success</p> <p>Well done. This lab section is now complete.</p>"},{"location":"wx1_1451_part_4/#43-building-and-deploying-org-wide-configuration-templates-via-control-hub","title":"4.3 Building and deploying Org-Wide configuration templates via Control Hub","text":"<p>Abstract</p> <p>In the last lab, we built device-specific configuration templates that can be deployed to  specific endpoints or groups of selected endpoints. We can make this easier by building a  hierarchy of settings that allows us to control these settings at an organization or  location level.</p> <p>Tip</p> <p>You can set configuration defaults for the whole organization,  or for an individual location. These configurations are applied automatically to all devices  that are enrolled in an organization, or set to a specific location. This helps you to manage  configuration consistency across devices. When default configurations are applied, you can still configure an individual device or a set of devices if needed.</p> 4.3 Lessons <p>4.3.1 Login to control hub with your lab admin credentials</p> <p>4.3.2 Select Management&gt;Devices&gt;Settings&gt;Configuration Defaults</p> <p> </p> <p> </p> <p>4.3.3 Select Open org-wide defaults</p> <p>4.3.4 You may notice there are already some defaults provisioned,  we are going to select Add configurations</p> <p> </p> <p>4.3.5 This presents a similar configuration selection as device templates.  For our org-wide template we are just going  to set the Macro mode. In the Search by configuration name type Macro</p> <p> </p> <p>4.3.6 Change the Mode from Off to On and select Next</p> <p> </p> <p>4.3.7 Review the changes and select Cancel changes. Our lab environment contains multiple pods so applying the change is not possible for this configuration.</p> <p> </p> <p>Success</p> <p>Congrats you have now viewed an org-wide configuration template. Now every time a new  device is added to this organization by default the settings from org-wide defaults will be applied. be set to on unless a more specific location or device configuration supersedes it.</p> <p> </p>"},{"location":"wx1_1451_part_4/#44-running-xapi-commands-via-control-hub","title":"4.4 Running xAPI commands via Control Hub","text":"<p>Abstract</p> <p>Running xAPI commands in Control Hub can be done on and endpoint by endpoint basis. In this lab  you will execute a simple xAPI command to get the system time to get an understanding how to  execute and find a command. In the next lab we will follow that up with deploying extensions  in a similar fashion.</p> 4.4 Lessons <p>4.4.1 Login to control hub with your lab admin credentials</p> <p>4.4.2 Select Management&gt;Devices</p> <p> </p> <p>4.4.3 Right-click on your lab device, no need to highlight the checkbox  this time(Room Bar or Desk Pro)</p> <p>4.4.4 Select Actions and Run xCommand</p> <p> </p> <p>4.4.5 Type time into the search for a command name text box. Select Time&gt;DateTime</p> <p> </p> <p>4.4.6 Select Get from the two options for DateTime</p> <p> </p> <p>4.4.7 Select Execute</p> <p> </p> <p>Success</p> <p>Well done. While this is a simple example we will dive a little deeper next with using  the same method to deploy extensions so don\u2019t stray to far. Cancel out the Time &gt; DateTime &gt; Get  text in the search bar by using the x button on the left hand side of the text box.</p>"},{"location":"wx1_1451_part_4/#45-deploy-extensions-via-control-hub","title":"4.5 Deploy Extensions via Control Hub","text":"<p>Abstract</p> <p>Adding custom buttons can be achieved in several ways, including via the API, embedded in a macro , the web admin portal on the device, Control Hub, or CE-Deploy. Regardless of the method you  choose, all approaches yield the same outcome. In our labs, we will try using Control Hub and  then CE-Deploy.</p> 4.5 Lessons <p>4.5.1 In the clear search box for Run xCommands type UserInterface &gt; Extensions &gt;Panel and select  the Save option</p> <p> </p> <p>4.5.2 This will open the Save Arguments dialog</p> <p> </p> <p>4.5.3 Use Post_Meeting_Survey as the PanelId. Open Post_Meeting_Survey.xml or copy the xml below in a  text editor then copy and paste the Post_Meeting_Survey.xml text into the Body section.</p> Post_Meeting_Survey_Macro.xml<pre><code>&lt;Extensions&gt;\n    &lt;Version&gt;1.11&lt;/Version&gt;\n    &lt;Panel&gt;\n        &lt;Order&gt;14&lt;/Order&gt;\n        &lt;PanelId&gt;Post_Meeting_Survey&lt;/PanelId&gt;\n        &lt;Location&gt;Hidden&lt;/Location&gt;\n        &lt;Icon&gt;Lightbulb&lt;/Icon&gt;\n        &lt;Name&gt;Post Meeting Survey&lt;/Name&gt;\n        &lt;ActivityType&gt;Custom&lt;/ActivityType&gt;\n        &lt;Page&gt;\n            &lt;Name&gt;Post Meeting Survey&lt;/Name&gt;\n            &lt;Row&gt;\n                &lt;Name&gt;Overall Rating&lt;/Name&gt;\n                &lt;Widget&gt;\n                    &lt;WidgetId&gt;post_overall_text&lt;/WidgetId&gt;\n                    &lt;Name&gt;- - - - -&lt;/Name&gt;\n                    &lt;Type&gt;Text&lt;/Type&gt;\n                    &lt;Options&gt;size=2;fontSize=normal;align=center&lt;/Options&gt;\n                &lt;/Widget&gt;\n                &lt;Widget&gt;\n                    &lt;WidgetId&gt;post_overall_change&lt;/WidgetId&gt;\n                    &lt;Name&gt;Change&lt;/Name&gt;\n                    &lt;Type&gt;Button&lt;/Type&gt;\n                    &lt;Options&gt;size=2&lt;/Options&gt;\n                &lt;/Widget&gt;\n            &lt;/Row&gt;\n            &lt;Row&gt;\n                &lt;Name&gt;Audio Quality&lt;/Name&gt;\n                &lt;Widget&gt;\n                    &lt;WidgetId&gt;post_Audio&lt;/WidgetId&gt;\n                    &lt;Type&gt;GroupButton&lt;/Type&gt;\n                    &lt;Options&gt;size=4&lt;/Options&gt;\n                    &lt;ValueSpace&gt;\n                        &lt;Value&gt;\n                            &lt;Key&gt;4&lt;/Key&gt;\n                            &lt;Name&gt;Superb \ud83c\udf89&lt;/Name&gt;\n                        &lt;/Value&gt;\n                        &lt;Value&gt;\n                            &lt;Key&gt;3&lt;/Key&gt;\n                            &lt;Name&gt;Good \ud83d\ude0a&lt;/Name&gt;\n                        &lt;/Value&gt;\n                        &lt;Value&gt;\n                            &lt;Key&gt;2&lt;/Key&gt;\n                            &lt;Name&gt;Ok \ud83d\udc4d&lt;/Name&gt;\n                        &lt;/Value&gt;\n                        &lt;Value&gt;\n                            &lt;Key&gt;1&lt;/Key&gt;\n                            &lt;Name&gt;Poor \ud83e\udee4&lt;/Name&gt;\n                        &lt;/Value&gt;\n                    &lt;/ValueSpace&gt;\n                &lt;/Widget&gt;\n            &lt;/Row&gt;\n            &lt;Row&gt;\n                &lt;Name&gt;Video Quality&lt;/Name&gt;\n                &lt;Widget&gt;\n                    &lt;WidgetId&gt;post_Video&lt;/WidgetId&gt;\n                    &lt;Type&gt;GroupButton&lt;/Type&gt;\n                    &lt;Options&gt;size=4&lt;/Options&gt;\n                    &lt;ValueSpace&gt;\n                        &lt;Value&gt;\n                            &lt;Key&gt;4&lt;/Key&gt;\n                            &lt;Name&gt;Superb \ud83c\udf89&lt;/Name&gt;\n                        &lt;/Value&gt;\n                        &lt;Value&gt;\n                            &lt;Key&gt;3&lt;/Key&gt;\n                            &lt;Name&gt;Good \ud83d\ude0a&lt;/Name&gt;\n                        &lt;/Value&gt;\n                        &lt;Value&gt;\n                            &lt;Key&gt;2&lt;/Key&gt;\n                            &lt;Name&gt;Ok \ud83d\udc4d&lt;/Name&gt;\n                        &lt;/Value&gt;\n                        &lt;Value&gt;\n                            &lt;Key&gt;1&lt;/Key&gt;\n                            &lt;Name&gt;Poor \ud83e\udee4&lt;/Name&gt;\n                        &lt;/Value&gt;\n                    &lt;/ValueSpace&gt;\n                &lt;/Widget&gt;\n            &lt;/Row&gt;\n            &lt;Row&gt;\n                &lt;Name&gt;Room Cleanliness&lt;/Name&gt;\n                &lt;Widget&gt;\n                    &lt;WidgetId&gt;post_Room&lt;/WidgetId&gt;\n                    &lt;Type&gt;GroupButton&lt;/Type&gt;\n                    &lt;Options&gt;size=4&lt;/Options&gt;\n                    &lt;ValueSpace&gt;\n                        &lt;Value&gt;\n                            &lt;Key&gt;4&lt;/Key&gt;\n                            &lt;Name&gt;Superb \ud83c\udf89&lt;/Name&gt;\n                        &lt;/Value&gt;\n                        &lt;Value&gt;\n                            &lt;Key&gt;3&lt;/Key&gt;\n                            &lt;Name&gt;Good \ud83d\ude0a&lt;/Name&gt;\n                        &lt;/Value&gt;\n                        &lt;Value&gt;\n                            &lt;Key&gt;2&lt;/Key&gt;\n                            &lt;Name&gt;Ok \ud83d\udc4d&lt;/Name&gt;\n                        &lt;/Value&gt;\n                        &lt;Value&gt;\n                            &lt;Key&gt;1&lt;/Key&gt;\n                            &lt;Name&gt;Poor \ud83e\udee4&lt;/Name&gt;\n                        &lt;/Value&gt;\n                    &lt;/ValueSpace&gt;\n                &lt;/Widget&gt;\n            &lt;/Row&gt;\n            &lt;Row&gt;\n                &lt;Name/&gt;\n                &lt;Widget&gt;\n                    &lt;WidgetId&gt;post_Email_text&lt;/WidgetId&gt;\n                    &lt;Name&gt;[Enter Email] -- &amp;gt;&lt;/Name&gt;\n                    &lt;Type&gt;Text&lt;/Type&gt;\n                    &lt;Options&gt;size=3;fontSize=normal;align=center&lt;/Options&gt;\n                &lt;/Widget&gt;\n                &lt;Widget&gt;\n                    &lt;WidgetId&gt;post_Email_enter&lt;/WidgetId&gt;\n                    &lt;Name&gt;Enter&lt;/Name&gt;\n                    &lt;Type&gt;Button&lt;/Type&gt;\n                    &lt;Options&gt;size=1&lt;/Options&gt;\n                &lt;/Widget&gt;\n            &lt;/Row&gt;\n            &lt;Row&gt;\n                &lt;Name/&gt;\n                &lt;Widget&gt;\n                    &lt;WidgetId&gt;post_Submit&lt;/WidgetId&gt;\n                    &lt;Name&gt;Submit&lt;/Name&gt;\n                    &lt;Type&gt;Button&lt;/Type&gt;\n                    &lt;Options&gt;size=4&lt;/Options&gt;\n                &lt;/Widget&gt;\n            &lt;/Row&gt;\n            &lt;Options/&gt;\n        &lt;/Page&gt;\n    &lt;/Panel&gt;\n&lt;/Extensions&gt;\n</code></pre> <p> Saving the Panel extension </p> <p>4.5.4 Scroll done to the bottom of the Arguments section and Select Execute</p> <p> </p> <p>You should see a response after execution to show it has been successful</p> <p> </p> <p>Success</p> <p>You should now see the Post_Meeting_Survey button on your device panel/display.  Next step is making our new custom button function.</p>"},{"location":"wx1_1451_part_4/#46-deploy-macros-via-control-hub","title":"4.6 Deploy Macro's via Control Hub","text":"<p>Abstract</p> <p>As it stand right now our new custom button does nothing. We are about to change that by adding  a macro that will act on the button being touched.</p> <p>An increasing number of customers are implementing macros and customizations. Without an  efficient deployment solution, it is improbable that customers will extend their custom  solutions beyond a handful of endpoints. Fortunately, Control Hub and CE-Deploy offer tools  that facilitate this process. Control Hub now has the capability to manage both UI and Macro  customizations on individual endpoints, while CE-Deploy can assist with bulk deployment.</p> 4.6 Lessons <p>4.6.1 Login to control hub with your lab admin credentials</p> <p>4.6.2 First step is to enable Control Hub to manage the devices macros. Select Devices-&gt;Settings</p> <p>4.6.3 Scroll down to the Macros section and toggle on -&gt; Allow Control Hub to manage macros</p> <p> </p> <p>4.6.4 Next is to deploy our first macro to the Lab device</p> <p>4.6.5 Choose the lab device. Devices -&gt; LabRoomBar/DeskPro(choose your lab device)</p> <p>4.6.6 You can now see that there are no macros deployed to this device  under Configuration -&gt; Macros</p> <p> </p> <p>4.6.7 Click on Macros</p> <p>4.6.8 Select Add Macro</p> <p> </p> <p>4.6.9 Select -&gt; Choose a File and navigate to Post_Meeting_Survey_Macro.js. If the file is not available  copy the javascript below, paste into a text editor of your choice and save it as a .js file named Post_Meeting_Survey_Macro.js.</p> <p>Post_Meeting_Survey_Macro.js<pre><code>import xapi from 'xapi';\n\nconst star_rating_icon = '\u272a ';\n\nxapi.Event.CallDisconnect.on(event =&gt; {\n    setTimeout(Start_Survey, 1000)\n})\n\nlet meetingScores = {\n    Audio: 4,\n    Video: 4,\n    Room: 4\n}\n\nasync function Start_Survey() {\n    //Reset widget values\n    meetingScores.Audio = 4\n    meetingScores.Video = 4\n    meetingScores.Room = 4\n    await xapi.Command.UserInterface.Extensions.Widget.SetValue({ WidgetId: 'post_overall_text', Value: '- - - - -' });\n    await xapi.Command.UserInterface.Extensions.Widget.SetValue({ WidgetId: 'post_Email_text', Value: '[Enter Email] -- &gt;' });\n\n    const buttons = ['post_Audio', 'post_Video', 'post_Room']\n    for (let i = 0; i &lt; buttons.length; i++) {\n        await xapi.Command.UserInterface.Extensions.Widget.SetValue({ WidgetId: buttons[i], Value: 4 })\n    }\n\n    await xapi.Command.UserInterface.Message.Rating.Display({ Title: 'Rate your call?', Text: 'How would you rate your overall call experience?', FeedbackId: 'star_rating', Duration: 120 })\n}\n\nfunction Followup_Survey(rating) {\n    xapi.Command.UserInterface.Message.Prompt.Display({\n        Title: 'Tell us more of your Experience?',\n        Text: `Would you like to take our extended survey so we can learn more about your ${star_rating_icon.repeat(rating)}experience?`,\n        FeedbackId: 'extended_survey',\n        \"Option.1\": 'Nah, I\\'m Good',\n        \"Option.2\": 'Sure, Happy to Help!'\n    })\n}\n\nxapi.Event.UserInterface.Message.Rating.Response.on(event =&gt; {\n    if (event.FeedbackId == 'star_rating') {\n        xapi.Command.UserInterface.Extensions.Widget.SetValue({ WidgetId: 'post_overall_text', Value: `${star_rating_icon.repeat(parseInt(event.Rating))}` });\n        if (parseInt(event.Rating) &lt; 5) {\n            Followup_Survey(parseInt(event.Rating))\n        } else {\n            xapi.Command.UserInterface.Message.Prompt.Display({ Title: `Awesome \ud83e\udd73`, Text: 'Thanks for 5 Star Rating!&lt;p&gt;Have a Great Day!', Duration: 15 })\n        }\n    }\n\n    if (event.FeedbackId == 'star_rating_change') {\n        xapi.Command.UserInterface.Extensions.Widget.SetValue({ WidgetId: 'post_overall_text', Value: `${star_rating_icon.repeat(parseInt(event.Rating))}` });\n    }\n})\n\nxapi.Event.UserInterface.Message.Prompt.Response.on(event =&gt; {\n    if (event.FeedbackId == 'extended_survey' &amp;&amp; event.OptionId == 2) {\n        xapi.Command.UserInterface.Extensions.Panel.Open({ PanelId: 'Post_Meeting_Survey' })\n    }\n})\n\n\nxapi.Event.UserInterface.Message.TextInput.Response.on(event =&gt; {\n    if (event.FeedbackId == 'email') {\n        xapi.Command.UserInterface.Extensions.Widget.SetValue({ WidgetId: 'post_Email_text', Value: event.Text })\n    }\n})\n\nxapi.Event.UserInterface.Extensions.Widget.Action.on(event =&gt; {\n    if (event.Type == 'released') {\n        switch (event.WidgetId) {\n            case 'post_overall_change':\n                xapi.Command.UserInterface.Message.Rating.Display({ Title: 'Rate your call?', Text: 'How would you rate your overall call experience?', FeedbackId: 'star_rating_change', Duration: 120 })\n                break;\n            case 'post_Audio':\n                meetingScores.Audio = parseInt(event.Value)\n                break;\n            case 'post_Video':\n                meetingScores.Video = parseInt(event.Value)\n                break;\n            case 'post_Room':\n                meetingScores.Room = parseInt(event.Value)\n                break;\n            case 'post_Email_enter':\n                xapi.Command.UserInterface.Message.TextInput.Display({ Title: 'Add your Email', Text: '(Optional) By providing your Email, we may follow up with you about your Meeting Room Experience', FeedbackId: 'email', Duration: 120 })\n                break;\n            case 'post_Submit':\n                xapi.Command.UserInterface.Extensions.Panel.Close()\n                setTimeout(function () {\n                    xapi.Command.UserInterface.Message.Prompt.Display({\n                        Title: `Thanks for letting us know!`,\n                        Text: `We appreciate your feedback and aim to do better next time&lt;p&gt;Room Score: ${meetingScores.Audio + meetingScores.Video + meetingScores.Room} out of 12`,\n                        Duration: 15\n                    })\n                }, 125)\n                break;\n        }\n    }\n})\n</code></pre> </p> <p>4.6.10 Click Next</p> <p> </p> <p>4.6.11 Ensure that your Macro is enabled</p> <p> </p> <p>4.6.12 Click Save. Then click Save again</p> <p>4.6.13 You should now see in the macro engine logs your macro is loaded without error.</p> <p> </p> <p>4.6.14 While still in the Macros lets make a change to our uploaded macro.  Click on the edit button.</p> <p> </p> <p>4.6.15 Type the following line to the Macro on line 2.</p> <p><pre><code>console.log(\"Post Survey Macro Loading\u2026..\");\n</code></pre> Click save</p> <p>4.6.16 You should now notice in your logs that the console message now appears  as the macro is loaded.</p> <p> </p> <p>Success</p> <p>Console logging is a great way to debug your macro\u2019s in combination with the  macro engine log. To see your new Macro and Extension run try calling another pod and hang up. The Survey will appear after you hang up the call.</p>"},{"location":"wx1_1451_part_4/#47-414-deployment-via-ce-deploy","title":"4.7 - 4.14 Deployment via CE-Deploy","text":"<p>Abstract</p> <p>Now that you have completed the Control Hub labs, it's time to explore another bulk configuration option with CE-Deploy. CE-Deploy is a free, third-party application designed to address gaps in  Control Hub's bulk configuration capabilities. As Control Hub has evolved, it has incorporated  new bulk options and features that were initially available only in CE-Deploy, such as branding  options. However, some features, like bulk macro management, are still unique to CE-Deploy. In  this series of labs, we will review some of the features that make CE-Deploy an excellent choice  for bulk management.</p> <p>CE-Deploy Install</p> <p>Before we begin our lab you will need to download  and install CE-Deploy using the links below:</p> <p>Windows -&gt; Windows Installer</p> <p>Mac -&gt;  Mac Installer</p> Explore CE-Deploy <p> </p> Intro to CE-Deploy <p> </p>"},{"location":"wx1_1451_part_4/#47-download-a-webex-token-and-create-an-environment-in-ce-deploy","title":"4.7 Download a Webex token and create an Environment in CE-Deploy","text":"<p>Abstract</p> <p>Environments enable an admin to download access and refresh tokens into CE-Deploys OS secure store,  which are refreshed daily. This feature is particularly useful for admins who need to access  multiple Control Hub instances. By utilizing environments, admins can streamline the deployment  process. Instead of logging into Webex everytime you need to perform a deployment you can simply select the appropriate  environment, load the token from the secure store, and perform the required deployment.</p> Creating CE-Deploy Environments <p> </p> 4.7 Lessons <p>4.7.1 Open CE-deploy and select the Download Webex Token button in the manage token section</p> <p> </p> <p>4.7.2 Sign in to Webex and accept the integration permissions when prompted. This will load  your token and refresh token into the default environment. This is not a persistent environment  so will want to save our tokens into the secure store for repeated use.</p> <p>4.7.3 In the deployment features panel select \"Environment\".</p> <p> </p> <p>4.7.4 In the environment name section, name your environment \"EnvLab\" and click \"save Environment\".</p> <p>4.7.5 To load our new environment, use the dropdown in the Environment loading section and select your  new Environment  and select \"Load Environment\".</p> <p> </p> <p>4.7.6 You should now see your environment name populate the Environment Loaded text under manage Token.</p> <p> </p> <p>4.7.7 To test your token click the \"Test Token\" button. You should see the response below:</p> <p> </p> <p>Success</p> <p>Congrats, your token is now downloaded, you are ready to roll.</p>"},{"location":"wx1_1451_part_4/#48-deploy-xapi-commands-via-ce-deploy","title":"4.8 Deploy xAPI commands via CE-Deploy","text":"<p>Abstract</p> <p>Deploying xAPI commands is a fundamental aspect of administering a Cisco collaboration endpoint  deployment. While Control Hub allows us to deploy commands to a single endpoint, scaling this  process to a larger deployment through Control Hub or a terminal command prompt can be  time-consuming and inefficient. By utilizing CE-Deploy, we can efficiently deploy xAPI commands  to multiple endpoints using various criteria such as IP Address, Control Hub Org ID, Control Hub  Tags, and more. This lab will demonstrate how to deploy a system time check across multiple devices.  Although this is not a configuration change, it will showcase how the CE-Deploy message console  provides real-time feedback as the deployment progresses.</p> CE-Deploy Running xAPI Commands <p> </p> 4.8 Lessons <p>4.8.1 Open Ce-deploy and load the environment your created in the last lab.</p> Loading Environments <p>To load an environment, use the dropdown in the Environment loading section and select your new Environment and select Load Environment.</p> <p>4.8.2 Select xAPI from the deployment section. In the command text box enter:</p> <p><pre><code>xCommand Time DateTime Get\n</code></pre> </p> <p>4.8.3 Under the deployment options drop down select Org Id, this will populate the lab org ID.  As this command does not make any system changes it can be safely run against all the devices in the lab Control Hub Organization. By doing this we can see how CE-Deploy queues and completes  xAPI commands in bulk.</p> <p> </p> <p>4.8.4 Select the video devices only filter checkbox. This will limit running the command to only  the xAPI capable device in the organization and no other devices in the lab, an example being a phone.</p> <p>4.8.5 Select \"Start Deployment\"</p> <p>4.8.6 Ensure Run Deployment Now is selected and select Next.</p> <p>4.8.7 If any devices are offline you may receive a prompt letting your know that some of the devices are offline.  If this is case just select \"Yes\".</p> <p>4.8.8 The message console will now let you see the deployment in progress and all output from the devices.  In this case what is returned is the system time running on the endpoints.</p> <p> </p> <p>Success</p> <p>This concludes this section. While this is a simple use case, any xAPI command can be run in this fashion  including multiline commands that contain a body section.</p> Running a xStatus Command <p>Now that you know how to run a xCommand, can you work out how to run a xStatus command?</p> <p>Find a command at RoomOS</p>"},{"location":"wx1_1451_part_4/#49-deploy-branding-via-ce-deploy","title":"4.9 Deploy Branding via CE-Deploy","text":"<p>Abstract</p> <p>Similar to deploying xAPI commands, using CE-Deploy for branding offers unique advantages over  using Control Hub. While Control Hub allows for organization-wide branding, CE-Deploy provides  greater granularity, enabling deployment down to a single endpoint via a CSV file. This is  particularly useful if you have unique QR codes for each endpoint, as you can deliver the images  through CE-Deploy using a CSV file, rather than manually deploying them to each endpoint. In  this lab, we will deploy a branding image along with a QR code as a logo, helping your users  easily access a website of your choosing.</p> <p>The widespread adoption of QR codes has introduced unique advantages to branding. While it's commonly perceived that branding primarily involves displaying a company's logo on various devices, the integration of QR codes can significantly enhance this strategy. By combining branding with QR codes, companies can establish a dynamic communication channel with users directly through the devices they hold. In this exercise, we will create a QR code that will serve as a branding logo. This QR code will provide users with access to information they can conveniently take with them when they leave the room.</p> 4.9 Lessons <p>4.9.1 Open CE-Deploy and load the environment your created in a previous lab.</p> Loading Environments <p>To load an environment, use the dropdown in the Environment loading section and select your new Environment and select Load Environment.</p> <p>4.9.2 In this lab we will be load a background and logo on to our lab device but to help us do that first  we must create a tag for your pod's device in Control Hub. Log into the lab control hub instance and find your device.  Remember this Control Hub instance is for the entire lab so choosing your pod's device is important as we only want  to make changes to just your device.</p> <p>Control Hub admin login</p> <p>4.9.3 Add a tag using your pod ID similar to podXXX format.</p> <p> </p> <p>After typing in the tag press enter. The tag will be saved once you press enter.</p> <p>Now we have a tag added in Control Hub it will be easier to filter to just your device in CE-Deploy as we explore more options.</p> <p>4.9.4 It is now time to create a unique QR code using CE-Deploy. Open CE-Deploy from the deployment options select  Tools-&gt;QRCode.</p> <p> </p> <p>4.9.5 In the QR URL text box enter</p> <p><pre><code>https://www.webexone.com/\n</code></pre> Feel free to adjust the QR Code color palette to your liking or add a center image.</p> <p>Other options that are available include adding Banner Text or using the QR Code on a background image but  today we are using the QR code as a logo.</p> CE-Deploy QR Code <p> </p> <p>4.9.6 Once you have picked your options select Process QRCode.</p> <p> </p> <p>Everytime you select Process QRCode a new QR Code file is generated with a timestamp embedded in the name. For example code-09_47_51_582.jpeg. Feel free to generate as many codes as you like, you will need to pick one for the next step.</p> <p>4.9.7 Once you see the preview of your QR Code select the Open QR File button.  Take note of the location of the QR Code or copy and paste the QR code file  somewhere you can easily find for the next step.</p> <p>4.9.8 Next we are going to use the Personalization-&gt;Branding deployment option.</p> <p> </p> <p>Click Browse on the Logo Awake State File. Find your QR Logo and select it using the file picker. Next click Browse on the Logo HalfWake State File. Find your QR logo and select it using the file picker. Once both file are selected it should look like the screenshot below.</p> <p> </p> <p>4.9.9 In the Deployment Options section dropdown select Tags and enter your pod tag in the text box</p> <p> </p> <p>4.9.10 Ensure the Video Devices Only checkbox is checked.</p> <p>4.9.11 Press button Start Deployment.</p> <p>4.9.12 Ensure the Scheduler has the Run Deployment Now check box selected and click Next.</p> <p>4.9.13 The Message Console will now appear, you can follow along the deployment process.</p> <p> </p> <p>Success</p> <p>Congrats you just deployed your QR file as a logo using branding to your endpoint. You should now see the QR on the screen of your endpoint home screen. This was a pretty simple example, but as you can imagine  if you have 100's or 1000's of endpoints to deploy new branding assets to this could save  hours of work. By using tags to deploy your branding you can now see how effect filtering is.  You could deploy unique branding assets to different devices based on the tags you create.</p>"},{"location":"wx1_1451_part_4/#410-deploy-macros-via-ce-deploy","title":"4.10 Deploy Macros via CE-Deploy","text":"<p>Abstract</p> <p>Macros enhance your customization capabilities, allowing you to tailor your experience exactly  as you want it. However, deploying these macros can be challenging, especially when dealing  with multiple endpoints. While Control Hub supports single-endpoint deployment, this approach  becomes cumbersome and time-consuming for larger deployments. With CE-Deploy, you can roll out  a macro in minutes to hundreds or even thousands of endpoints. The CE-Deploy Macro Factory also  enables you to monitor your deployment for consistency and performance without needing to log  into the endpoint admin portal or control hub. Additionally, you can write your macro code  directly in CE-Deploy and deploy it in just a few easy steps. In this lab, we will write a new  macro, save it, and deploy it to your endpoints. We will then use the Macro Factory  to monitor  the rollout of everyone's macros.</p> CE-Deploy Macro deployment and the Macro Factory <p> </p> 4.10 Lessons <p>4.10.1 Open CE-Deploy and load your environment you created in the previous lab</p> Loading Environments <p>To load an environment, use the dropdown in the Environment loading section and select your new Environment and select Load Environment.</p> <p>Then select Design-&gt;Macro Editor from the main menu</p> <p> </p> <p>4.10.2 Copy the following code and paste it into the editor page and save the file as LaunchHalfwake.js</p> <p>LaunchHalfwake.js<pre><code>import xapi from 'xapi';\n\nxapi.Event.UserInterface.Extensions.Panel.Clicked.on((e) =&gt; {\n  if (e.PanelId === 'halfwake') {\n    xapi.Command.Standby.Halfwake();\n  }\n});\n</code></pre> Once completed it should look like the screenshot below.</p> <p> </p> <p>4.10.3 Click Save File.</p> <p>4.10.4 Name your file LaunchHalfwake.js and click Save</p> <p>4.10.5 Exit the Macro Editor.</p> <p>4.10.6 Select Customizations-&gt;Macros from the deployment features panel.</p> <p>4.10.7 Using the Macros deployment feature we can easily deploy a macro to hundreds of endpoints in minutes. Name your macro LaunchHalfwake and use the Macro Javascript File Browse button to select  the js file you create just moments ago.</p> <p>Ensure the Activate on deployment checkbox is selected.</p> <p>4.10.8 Under deployment Options use the dropdown to select Tags and enter your pod tag for your device.</p> <p> </p> <p>4.10.9 Again ensure the Video Devices Only checkbox is selected.</p> <p>4.10.10 Press button Start Deployment.</p> <p>4.10.11 Ensure the Scheduler has the Run Deployment Now check box selected and click Next.</p> <p>4.10.12 The Message Console will now appear, you can follow along the deployment process.</p> <p> </p> <p>4.10.13 You just deployed a macro to your device and activated it, we still need one more step  to ensure that it is in fact running. Unlike the device web admin portal which will restart the macro engine automatically everytime a change is made to a macro the APIs are not as polite. So in the next step we will use CE-Deploy xCommand to restart the endpoint macro engine.</p> <p>4.10.14 Open the deployment panel xAPI-&gt;Command feature and enter the restart command:</p> <p><pre><code>xCommand Macros Runtime Restart\n</code></pre> </p> <p>4.10.15 Under deployment Options use the dropdown to select Tags and enter your pod tag for your device.</p> <p>  { width=\"300\" }    </p> <p>4.10.16 Ensure the Video Devices Only checkbox is checked.</p> <p>4.10.17 Press button Start Deployment.</p> <p>4.10.18 Ensure the Scheduler has the Run Deployment Now check box selected and click Next.</p> <p>4.10.19 The Message Console will now appear, you can follow along the deployment process.</p> <p>4.10.20 We have our macro rolled out across all our endpoints but lets checkin on the other pods and see how they  doing. We are going to use the Macro Factory to monitor how the other pods are doing. In the deployment panel select the Dashboards. Do not select the Macro Factory just yet. First we need to select our deployment option.</p> <p> </p> <p>4.10.21 This time around we are going to select the Org Id</p> <p> </p> <p>When you select Org Id, the id automatically populates for our lab Control Hub org.</p> <p>4.10.22 Select the Macro Factory from the Dashboards</p> <p> </p> <p>You should now see the Macro Factory appear with all the pod endpoints that have added their macros.</p> <p> </p> <p>Take a look around. Keep it open and move the window to the side when done. We are going to  use the Macro Factory to clean up later.</p> <p>Success</p> <p>Now that we have our macro deployed we will turn our attention to deploying the accompanying extension to make it work.</p> Macro Factory Add a Macro <p>Can you load or remove a different Macro from an earlier lab? Have a go, its easy.</p> <p>Tip</p> <p>Things to note for the Macro Factory.</p> <ol> <li>Visual way to monitor macros</li> <li>Easy to use buttons, no need to remember commands</li> <li>Great for managment of a few endpoints adding, removing and activating macros</li> <li>For large bulk rollouts of Macros using the Deployment panel Customizations-&gt;Macros is a better option</li> </ol>"},{"location":"wx1_1451_part_4/#411-deploy-extensions-via-ce-deploy","title":"4.11 Deploy Extensions via CE-Deploy","text":"<p>Abstract</p> <p>Extensions enable companies to enhance and personalize the user experience. These extensions  can be deployed through Control Hub or CE-deploy. In this lab, we will deploy an extension to  accompany our macro from the last lab.</p> 4.11 Lessons <p>4.11.1 Open CE-Deploy and load your environment you created in the previous lab if it's not already loaded</p> Loading Environments <p>To load an environment, use the dropdown in the Environment loading section and select your new Environment and select Load Environment.</p> <p>Then select Design-&gt;Macro Editor from the main menu</p> <p> </p> <p>4.11.2 The Macro Editor can also be used to create our XML file. Copy the text below and paste it into  the Macro Editor and save the file as LaunchHalfwake.xml. Be sure to change the default extension from  .js to .xml</p> <p>LaunchHalfwake.xml<pre><code>&lt;Extensions&gt;\n  &lt;Version&gt;1.8&lt;/Version&gt;\n  &lt;Panel&gt;\n    &lt;Order&gt;1&lt;/Order&gt;\n    &lt;PanelId&gt;halfwake&lt;/PanelId&gt;\n    &lt;Origin&gt;local&lt;/Origin&gt;\n    &lt;Type&gt;Home&lt;/Type&gt;\n    &lt;Icon&gt;Power&lt;/Icon&gt;\n    &lt;Color&gt;#07C1E4&lt;/Color&gt;\n    &lt;Name&gt;HalfWake&lt;/Name&gt;\n    &lt;ActivityType&gt;Custom&lt;/ActivityType&gt;\n  &lt;/Panel&gt;\n&lt;/Extensions&gt;\n</code></pre> It should look something like this:</p> <p> </p> <p>4.11.3 Now we have our xml file lets role it out to our endpoint. For a single panel in the deployment panel select  Customizations-&gt;UIExtensions-&gt;Panel. This allows ot deploy or update a single panel.</p> <p> </p> <p>Tip</p> <p>When deploying a single panel using the same panel ID will create a new panel the first time, but subsequent  uses of the same ID will overwrite existing panels. </p> <p>To update more than 1 panel use the Customizations-&gt;UIExtensions-&gt;Config deployment panel feature. This allows the upload of xml files that contain multiple panels.</p> <p>4.11.4 In the panel ID text box enter halfwake as the panel ID. Using the Browse file picker select your  xml file you created in the last step.</p> <p> </p> <p>4.11.5 Under deployment Options use the dropdown to select Tags and enter your pod tag for your device.</p> <p> </p> <p>4.11.6 Ensure the Video Devices Only checkbox is checked.</p> <p>Warning</p> <p>An error may occur if this check box is not selected. Just make sure that it is checked if you receive an error while deploying.</p> <p>4.11.7 Press button Start Deployment.</p> <p>4.11.8 Ensure the Scheduler has the Run Deployment Now check box selected and click Next.</p> <p>4.11.9 The Message Console will now appear, you can follow along the deployment process.</p> <p>Success</p> <p>Its test time. The halfwake button should now appear on your home screen of your device.  Pressing the button should place your endpoint into the halfwake state.</p>"},{"location":"wx1_1451_part_4/#412-deploy-a-local-user-admin-using-ce-deploy","title":"4.12 Deploy a local user admin using CE-Deploy","text":"<p>Abstract</p> <p>A local user admin account allows direct access to the device without needing to go through  its web portal via Control Hub or the cloud xAPI. Some tasks and configuration options are not available  via the cloud, so having a local admin account provides a way to set configurations  and manage personal mode devices. Typically, setting up a new cloud device removes local  admin accounts, making the device's web portal accessible only through Control Hub. In this lab, you will add a new local admin account to the device via the cloud xAPI using CE-Deploy. </p> 4.12 Lessons <p>4.12.1 Open CE-Deploy and load your environment you created in the previous lab</p> Loading Environments <p>To load an environment, use the dropdown in the Environment loading section and select your new Environment and select Load Environment.</p> <p>Then select Users from the deployment panel</p> <p> </p> <p>Device Users</p> <p>Device users allows us to add, delete and modify device users via the cloud xAPI in CE-Deploy. If you doing integrations with 3rd party's, setting configurations or doing device backups having a local admin  account on the device may be critical for day to day operations. CE-Deploy can access a device by the IP address to take advantage of the local admin account. </p> <p>4.12.2 Set the following setting.</p> <code>Setting</code> <code>Device User Action</code> Add <code>Username</code> userxxx(yourPodNumber) <code>Passphrase</code> Cisco12345 <code>User Role</code> Admin, User, Integrator <code>PassPhase Change</code> No <code>Shell Login</code> Yes <code>Activate Account</code> Yes <p> </p> <p>4.12.3 Under deployment Options use the dropdown to select Tags and enter your pod tag for your device.</p> <p> </p> <p>4.12.4 Ensure the Video Devices Only checkbox is checked.</p> <p>4.12.5 Press button Start Deployment.</p> <p>4.12.6 Ensure the Scheduler has the Run Deployment Now check box selected and click Next.</p> <p>4.12.7 The Message Console will now appear, you can follow along the deployment process.</p> <p>Network IP Address Challenge</p> <p>In the next portion of the lab you will need the IP address of your pods endpoint. Using the  command below in CE-Deploy can you retrieve your IP?</p> <pre><code>    xStatus Network[1] IPv4 Address\n</code></pre> <p>4.12.8 To test the local admin account we are going to switch CE-Deploy into local mode from cloud and run an xAPI command directly to the device.</p> <p>Select the cloud/local toggle in the main navigation bar.</p> <p> </p> <p>Ensure that it is set to local and the interface updates:</p> <p> </p> <p>Now we can use the IP address of the device to send commands.</p> <p>4.12.9 Using the IP address from the IP challenge  and your new local admin username and password enter the details as shown along with the command:</p> <pre><code>xCommand time datetime get\n</code></pre> <p> </p> <p>4.12.10 Click on Start Deployment</p> <p>4.12.11 Ensure the Scheduler has the Run Deployment Now check box selected and click Next.</p> <p>4.12.13 The Message Console will now appear, you can follow along the deployment process.</p> <p> </p> <p>Success</p> <p>All done. Congrats, you have now seen the most commonly used functions in CE-Deploy, but there  is still plenty to explore. Stay on the local tab as we dive in deep to some lesser known features.</p>"},{"location":"wx1_1451_part_4/#413-deploy-xapi-command-via-the-shell-using-ce-deploy","title":"4.13 Deploy xAPI command via the shell using CE-Deploy","text":"<p>Abstract</p> <p>The terminal is not only a crucial tool for administering Cisco collaboration endpoints  but also an important resource for exploring xAPIs. In this lab, we will use CE-Deploy's  terminal emulation feature to run a command. CE-Deploy is the swiss army knife of video endpoint deployments so lets keep exploring.</p> 4.13 Lessons <p>4.13.1 From the local interface in the deployment panel select Tools-&gt;SSH-TTY.</p> <p> </p> <p>Warning</p> <p>This lab will only work if the endpoint and your PC/MAC running CE-Deploy are on the same  network.</p> <p>4.13.2  Add your endpoint local admin details, choose a theme and add the IP address  from the IP address challenge. </p> <p> </p> <p>4.13.3 Select Connect. The terminal will appear in a new Window and you can start  interacting with it.</p> <p> </p> <p>Success</p> <p>Once you have tried a few commands type in Bye command and the window  will automatically close.</p>"},{"location":"wx1_1451_part_4/#414-perform-a-device-backup-and-download-logs-using-ce-deploy","title":"4.14 Perform a device backup and download logs using CE-Deploy","text":"<p>Abstract</p> <p>In our final deployment lab, we will perform a backup of your endpoint using CE-Deploy and download the logs.  This backup will include all settings, macros, backgrounds, and extensions.  Having a backup of all your endpoints can be invaluable when you need to replace or restore a device.</p> 4.14 Lessons Part 1 <p>4.14.1 Open CE-Deploy and ensure you are in local mode and then select Backups from the deployment panel</p> <p>Warning</p> <p>This lab will only work if the endpoint and your PC/MAC running CE-Deploy are on the same  network.</p> <p>4.14.2 Enter your local admin user credentials and select single device and enter the IP address of your endpoint.</p> <p> </p> <p>4.14.3 Ensure the Download endpoint backups checkbox is selected in Backups panel.</p> <p>4.14.4 Select Start Deployment. The message console will now show the file location of the downloaded backup from the endpoint.</p> <p> Message Console </p> <p>4.14.5 To open the file location go to the application Tools-&gt;Backup Files. This wiill open the directory where all the backup files are stored.</p> <p> </p> Tip <p>If you want a more configurable option the web admin portal of the device will allow customization of the device backup you can download from the device. CE-Deploy will only download an entire backup ignoring any options from the  web admin portal.</p> <p>Success</p> <p>What you will find is a full back up of the device in a zip file. Feel free to unzip the file and explore what was backed up on your endpoint.  Backup File Unzipped </p> 4.14 Lessons Part 2 <p>Tip</p> <p>Ever been asked to download the logs from a endpoint for TAC. Well now you can download all the logs in one simple step. If you are required to download logs from more than one endpoint try the CSV option  where you can enter a list of IP addresses to download logs from multiple endpoints.</p> <p>4.14.7 Open CE-Deploy and ensure you are in local mode and then select Logs from the deployment panel</p> <p>Warning</p> <p>This lab will only work if the endpoint and your PC/MAC running CE-Deploy are on the same  network.</p> <p>4.14.8 Select Download endpoint logs</p> <p> </p> <p>4.14.9 Select Start Deployment. The message console will now show the file location of the downloaded logs from the endpoint.</p> <p>4.14.10 To open the file location go to the application Tools-&gt;Downloaded and CSV Files Files. This wiill open the directory where all the log files are stored. Log file naming convention will follow log_bundle-SEP-.tar.gz. <p> </p> <p>Success</p> <p>Well done. You have explored the main features of CE-Deploy and a few lesser known ones. Feel free to explore and see what else it can do. CE-Deploy is built on public API's freely available to everyone to develop your own solutions and scripts.</p>"}]}